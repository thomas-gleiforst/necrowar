"use strict";
/**
 * A collection of static functions that deals with transforming game states to
 * and from serialize-able objects when communicating between client <--> sever
 */
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("~/utils");
const constants_1 = require("./constants");
const game_1 = require("./game/");
/**
 * Checks if a given object is a game object reference (has only an id key set).
 *
 * @param obj - The object to check.
 * @returns True if the object is a game object reference
 */
function isGameObjectReference(obj) {
    return utils_1.isEmptyExceptFor(obj, "id");
}
exports.isGameObjectReference = isGameObjectReference;
/**
 * Serializes something about a game so it is safe to send over a socket.
 * This is required to avoid cycles and send lists correctly.
 *
 * @param state The variable you want to serialize.
 * Anything in the game should be Serializable, numbers, strings,
 * BaseGameObjects, dicts, lists, nulls, etc.
 * @returns The state, serialized. It will never be the same object if it is an
 * object ({} or []).
 */
function serialize(state) {
    let serializing = state;
    if (!utils_1.isObject(serializing)) {
        // not an object, no need to further serialize
        return serializing;
    }
    else if (serializing instanceof game_1.BaseGameObject) {
        // no need to serialize this whole thing
        return { id: serializing.id };
    }
    if (serializing instanceof Map) {
        serializing = utils_1.mapToObject(serializing);
    }
    const serialized = {};
    if (serializing instanceof Array) {
        // Record the length, we never send arrays in serialized states because
        // you can't tell when they change in size without sending all the
        // elements.
        serialized[constants_1.SHARED_CONSTANTS.DELTA_LIST_LENGTH] = serializing.length;
    }
    for (const [key, value] of Object.entries(serializing)) {
        serialized[key] = serialize(value);
    }
    return serialized; // it is actually TypedObject<Serialized> but that gets mad
}
exports.serialize = serialize;
/**
 * Un-serializes data from a game client.
 *
 * @param data The data to un-serialize.
 * @param game The game to lookup game objects in for game object references in
 * data.
 * @param dataTypeConverter The function to convert the un-serialized value
 * once found.
 * @returns The data now un-serialized, will create new objects instead of
 * reusing objects.
 */
function unSerialize(data, game, dataTypeConverter) {
    if (utils_1.isObject(data) && game) {
        const result = Array.isArray(data)
            ? [] // numbers are implicitly converted to strings which works, kinda hack-y
            : {};
        for (const [key, value] of Object.entries(data)) {
            if (utils_1.isObject(value)) {
                result[key] = isGameObjectReference(value)
                    ? game.gameObjects[value.id] // it's a tracked game object
                    : unSerialize(value, game);
            }
            else {
                result[key] = value;
            }
        }
        return result;
    }
    if (dataTypeConverter) {
        return dataTypeConverter(data);
    }
    return data; // it is a primitive, which are serializeable
}
exports.unSerialize = unSerialize;
//# sourceMappingURL=data:application/json;base64,