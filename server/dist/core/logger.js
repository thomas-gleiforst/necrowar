"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const winston = require("winston");
const config_1 = require("~/core/config");
const utils_1 = require("~/utils");
const alignedWithColorsAndTime = winston.format.combine(winston.format.colorize(), winston.format.timestamp(), winston.format.prettyPrint(), winston.format.align(), winston.format.printf((info) => {
    const { timestamp, level, message, ...args } = info;
    const ts = String(timestamp).slice(0, 19).replace("T", " ");
    return `${ts} [${level}]: ${message} ${Object.keys(args).length
        ? JSON.stringify(args, null, 2)
        : ""}`;
}));
const transports = [
    new winston.transports.Console({
        // colorize the output to the console
        format: alignedWithColorsAndTime,
        silent: config_1.Config.SILENT,
    }),
];
if (config_1.Config.LOG_TO_FILES) {
    transports.push(new winston.transports.File({
        dirname: path_1.join(config_1.Config.LOGS_DIR, "console"),
        filename: `${utils_1.momentString()}.log`,
    }));
}
/** The winston logger instance to use. */
exports.logger = winston.createLogger({
    level: "debug",
    transports,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTRCO0FBQzVCLG1DQUFtQztBQUNuQywwQ0FBdUM7QUFDdkMsbUNBQXVDO0FBWXZDLE1BQU0sd0JBQXdCLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQ25ELE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQ3pCLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQzFCLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLEVBQzVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQ3RCLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7SUFDM0IsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBRXBELE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFNUQsT0FBTyxHQUFHLEVBQUUsS0FBSyxLQUFLLE1BQU0sT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTTtRQUMzRCxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsRUFDTixFQUFFLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FDTCxDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQXdCO0lBQ3BDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUM7UUFDM0IscUNBQXFDO1FBQ3JDLE1BQU0sRUFBRSx3QkFBd0I7UUFDaEMsTUFBTSxFQUFFLGVBQU0sQ0FBQyxNQUFNO0tBQ3hCLENBQUM7Q0FDTCxDQUFDO0FBRUYsSUFBSSxlQUFNLENBQUMsWUFBWSxFQUFFO0lBQ3JCLFVBQVUsQ0FBQyxJQUFJLENBQ1gsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQztRQUN4QixPQUFPLEVBQUUsV0FBSSxDQUFDLGVBQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQ3pDLFFBQVEsRUFBRSxHQUFHLG9CQUFZLEVBQUUsTUFBTTtLQUNwQyxDQUFDLENBQ0wsQ0FBQztDQUNMO0FBRUQsMENBQTBDO0FBQzdCLFFBQUEsTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDdkMsS0FBSyxFQUFFLE9BQU87SUFDZCxVQUFVO0NBQ2IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgKiBhcyB3aW5zdG9uIGZyb20gXCJ3aW5zdG9uXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwifi9jb3JlL2NvbmZpZ1wiO1xuaW1wb3J0IHsgbW9tZW50U3RyaW5nIH0gZnJvbSBcIn4vdXRpbHNcIjtcblxuLyoqXG4gKiBBIHRyYW5zcG9ydCBpbnN0YW5jZSBpbiBXaW5zdG9uLlxuICpcbiAqIE5vdCBzdXJlIHdoeSB0aGV5IGRvbid0IGV4cG9zZSBhIGJhc2UgaW50ZXJmYWNlIGZvciB0aGVzZS4uLlxuICovXG50eXBlIFRyYW5zcG9ydEluc3RhbmNlID0gd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGVUcmFuc3BvcnRJbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICB8IHdpbnN0b24udHJhbnNwb3J0cy5GaWxlVHJhbnNwb3J0SW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgfCB3aW5zdG9uLnRyYW5zcG9ydHMuSHR0cFRyYW5zcG9ydEluc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgIHwgd2luc3Rvbi50cmFuc3BvcnRzLlN0cmVhbVRyYW5zcG9ydEluc3RhbmNlO1xuXG5jb25zdCBhbGlnbmVkV2l0aENvbG9yc0FuZFRpbWUgPSB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKFxuICAgIHdpbnN0b24uZm9ybWF0LmNvbG9yaXplKCksXG4gICAgd2luc3Rvbi5mb3JtYXQudGltZXN0YW1wKCksXG4gICAgd2luc3Rvbi5mb3JtYXQucHJldHR5UHJpbnQoKSxcbiAgICB3aW5zdG9uLmZvcm1hdC5hbGlnbigpLFxuICAgIHdpbnN0b24uZm9ybWF0LnByaW50ZigoaW5mbykgPT4ge1xuICAgICAgICBjb25zdCB7IHRpbWVzdGFtcCwgbGV2ZWwsIG1lc3NhZ2UsIC4uLmFyZ3MgfSA9IGluZm87XG5cbiAgICAgICAgY29uc3QgdHMgPSBTdHJpbmcodGltZXN0YW1wKS5zbGljZSgwLCAxOSkucmVwbGFjZShcIlRcIiwgXCIgXCIpO1xuXG4gICAgICAgIHJldHVybiBgJHt0c30gWyR7bGV2ZWx9XTogJHttZXNzYWdlfSAke09iamVjdC5rZXlzKGFyZ3MpLmxlbmd0aFxuICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeShhcmdzLCBudWxsLCAyKVxuICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgIH1gO1xuICAgIH0pLFxuKTtcblxuY29uc3QgdHJhbnNwb3J0czogVHJhbnNwb3J0SW5zdGFuY2VbXSA9IFtcbiAgICBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgICAgICAvLyBjb2xvcml6ZSB0aGUgb3V0cHV0IHRvIHRoZSBjb25zb2xlXG4gICAgICAgIGZvcm1hdDogYWxpZ25lZFdpdGhDb2xvcnNBbmRUaW1lLFxuICAgICAgICBzaWxlbnQ6IENvbmZpZy5TSUxFTlQsXG4gICAgfSksXG5dO1xuXG5pZiAoQ29uZmlnLkxPR19UT19GSUxFUykge1xuICAgIHRyYW5zcG9ydHMucHVzaChcbiAgICAgICAgbmV3IHdpbnN0b24udHJhbnNwb3J0cy5GaWxlKHtcbiAgICAgICAgICAgIGRpcm5hbWU6IGpvaW4oQ29uZmlnLkxPR1NfRElSLCBcImNvbnNvbGVcIiksXG4gICAgICAgICAgICBmaWxlbmFtZTogYCR7bW9tZW50U3RyaW5nKCl9LmxvZ2AsXG4gICAgICAgIH0pLFxuICAgICk7XG59XG5cbi8qKiBUaGUgd2luc3RvbiBsb2dnZXIgaW5zdGFuY2UgdG8gdXNlLiAqL1xuZXhwb3J0IGNvbnN0IGxvZ2dlciA9IHdpbnN0b24uY3JlYXRlTG9nZ2VyKHtcbiAgICBsZXZlbDogXCJkZWJ1Z1wiLFxuICAgIHRyYW5zcG9ydHMsXG59KTtcbiJdfQ==