"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("~/utils");
/**
 * Takes a variable and tries to cast it to a string. If the passed in value is
 * not string-like at all, returns an Error.
 *
 * @param s Any string like variable to try to transform, undefined and null
 * will be empty string.
 * @param allowError - If errors should be allowed to be returned if they
 * cannot be reasonable sanitized.
 * @returns Always returns a string.
 */
function sanitizeString(s, allowError = true) {
    if (allowError && utils_1.isObject(s)) {
        return new Error(`'${s}' is an Object and cannot be reasonably cast to a string`);
    }
    return s === undefined || s === null
        ? ""
        : String(s);
}
exports.sanitizeString = sanitizeString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUtc3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvcmUvc2FuaXRpemUvc2FuaXRpemUtc3RyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBZ0NuQzs7Ozs7Ozs7O0dBU0c7QUFDSCxTQUFnQixjQUFjLENBQzFCLENBQVUsRUFDVixhQUFzQixJQUFJO0lBRTFCLElBQUksVUFBVSxJQUFJLGdCQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDM0IsT0FBTyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsMERBQTBELENBQUMsQ0FBQztLQUNyRjtJQUVELE9BQU8sQ0FBQyxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUssSUFBSTtRQUNoQyxDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQVhELHdDQVdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwifi91dGlsc1wiO1xuXG4vKipcbiAqIFRha2VzIGEgdmFyaWFibGUgYW5kIHRyaWVzIHRvIGNhc3QgaXQgdG8gYSBzdHJpbmcuIElmIHRoZSBwYXNzZWQgaW4gdmFsdWUgaXNcbiAqIG5vdCBzdHJpbmctbGlrZSBhdCBhbGwsIHJldHVybnMgYW4gRXJyb3IuXG4gKlxuICogQHBhcmFtIHMgQW55IHN0cmluZyBsaWtlIHZhcmlhYmxlIHRvIHRyeSB0byB0cmFuc2Zvcm0sIHVuZGVmaW5lZCBhbmQgbnVsbFxuICogd2lsbCBiZSBlbXB0eSBzdHJpbmcuXG4gKiBAcGFyYW0gYWxsb3dFcnJvciAtIElmIGVycm9ycyBzaG91bGQgYmUgYWxsb3dlZCB0byBiZSByZXR1cm5lZCBpZiB0aGV5XG4gKiBjYW5ub3QgYmUgcmVhc29uYWJsZSBzYW5pdGl6ZWQuXG4gKiBAcmV0dXJucyBBbHdheXMgcmV0dXJucyBhIHN0cmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplU3RyaW5nKFxuICAgIHM6IHVua25vd24sXG4gICAgYWxsb3dFcnJvcjogYm9vbGVhbixcbik6IHN0cmluZyB8IEVycm9yO1xuXG4vKipcbiAqIFRha2VzIGEgdmFyaWFibGUgYW5kIHRyaWVzIHRvIGNhc3QgaXQgdG8gYSBzdHJpbmcuXG4gKiBBbHdheXMgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gcyBBbnkgc3RyaW5nIGxpa2UgdmFyaWFibGUgdG8gdHJ5IHRvIHRyYW5zZm9ybSwgdW5kZWZpbmVkIGFuZCBudWxsXG4gKiB3aWxsIGJlIGVtcHR5IHN0cmluZy5cbiAqIEBwYXJhbSBhbGxvd0Vycm9yIC0gSWYgZXJyb3JzIHNob3VsZCBiZSBhbGxvd2VkIHRvIGJlIHJldHVybmVkIGlmIHRoZXlcbiAqIGNhbm5vdCBiZSByZWFzb25hYmxlIHNhbml0aXplZC5cbiAqIEByZXR1cm5zIEFsd2F5cyByZXR1cm5zIGEgc3RyaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVTdHJpbmcoXG4gICAgczogdW5rbm93bixcbiAgICBhbGxvd0Vycm9yOiBmYWxzZSxcbik6IHN0cmluZztcblxuLyoqXG4gKiBUYWtlcyBhIHZhcmlhYmxlIGFuZCB0cmllcyB0byBjYXN0IGl0IHRvIGEgc3RyaW5nLiBJZiB0aGUgcGFzc2VkIGluIHZhbHVlIGlzXG4gKiBub3Qgc3RyaW5nLWxpa2UgYXQgYWxsLCByZXR1cm5zIGFuIEVycm9yLlxuICpcbiAqIEBwYXJhbSBzIEFueSBzdHJpbmcgbGlrZSB2YXJpYWJsZSB0byB0cnkgdG8gdHJhbnNmb3JtLCB1bmRlZmluZWQgYW5kIG51bGxcbiAqIHdpbGwgYmUgZW1wdHkgc3RyaW5nLlxuICogQHBhcmFtIGFsbG93RXJyb3IgLSBJZiBlcnJvcnMgc2hvdWxkIGJlIGFsbG93ZWQgdG8gYmUgcmV0dXJuZWQgaWYgdGhleVxuICogY2Fubm90IGJlIHJlYXNvbmFibGUgc2FuaXRpemVkLlxuICogQHJldHVybnMgQWx3YXlzIHJldHVybnMgYSBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZVN0cmluZyhcbiAgICBzOiB1bmtub3duLFxuICAgIGFsbG93RXJyb3I6IGJvb2xlYW4gPSB0cnVlLFxuKTogc3RyaW5nIHwgRXJyb3Ige1xuICAgIGlmIChhbGxvd0Vycm9yICYmIGlzT2JqZWN0KHMpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoYCcke3N9JyBpcyBhbiBPYmplY3QgYW5kIGNhbm5vdCBiZSByZWFzb25hYmx5IGNhc3QgdG8gYSBzdHJpbmdgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcyA9PT0gdW5kZWZpbmVkIHx8IHMgPT09IG51bGxcbiAgICAgICAgPyBcIlwiXG4gICAgICAgIDogU3RyaW5nKHMpO1xufVxuIl19