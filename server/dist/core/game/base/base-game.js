"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_game_delta_mergeables_1 = require("./base-game-delta-mergeables");
const base_game_object_factory_1 = require("./base-game-object-factory");
/** The base game that all Game classes inherit from. */
class BaseGame extends base_game_delta_mergeables_1.BaseGameDeltaMergeables {
    /**
     * Initializes a game. Should **only** be done by this game's manager.
     *
     * @param settingsManager - The settings manager for this instance.
     * @param requiredData - The required initialization data.
     */
    constructor(settingsManager, requiredData) {
        super({
            key: "game",
            parent: requiredData.rootDeltaMergeable,
            attributesSchema: requiredData.schema.attributes,
            initialValues: settingsManager.values,
        });
        this.settingsManager = settingsManager;
        /**
         * The actual setting values we will use to initialize things.
         */
        this.settings = Object.freeze(this.settingsManager.values);
        // Our super has now created our delta mergeables,
        // let's reach in and grab the game objects all hack-y like.
        // tslint:disable-next-line:no-any no-non-null-assertion
        const gameObjectsDeltaMergeable = this.deltaMergeable.child("gameObjects");
        this.manager = requiredData.manager;
        this.name = requiredData.namespace.gameName;
        this.session = requiredData.sessionID;
        const clients = requiredData.playingClients;
        for (let i = 0; i < clients.length; i++) {
            const client = clients[i];
            client.aiManager.game = this; // kind of hack-y, we are hooking this up here
            const playerData = {
                name: this.settings.playerNames[i] || client.name || `Player ${i}`,
                clientType: client.programmingLanguage || "Unknown",
            };
            const player = base_game_object_factory_1.createGameObject({
                id: requiredData.playerIDs[i],
                game: this,
                gameObjectsDeltaMergeable,
                gameObjectName: "Player",
                GameObjectClass: requiredData.namespace.Player,
                gameNamespace: requiredData.namespace,
                data: playerData,
            });
            player.timeRemaining = this.settings.playerStartingTime;
            player.ai = new requiredData.namespace.AI(client.aiManager);
            client.setPlayer(player);
            this.players.push(player);
        }
        requiredData.gameCreated.emit({
            game: this,
            gameObjectsDeltaMergeable,
        });
    }
}
exports.BaseGame = BaseGame;
//# sourceMappingURL=data:application/json;base64,