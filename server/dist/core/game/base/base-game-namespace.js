"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Should be invoked by all games to format their namespace correctly.
 *
 * @param namespace - The base game namespace to use. Will be mutated.
 * @returns The same game namespace ready to be used to play games with.
 */
function makeNamespace(namespace) {
    for (const obj of Object.values(namespace.gameObjectsSchema)) {
        if (!obj) {
            throw new Error(`unexpected non object in namespace ${namespace.gameName}`);
        }
        let depth = obj;
        while (depth.parentClassName) {
            // hook up the parent classes' attributes/functions
            const parent = namespace.gameObjectsSchema[depth.parentClassName];
            if (!parent) {
                throw new Error(`No parent for namespace ${namespace.gameName} recursively constructing!`);
            }
            Object.assign(obj.attributes, parent.attributes);
            Object.assign(obj.functions, parent.functions);
            depth = parent;
        }
    }
    return Object.freeze(namespace);
}
exports.makeNamespace = makeNamespace;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1nYW1lLW5hbWVzcGFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2dhbWUvYmFzZS9iYXNlLWdhbWUtbmFtZXNwYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBb0VBOzs7OztHQUtHO0FBQ0gsU0FBZ0IsYUFBYSxDQUN6QixTQUFzQjtJQUV0QixLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLEVBQUU7UUFDMUQsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQy9FO1FBRUQsSUFBSSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2hCLE9BQU8sS0FBSyxDQUFDLGVBQWUsRUFBRTtZQUMxQixtREFBbUQ7WUFDbkQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUNsRSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsMkJBQTJCLFNBQVMsQ0FBQyxRQUFRLDRCQUE0QixDQUFDLENBQUM7YUFDOUY7WUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHLE1BQU0sQ0FBQztTQUNsQjtLQUNKO0lBRUQsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBaUIsQ0FBQztBQUNwRCxDQUFDO0FBdkJELHNDQXVCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTYW5pdGl6YWJsZVR5cGUgfSBmcm9tIFwifi9jb3JlL3Nhbml0aXplL3Nhbml0aXphYmxlLWludGVyZmFjZXNcIjtcbmltcG9ydCB7IENvbnN0cnVjdG9yLCBJbW11dGFibGUsIFR5cGVkT2JqZWN0IH0gZnJvbSBcIn4vdXRpbHNcIjtcbmltcG9ydCB7IEJhc2VBSSB9IGZyb20gXCIuL2Jhc2UtYWlcIjtcbmltcG9ydCB7IEJhc2VHYW1lIH0gZnJvbSBcIi4vYmFzZS1nYW1lXCI7XG5pbXBvcnQgeyBCYXNlR2FtZU1hbmFnZXIgfSBmcm9tIFwiLi9iYXNlLWdhbWUtbWFuYWdlclwiO1xuaW1wb3J0IHsgQmFzZUdhbWVPYmplY3RGYWN0b3J5IH0gZnJvbSBcIi4vYmFzZS1nYW1lLW9iamVjdC1mYWN0b3J5XCI7XG5pbXBvcnQgeyBCYXNlR2FtZVNldHRpbmdzTWFuYWdlciB9IGZyb20gXCIuL2Jhc2UtZ2FtZS1zZXR0aW5nc1wiO1xuaW1wb3J0IHsgQmFzZVBsYXllciB9IGZyb20gXCIuL2Jhc2UtcGxheWVyXCI7XG5cbi8qKiBOYW1lc3BhY2Ugc2NoZW1hIGZvciBhIGJhc2UgZ2FtZSBvYmplY3QgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJhc2VHYW1lT2JqZWN0U2NoZW1hIHtcbiAgICAvKiogVGhlIHBhcmVudCBjbGFzcyBuYW1lIGFzIGEgc3RyaW5nLiAqL1xuICAgIHBhcmVudENsYXNzTmFtZT86IHN0cmluZztcbiAgICAvKiogS2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBhdHRyaWJ1dGVzIG9mIHRoaXMgZ2FtZSBvYmplY3QgKi9cbiAgICBhdHRyaWJ1dGVzOiBUeXBlZE9iamVjdDxJU2FuaXRpemFibGVUeXBlICYge1xuICAgICAgICAvKiogT3B0aW9uYWwgZGVmYXVsdCB2YWx1ZSBmb3IgdGhpcyBhdHRyaWJ1dGUuICovXG4gICAgICAgIGRlZmF1bHRWYWx1ZT86IHVua25vd247XG4gICAgfT47XG4gICAgLyoqIFRoZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgaW52b2tlZCBmb3IgdGhpcyBnYW1lIG9iamVjdCBhbmQgdGhlaXIgYXJnICYgcmV0dXJuIHNjaGVtYXMuICovXG4gICAgZnVuY3Rpb25zOiBUeXBlZE9iamVjdDxJQmFzZUdhbWVPYmplY3RGdW5jdGlvblNjaGVtYT47XG59XG5cbi8qKiBOYW1lc3BhY2Ugc2NoZW1hIGZvciBmdW5jdGlvbnMgdGhhdCBnYW1lIG9iamVjdHMgY2FuIGludm9rZSAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmFzZUdhbWVPYmplY3RGdW5jdGlvblNjaGVtYSB7XG4gICAgLyoqIEFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIHdoZW4gY2FsbGVkLiAqL1xuICAgIGFyZ3M6IEFycmF5PElTYW5pdGl6YWJsZVR5cGUgJiB7XG4gICAgICAgIC8qKiBUaGUgbmFtZSBvZiB0aGUgYXJndW1lbnQuICovXG4gICAgICAgIGFyZ05hbWU6IHN0cmluZztcbiAgICAgICAgLyoqIFRoZSBkZWZhdWx0IHZhbHVlLCBpZiBpdCBpcyBvcHRpb25hbC4gKi9cbiAgICAgICAgZGVmYXVsdFZhbHVlPzogdW5rbm93bjtcbiAgICB9PjtcbiAgICAvKiogVGhlIHNjaGVtYSBhYm91dCB3aGF0IHR5cGUgaXQgcmV0dXJucy4gKi9cbiAgICByZXR1cm5zOiBJU2FuaXRpemFibGVUeXBlO1xuICAgIC8qKiBUaGUgdmFsdWUgcmV0dXJuZWQgaWYgdGhlIGZ1bmN0aW9uIGNhbGwgZmFpbHMgdG8gdmFsaWRhdGUuICovXG4gICAgaW52YWxpZFZhbHVlPzogdW5rbm93bjtcbn1cblxuLyoqIFRoZSBuYW1lc3BhY2UgYWxsIGdhbWUgaW5kZXggZmlsZXMgc2hvdWxkIGV4cG9ydCAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmFzZUdhbWVOYW1lc3BhY2Uge1xuICAgIC8qKiBUaGUgY2xhc3MgZm9yIEFJcyBwbGF5aW5nIHRoaXMgZ2FtZS4gKi9cbiAgICBBSTogdHlwZW9mIEJhc2VBSTtcbiAgICAvKiogVGhlIGNsYXNzIGZvciB0aGUgR2FtZSB0aGlzIG5hbWVzcGFjZSB3cmFwcy4gKi9cbiAgICBHYW1lOiB0eXBlb2YgQmFzZUdhbWU7XG4gICAgLyoqIFRoZSBjbGFzcyBmb3IgdGhlIEdhbWVNYW5hZ2VyIGZvciB0aGUgR2FtZS4gKi9cbiAgICBHYW1lTWFuYWdlcjogdHlwZW9mIEJhc2VHYW1lTWFuYWdlcjtcbiAgICAvKiogVGhlIGZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBHYW1lT2JqZWN0cyBpbiB0aGlzIEdhbWUuICovXG4gICAgR2FtZU9iamVjdEZhY3Rvcnk6IHR5cGVvZiBCYXNlR2FtZU9iamVjdEZhY3Rvcnk7XG4gICAgLyoqIFRoZSBzZXR0aW5ncyBtYW5hZ2VyIGNsYXNzIGZvciB0aGlzIEdhbWUuICovXG4gICAgR2FtZVNldHRpbmdzTWFuYWdlcjogdHlwZW9mIEJhc2VHYW1lU2V0dGluZ3NNYW5hZ2VyO1xuICAgIC8qKiBUaGUgY2xhc3Mgb2YgdGhlIFBsYXllciBpbnN0YW5jZXMgaW4gdGhpcyBnYW1lLiAqL1xuICAgIFBsYXllcjogQ29uc3RydWN0b3I8QmFzZVBsYXllcj47XG4gICAgLyoqIFRoZSB1bmlxdWUgaWRlbnRpZnlpbmcgc3RyaW5nIGZvciB0aGlzIEdhbWUuICovXG4gICAgZ2FtZU5hbWU6IHN0cmluZztcbiAgICAvKiogVGhlIHNjaGVtYSBhYm91dCB3aGF0IEdhbWVPYmplY3RzIGFyZSB2YWxpZCBpbiBnYW1lIHNldHRpbmdzIGZvciB0aGlzIEdhbWUuICovXG4gICAgZ2FtZU9iamVjdHNTY2hlbWE6IHtcbiAgICAgICAgLyoqIFRoZSBBSSdzIHNjaGVtYSAqL1xuICAgICAgICBBSTogSUJhc2VHYW1lT2JqZWN0U2NoZW1hO1xuICAgICAgICAvKiogVGhlIEdhbWUncyBiYXNlIGF0dHJpYnV0ZSdzIHNjaGVtYS4gKi9cbiAgICAgICAgR2FtZTogSUJhc2VHYW1lT2JqZWN0U2NoZW1hO1xuICAgICAgICAvKioga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBnYW1lIG9iamVjdCBjbGFzcyBuYW1lIHRvIHRoZWlyIHNjaGVtYS4gKi9cbiAgICAgICAgW2dhbWVPYmplY3ROYW1lOiBzdHJpbmddOiBJQmFzZUdhbWVPYmplY3RTY2hlbWEgfCB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICAvKiogQSBzdGF0aWMgc2V0dGluZ3MgbWFuYWdlciBmb3IgdGhlIExvYmJ5IHRvIGNoZWNrIGluaXRpYWwgc2V0dGluZ3Mgc2VudC4gKi9cbiAgICBnYW1lU2V0dGluZ3NNYW5hZ2VyOiBCYXNlR2FtZVNldHRpbmdzTWFuYWdlcjtcbiAgICAvKiogVGhlIGhhc2hlZCBnYW1lIHRlbWxhdGUgdXNlZCB0byByZXByZXNlbnQgdGhlIHZlcnNpb24gb2YgdGhpcyBnYW1lICovXG4gICAgZ2FtZVZlcnNpb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBTaG91bGQgYmUgaW52b2tlZCBieSBhbGwgZ2FtZXMgdG8gZm9ybWF0IHRoZWlyIG5hbWVzcGFjZSBjb3JyZWN0bHkuXG4gKlxuICogQHBhcmFtIG5hbWVzcGFjZSAtIFRoZSBiYXNlIGdhbWUgbmFtZXNwYWNlIHRvIHVzZS4gV2lsbCBiZSBtdXRhdGVkLlxuICogQHJldHVybnMgVGhlIHNhbWUgZ2FtZSBuYW1lc3BhY2UgcmVhZHkgdG8gYmUgdXNlZCB0byBwbGF5IGdhbWVzIHdpdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTmFtZXNwYWNlPFQgZXh0ZW5kcyBJQmFzZUdhbWVOYW1lc3BhY2U+KFxuICAgIG5hbWVzcGFjZTogUmVhZG9ubHk8VD4sIC8vIHJlYWRvbmx5IGFzIGtleXMgZG8gbm90IGNoYW5nZSwgYnV0IHRoZWlyIHZhbHVlcyBkbyBtdXRhdGUgYSBiaXQuXG4pOiBJbW11dGFibGU8VD4geyAvLyBkbyBub3QgbXV0YXRlIHRoZSByZXR1cm5lZCBuYW1lc3BhY2VzXG4gICAgZm9yIChjb25zdCBvYmogb2YgT2JqZWN0LnZhbHVlcyhuYW1lc3BhY2UuZ2FtZU9iamVjdHNTY2hlbWEpKSB7XG4gICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgbm9uIG9iamVjdCBpbiBuYW1lc3BhY2UgJHtuYW1lc3BhY2UuZ2FtZU5hbWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZGVwdGggPSBvYmo7XG4gICAgICAgIHdoaWxlIChkZXB0aC5wYXJlbnRDbGFzc05hbWUpIHtcbiAgICAgICAgICAgIC8vIGhvb2sgdXAgdGhlIHBhcmVudCBjbGFzc2VzJyBhdHRyaWJ1dGVzL2Z1bmN0aW9uc1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbmFtZXNwYWNlLmdhbWVPYmplY3RzU2NoZW1hW2RlcHRoLnBhcmVudENsYXNzTmFtZV07XG4gICAgICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcGFyZW50IGZvciBuYW1lc3BhY2UgJHtuYW1lc3BhY2UuZ2FtZU5hbWV9IHJlY3Vyc2l2ZWx5IGNvbnN0cnVjdGluZyFgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvYmouYXR0cmlidXRlcywgcGFyZW50LmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihvYmouZnVuY3Rpb25zLCBwYXJlbnQuZnVuY3Rpb25zKTtcbiAgICAgICAgICAgIGRlcHRoID0gcGFyZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5mcmVlemUobmFtZXNwYWNlKSBhcyBJbW11dGFibGU8VD47XG59XG4iXX0=