"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A function that creates a game object without state.
 * @param args - The arguments required to hook up a new game object.
 * @returns The newly created game object.
 */
function createGameObject(args) {
    const schema = args.gameNamespace.gameObjectsSchema[args.gameObjectName];
    if (!schema) {
        throw new Error(`Cannot find game object schema for ${args.gameObjectName} in ${args.gameNamespace.gameName}`);
    }
    return new args.GameObjectClass(args.data, {
        id: args.id,
        game: args.game,
        gameObjectName: args.gameObjectName,
        gameObjectsDeltaMergeable: args.gameObjectsDeltaMergeable,
        schema,
    });
}
exports.createGameObject = createGameObject;
/** A factory that creates game objects in a game and hooks them up */
class BaseGameObjectFactory {
    /**
     * Creates a new game object factor (gameManager.create).
     *
     * @param namespace - The namespace of game this creates for.
     * @param generateID - A function which when invoked generates a unique
     * string ID for new game objects.
     * @param gameCreated - An event that will emit once that game is created.
     */
    constructor(namespace, generateID, gameCreated) {
        this.namespace = namespace;
        this.generateID = generateID;
        gameCreated.once(({ game, gameObjectsDeltaMergeable }) => {
            this.game = game;
            this.gameObjectsDeltaMergeable = gameObjectsDeltaMergeable;
        });
    }
    /**
     * Creates a game object of the given data.
     * @param gameObjectName - The string name of the game object class to
     * create.
     * @param GameObjectClass - The class constructor for that game object.
     * @param data - Required data to construct a new game object from.
     * @returns The newly created game object.
     */
    createGameObject(gameObjectName, GameObjectClass, data) {
        return createGameObject({
            id: this.generateID(),
            game: this.game,
            GameObjectClass,
            gameObjectName,
            gameNamespace: this.namespace,
            gameObjectsDeltaMergeable: this.gameObjectsDeltaMergeable,
            data,
        });
    }
}
exports.BaseGameObjectFactory = BaseGameObjectFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1nYW1lLW9iamVjdC1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvcmUvZ2FtZS9iYXNlL2Jhc2UtZ2FtZS1vYmplY3QtZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQU9BOzs7O0dBSUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBMkIsSUFlekQ7SUFDRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV6RSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsSUFBSSxDQUFDLGNBQWMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDbEg7SUFFRCxPQUFPLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ3ZDLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtRQUNYLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtRQUNmLGNBQWMsRUFBRSxJQUFJLENBQUMsY0FBYztRQUNuQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMseUJBQXlCO1FBQ3pELE1BQU07S0FDVCxDQUFNLENBQUM7QUFDWixDQUFDO0FBN0JELDRDQTZCQztBQUVELHNFQUFzRTtBQUN0RSxNQUFhLHFCQUFxQjtJQU05Qjs7Ozs7OztPQU9HO0lBQ0gsWUFDcUIsU0FBd0MsRUFDeEMsVUFBd0IsRUFDekMsV0FLRztRQVBjLGNBQVMsR0FBVCxTQUFTLENBQStCO1FBQ3hDLGVBQVUsR0FBVixVQUFVLENBQWM7UUFRekMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFDLEVBQUUsRUFBRTtZQUNuRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLENBQUMseUJBQXlCLEdBQUcseUJBQXlCLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNPLGdCQUFnQixDQUN0QixjQUFzQixFQUN0QixlQUFzQyxFQUN0QyxJQUFvQztRQUVwQyxPQUFPLGdCQUFnQixDQUFDO1lBQ3BCLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3JCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLGVBQWU7WUFDZixjQUFjO1lBQ2QsYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQzdCLHlCQUF5QixFQUFFLElBQUksQ0FBQyx5QkFBeUI7WUFDekQsSUFBSTtTQUNQLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQXJERCxzREFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudCB9IGZyb20gXCJ0cy10eXBlZC1ldmVudHNcIjtcbmltcG9ydCB7IERlbHRhTWVyZ2VhYmxlIH0gZnJvbSBcIn4vY29yZS9nYW1lL2RlbHRhLW1lcmdlYWJsZVwiO1xuaW1wb3J0IHsgSW1tdXRhYmxlIH0gZnJvbSBcIn4vdXRpbHNcIjtcbmltcG9ydCB7IEJhc2VHYW1lIH0gZnJvbSBcIi4vYmFzZS1nYW1lXCI7XG5pbXBvcnQgeyBJQmFzZUdhbWVOYW1lc3BhY2UgfSBmcm9tIFwiLi9iYXNlLWdhbWUtbmFtZXNwYWNlXCI7XG5pbXBvcnQgeyBCYXNlR2FtZU9iamVjdCwgSUJhc2VHYW1lT2JqZWN0RGF0YSB9IGZyb20gXCIuL2Jhc2UtZ2FtZS1vYmplY3RcIjtcblxuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIGdhbWUgb2JqZWN0IHdpdGhvdXQgc3RhdGUuXG4gKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgcmVxdWlyZWQgdG8gaG9vayB1cCBhIG5ldyBnYW1lIG9iamVjdC5cbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGdhbWUgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlR2FtZU9iamVjdDxUIGV4dGVuZHMgQmFzZUdhbWVPYmplY3Q+KGFyZ3M6IFJlYWRvbmx5PHtcbiAgICAvKiogVGhlIElEIG9mIHRoZSBnYW1lIG9iamVjdCBjcmVhdGluZyAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqIFRoZSBnYW1lIGluc3RhbmNlIG9mIHRoZSBnYW1lIG9iamVjdCBpdCB3aWxsIGJlIHBhcnQgb2YuICovXG4gICAgZ2FtZTogQmFzZUdhbWU7XG4gICAgLyoqIFRoZSBDbGFzcyBjb25zdHJ1Y3RvciBvZiB0aGlzIEdhbWVPYmplY3QncyBjbGFzcyAqL1xuICAgIEdhbWVPYmplY3RDbGFzczogdHlwZW9mIEJhc2VHYW1lT2JqZWN0O1xuICAgIC8qKiBUaGUgbmFtZSBvZiB0aGUgZ2FtZSBvYmplY3QncyBjbGFzcyAqL1xuICAgIGdhbWVPYmplY3ROYW1lOiBzdHJpbmc7XG4gICAgLyoqIFRoZSBEZWx0YU1lcmdlYWJsZSB0byB0cmFjayB0aGlzIGdhbWUgb2JqZWN0J3Mgc3RhdGUuICovXG4gICAgZ2FtZU9iamVjdHNEZWx0YU1lcmdlYWJsZTogRGVsdGFNZXJnZWFibGU7XG4gICAgLyoqIFRoZSBuYW1lc3BhY2UgdGhpcyBnYW1lIG9iamVjdCBhbmQgaXRzIGdhbWUgY2FtZSBmcm9tLiAqL1xuICAgIGdhbWVOYW1lc3BhY2U6IEltbXV0YWJsZTxJQmFzZUdhbWVOYW1lc3BhY2U+O1xuICAgIC8qKiBUaGUgaW5pdGlhbGl6YXRpb24gYXRhIHVzZWQgYXMgY29uc3RydWN0b3IgYXJncyAqL1xuICAgIGRhdGE6IFJlYWRvbmx5PElCYXNlR2FtZU9iamVjdERhdGE+O1xufT4pOiBUIHtcbiAgICBjb25zdCBzY2hlbWEgPSBhcmdzLmdhbWVOYW1lc3BhY2UuZ2FtZU9iamVjdHNTY2hlbWFbYXJncy5nYW1lT2JqZWN0TmFtZV07XG5cbiAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBmaW5kIGdhbWUgb2JqZWN0IHNjaGVtYSBmb3IgJHthcmdzLmdhbWVPYmplY3ROYW1lfSBpbiAke2FyZ3MuZ2FtZU5hbWVzcGFjZS5nYW1lTmFtZX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IGFyZ3MuR2FtZU9iamVjdENsYXNzKGFyZ3MuZGF0YSwge1xuICAgICAgICBpZDogYXJncy5pZCxcbiAgICAgICAgZ2FtZTogYXJncy5nYW1lLFxuICAgICAgICBnYW1lT2JqZWN0TmFtZTogYXJncy5nYW1lT2JqZWN0TmFtZSxcbiAgICAgICAgZ2FtZU9iamVjdHNEZWx0YU1lcmdlYWJsZTogYXJncy5nYW1lT2JqZWN0c0RlbHRhTWVyZ2VhYmxlLFxuICAgICAgICBzY2hlbWEsXG4gICAgfSkgYXMgVDtcbn1cblxuLyoqIEEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgZ2FtZSBvYmplY3RzIGluIGEgZ2FtZSBhbmQgaG9va3MgdGhlbSB1cCAqL1xuZXhwb3J0IGNsYXNzIEJhc2VHYW1lT2JqZWN0RmFjdG9yeSB7XG4gICAgLyoqIFRoZSBnYW1lIGFsbCBjcmVhdGVkIGdhbWUgb2JqZWN0cyBhcmUgYSBwYXJ0IG9mLiAqL1xuICAgIHByaXZhdGUgZ2FtZSE6IEJhc2VHYW1lOyAvLyB0aGlzIHdpbGwgYWN0dWFsbHkgYmUgc2V0IGV4dGVybmFsbHkgOlBcbiAgICAvKiogVGhlIHJvb3QgRGVsdGFNZXJnZWFibGUgZ2FtZSBvYmplY3RzIGFyZSBhZG9wdGVkIGJ5LiAqL1xuICAgIHByaXZhdGUgZ2FtZU9iamVjdHNEZWx0YU1lcmdlYWJsZSE6IERlbHRhTWVyZ2VhYmxlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBnYW1lIG9iamVjdCBmYWN0b3IgKGdhbWVNYW5hZ2VyLmNyZWF0ZSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmFtZXNwYWNlIC0gVGhlIG5hbWVzcGFjZSBvZiBnYW1lIHRoaXMgY3JlYXRlcyBmb3IuXG4gICAgICogQHBhcmFtIGdlbmVyYXRlSUQgLSBBIGZ1bmN0aW9uIHdoaWNoIHdoZW4gaW52b2tlZCBnZW5lcmF0ZXMgYSB1bmlxdWVcbiAgICAgKiBzdHJpbmcgSUQgZm9yIG5ldyBnYW1lIG9iamVjdHMuXG4gICAgICogQHBhcmFtIGdhbWVDcmVhdGVkIC0gQW4gZXZlbnQgdGhhdCB3aWxsIGVtaXQgb25jZSB0aGF0IGdhbWUgaXMgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBuYW1lc3BhY2U6IEltbXV0YWJsZTxJQmFzZUdhbWVOYW1lc3BhY2U+LFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGdlbmVyYXRlSUQ6ICgpID0+IHN0cmluZyxcbiAgICAgICAgZ2FtZUNyZWF0ZWQ6IEV2ZW50PFJlYWRvbmx5PHtcbiAgICAgICAgICAgIC8qKiBUaGUgZ2FtZSB0aGF0IHdhcyBjcmVhdGVkLiAqL1xuICAgICAgICAgICAgZ2FtZTogQmFzZUdhbWU7XG4gICAgICAgICAgICAvKiogVGhlIHJvb3QgZGVsdGEgbWVyZWFibGUgb2YgdGhlIGdhbWUgdGhhdCB3YXMgY3JlYXRlZC4gKi9cbiAgICAgICAgICAgIGdhbWVPYmplY3RzRGVsdGFNZXJnZWFibGU6IERlbHRhTWVyZ2VhYmxlO1xuICAgICAgICB9Pj4sXG4gICAgKSB7XG4gICAgICAgIGdhbWVDcmVhdGVkLm9uY2UoKHtnYW1lLCBnYW1lT2JqZWN0c0RlbHRhTWVyZ2VhYmxlfSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZU9iamVjdHNEZWx0YU1lcmdlYWJsZSA9IGdhbWVPYmplY3RzRGVsdGFNZXJnZWFibGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBnYW1lIG9iamVjdCBvZiB0aGUgZ2l2ZW4gZGF0YS5cbiAgICAgKiBAcGFyYW0gZ2FtZU9iamVjdE5hbWUgLSBUaGUgc3RyaW5nIG5hbWUgb2YgdGhlIGdhbWUgb2JqZWN0IGNsYXNzIHRvXG4gICAgICogY3JlYXRlLlxuICAgICAqIEBwYXJhbSBHYW1lT2JqZWN0Q2xhc3MgLSBUaGUgY2xhc3MgY29uc3RydWN0b3IgZm9yIHRoYXQgZ2FtZSBvYmplY3QuXG4gICAgICogQHBhcmFtIGRhdGEgLSBSZXF1aXJlZCBkYXRhIHRvIGNvbnN0cnVjdCBhIG5ldyBnYW1lIG9iamVjdCBmcm9tLlxuICAgICAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIGdhbWUgb2JqZWN0LlxuICAgICAqL1xuICAgIHByb3RlY3RlZCBjcmVhdGVHYW1lT2JqZWN0PFQgZXh0ZW5kcyBCYXNlR2FtZU9iamVjdD4oXG4gICAgICAgIGdhbWVPYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgICAgIEdhbWVPYmplY3RDbGFzczogdHlwZW9mIEJhc2VHYW1lT2JqZWN0LFxuICAgICAgICBkYXRhOiBJbW11dGFibGU8SUJhc2VHYW1lT2JqZWN0RGF0YT4sXG4gICAgKTogVCB7XG4gICAgICAgIHJldHVybiBjcmVhdGVHYW1lT2JqZWN0KHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmdlbmVyYXRlSUQoKSxcbiAgICAgICAgICAgIGdhbWU6IHRoaXMuZ2FtZSxcbiAgICAgICAgICAgIEdhbWVPYmplY3RDbGFzcyxcbiAgICAgICAgICAgIGdhbWVPYmplY3ROYW1lLFxuICAgICAgICAgICAgZ2FtZU5hbWVzcGFjZTogdGhpcy5uYW1lc3BhY2UsXG4gICAgICAgICAgICBnYW1lT2JqZWN0c0RlbHRhTWVyZ2VhYmxlOiB0aGlzLmdhbWVPYmplY3RzRGVsdGFNZXJnZWFibGUsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXX0=