"use strict";
// tslint:disable:max-classes-per-file
// ^ because the mixin define multiple classes while maintaining scope to each
// tslint:disable:no-empty-interface
// ^ because the some mixins have nothing to add
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A base game that will only ever have two players in it, so they explicitly
 * know their singular opponent.
 *
 * @param base - The BaseGame (or sub BaseGame) to mix in two player logic.
 * @returns A new BaseGame class with TwoPlayer logic mixed in.
 */
// Because it will be a weird mixin type inferred from the return statement.
// tslint:disable-next-line:typedef
function mixTwoPlayer(base) {
    /** A game with only two players in it. (a very common game type) */
    class TwoPlayerGame extends base.Game {
        /**
         * Creates a new Two player game and hooks up the opponents.
         *
         * @param args - The arguments unknown to this constructor.
         */
        constructor(...args) {
            // any[] is required for mixin
            // constructor signature
            super(...args);
            this.players[0].opponent = this.players[1];
            this.players[1].opponent = this.players[0];
        }
    }
    /** The manager for two player games. */
    class TwoPlayerGameManager extends base.GameManager {
        /** Two player games require... 2 players. */
        static get requiredNumberOfPlayers() {
            return 2;
        }
    }
    return {
        ...base,
        Game: TwoPlayerGame,
        GameManager: TwoPlayerGameManager,
    };
}
exports.mixTwoPlayer = mixTwoPlayer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHdvLXBsYXllci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2dhbWUvbWl4aW5zL3R3by1wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNDQUFzQztBQUN0Qyw4RUFBOEU7QUFDOUUsb0NBQW9DO0FBQ3BDLGdEQUFnRDs7QUFXaEQ7Ozs7OztHQU1HO0FBQ0gsNEVBQTRFO0FBQzVFLG1DQUFtQztBQUNuQyxTQUFnQixZQUFZLENBTTFCLElBV0Q7SUFDRyxvRUFBb0U7SUFDcEUsTUFBTSxhQUFjLFNBQVEsSUFBSSxDQUFDLElBQUk7UUFJakM7Ozs7V0FJRztRQUNILFlBQVksR0FBRyxJQUFXO1lBQ0ksOEJBQThCO1lBQzlCLHdCQUF3QjtZQUNsRCxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztZQUVmLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxDQUFDO0tBQ0o7SUFFRCx3Q0FBd0M7SUFDeEMsTUFBTSxvQkFBcUIsU0FBUSxJQUFJLENBQUMsV0FBVztRQUMvQyw2Q0FBNkM7UUFDdEMsTUFBTSxLQUFLLHVCQUF1QjtZQUNyQyxPQUFPLENBQUMsQ0FBQztRQUNiLENBQUM7S0FDSjtJQUVELE9BQU87UUFDSCxHQUFHLElBQUk7UUFDUCxJQUFJLEVBQUUsYUFBYTtRQUNuQixXQUFXLEVBQUUsb0JBQW9CO0tBQ3BDLENBQUM7QUFDTixDQUFDO0FBbkRELG9DQW1EQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlXG4vLyBeIGJlY2F1c2UgdGhlIG1peGluIGRlZmluZSBtdWx0aXBsZSBjbGFzc2VzIHdoaWxlIG1haW50YWluaW5nIHNjb3BlIHRvIGVhY2hcbi8vIHRzbGludDpkaXNhYmxlOm5vLWVtcHR5LWludGVyZmFjZVxuLy8gXiBiZWNhdXNlIHRoZSBzb21lIG1peGlucyBoYXZlIG5vdGhpbmcgdG8gYWRkXG5cbmltcG9ydCB7IEJhc2VQbGF5ZXIgfSBmcm9tIFwifi9jb3JlL2dhbWVcIjtcbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuXG4vKiogQSBwbGF5ZXIgaW4gYSB0d28gcGxheWVyIGdhbWUsIHRoYXQgaGFzIGEgZ3VhcmFudGVlZCBvcHBvbmVudC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVR3b1BsYXllclBsYXllciBleHRlbmRzIEJhc2VQbGF5ZXIge1xuICAgIC8qKiBUaGUgb3Bwb25lbmV0IChvdGhlciBwbGF5ZXIpIG9mIHRoaXMgUGxheWVyLiBGb3IgaGFuZHkgbG9va3VwLiAqL1xuICAgIG9wcG9uZW50OiBJVHdvUGxheWVyUGxheWVyO1xufVxuXG4vKipcbiAqIEEgYmFzZSBnYW1lIHRoYXQgd2lsbCBvbmx5IGV2ZXIgaGF2ZSB0d28gcGxheWVycyBpbiBpdCwgc28gdGhleSBleHBsaWNpdGx5XG4gKiBrbm93IHRoZWlyIHNpbmd1bGFyIG9wcG9uZW50LlxuICpcbiAqIEBwYXJhbSBiYXNlIC0gVGhlIEJhc2VHYW1lIChvciBzdWIgQmFzZUdhbWUpIHRvIG1peCBpbiB0d28gcGxheWVyIGxvZ2ljLlxuICogQHJldHVybnMgQSBuZXcgQmFzZUdhbWUgY2xhc3Mgd2l0aCBUd29QbGF5ZXIgbG9naWMgbWl4ZWQgaW4uXG4gKi9cbi8vIEJlY2F1c2UgaXQgd2lsbCBiZSBhIHdlaXJkIG1peGluIHR5cGUgaW5mZXJyZWQgZnJvbSB0aGUgcmV0dXJuIHN0YXRlbWVudC5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0eXBlZGVmXG5leHBvcnQgZnVuY3Rpb24gbWl4VHdvUGxheWVyPFxuICAgIFRCYXNlQUkgZXh0ZW5kcyBCYXNlLkJhc2VBSUNvbnN0cnVjdG9yLFxuICAgIFRCYXNlR2FtZSBleHRlbmRzIEJhc2UuQmFzZUdhbWVDb25zdHJ1Y3RvcixcbiAgICBUQmFzZUdhbWVNYW5hZ2VyIGV4dGVuZHMgQmFzZS5CYXNlR2FtZU1hbmFnZXJDb25zdHJ1Y3RvcixcbiAgICBUQmFzZUdhbWVPYmplY3QgZXh0ZW5kcyBCYXNlLkJhc2VHYW1lT2JqZWN0Q29uc3RydWN0b3IsXG4gICAgVEJhc2VHYW1lU2V0dGluZ3MgZXh0ZW5kcyBCYXNlLkJhc2VHYW1lU2V0dGluZ3NNYW5hZ2VyQ29uc3RydWN0b3Jcbj4oYmFzZToge1xuICAgIC8qKiBUaGUgQUkgdG8gZXh0ZW5kLiAqL1xuICAgIEFJOiBUQmFzZUFJO1xuICAgIC8qKiBUaGUgR2FtZSB0byBleHRlbmQuICovXG4gICAgR2FtZTogVEJhc2VHYW1lO1xuICAgIC8qKiBUaGUgR2FtZU1hbmFnZXIgdG8gZXh0ZW5kLiAqL1xuICAgIEdhbWVNYW5hZ2VyOiBUQmFzZUdhbWVNYW5hZ2VyO1xuICAgIC8qKiBUaGUgR2FtZU9iamVjdCB0byBleHRlbmQuICovXG4gICAgR2FtZU9iamVjdDogVEJhc2VHYW1lT2JqZWN0O1xuICAgIC8qKiBUaGUgR2FtZVNldHRpbmdzIHRvIGV4dGVuZC4gKi9cbiAgICBHYW1lU2V0dGluZ3M6IFRCYXNlR2FtZVNldHRpbmdzO1xufSkge1xuICAgIC8qKiBBIGdhbWUgd2l0aCBvbmx5IHR3byBwbGF5ZXJzIGluIGl0LiAoYSB2ZXJ5IGNvbW1vbiBnYW1lIHR5cGUpICovXG4gICAgY2xhc3MgVHdvUGxheWVyR2FtZSBleHRlbmRzIGJhc2UuR2FtZSB7XG4gICAgICAgIC8qKiBUaGUgcGxheWVycyBpbiB0aGUgZ2FtZS4gKi9cbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHBsYXllcnMhOiBJVHdvUGxheWVyUGxheWVyW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgVHdvIHBsYXllciBnYW1lIGFuZCBob29rcyB1cCB0aGUgb3Bwb25lbnRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgdW5rbm93biB0byB0aGlzIGNvbnN0cnVjdG9yLlxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1hbnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55W10gaXMgcmVxdWlyZWQgZm9yIG1peGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0cnVjdG9yIHNpZ25hdHVyZVxuICAgICAgICAgICAgc3VwZXIoLi4uYXJncyk7XG5cbiAgICAgICAgICAgIHRoaXMucGxheWVyc1swXS5vcHBvbmVudCA9IHRoaXMucGxheWVyc1sxXTtcbiAgICAgICAgICAgIHRoaXMucGxheWVyc1sxXS5vcHBvbmVudCA9IHRoaXMucGxheWVyc1swXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKiBUaGUgbWFuYWdlciBmb3IgdHdvIHBsYXllciBnYW1lcy4gKi9cbiAgICBjbGFzcyBUd29QbGF5ZXJHYW1lTWFuYWdlciBleHRlbmRzIGJhc2UuR2FtZU1hbmFnZXIge1xuICAgICAgICAvKiogVHdvIHBsYXllciBnYW1lcyByZXF1aXJlLi4uIDIgcGxheWVycy4gKi9cbiAgICAgICAgcHVibGljIHN0YXRpYyBnZXQgcmVxdWlyZWROdW1iZXJPZlBsYXllcnMoKTogbnVtYmVyIHtcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uYmFzZSxcbiAgICAgICAgR2FtZTogVHdvUGxheWVyR2FtZSxcbiAgICAgICAgR2FtZU1hbmFnZXI6IFR3b1BsYXllckdhbWVNYW5hZ2VyLFxuICAgIH07XG59XG4iXX0=