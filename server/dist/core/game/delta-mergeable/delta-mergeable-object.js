"use strict";
// tslint:disable:no-any no-unsafe-any no-non-null-assertion
// ^ as DeltaMergeables are black magic anyways
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("~/utils");
const create_delta_mergeable_1 = require("./create-delta-mergeable");
const delta_mergeable_1 = require("./delta-mergeable");
/**
 * Creates a DeltaMergeable for an Object with a Proxy wrapper.
 * @param args - The creation args
 * @returns A new DeltaMergeable wrapping an Object.
 */
function createObject(args) {
    const deltaMergeables = {};
    const container = new delta_mergeable_1.DeltaMergeable({
        key: args.key,
        parent: args.parent,
        initialValue: args.initialValue || {},
        transform: args.transform || ((newObj, currentValue) => {
            const copyFrom = newObj || {};
            const keys = new Set(Object.keys(copyFrom || {}).concat(Object.keys(currentValue || {})));
            for (const key of keys) {
                if (!Object.prototype.hasOwnProperty.call(copyFrom, key)) {
                    if (Object.prototype.hasOwnProperty.call(currentValue, key)) {
                        delete currentValue[key];
                    }
                }
                else {
                    if (!Object.prototype.hasOwnProperty.call(currentValue, key)) {
                        currentValue[key] = copyFrom[key];
                    }
                }
            }
            return currentValue;
        }),
    });
    const proxyObject = new Proxy({}, {
        set(target, property, value) {
            const newKey = !Object.prototype.hasOwnProperty.call(deltaMergeables, property);
            if (newKey) {
                // then we need to create this new child we've never seen before
                let type;
                if (args.childTypes && utils_1.objectHasProperty(args.childTypes, property)) {
                    type = args.childTypes[property];
                }
                else if (args.childType) {
                    type = args.childType;
                }
                if (!type) {
                    throw new Error(`Cannot set property ${property} of ${target} because it is an unknown type`);
                }
                deltaMergeables[property] = create_delta_mergeable_1.createDeltaMergeable({
                    key: property,
                    type,
                    initialValue: value,
                    parent: container,
                });
            }
            if (!deltaMergeables[property].getParent() || deltaMergeables[property].get() !== value) {
                deltaMergeables[property].set(value, newKey);
            }
            return Reflect.set(target, property, deltaMergeables[property].get());
        },
        deleteProperty(target, property) {
            if (!Object.prototype.hasOwnProperty.call(deltaMergeables, property)) {
                return false;
            }
            deltaMergeables[property].delete();
            Reflect.deleteProperty(target, property);
            return true;
        },
    });
    container.wrapper = proxyObject;
    return container;
}
exports.createObject = createObject;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsdGEtbWVyZ2VhYmxlLW9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb3JlL2dhbWUvZGVsdGEtbWVyZ2VhYmxlL2RlbHRhLW1lcmdlYWJsZS1vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDREQUE0RDtBQUM1RCwrQ0FBK0M7O0FBRy9DLG1DQUFtRjtBQUNuRixxRUFBZ0U7QUFDaEUsdURBQW1FO0FBRW5FOzs7O0dBSUc7QUFDSCxTQUFnQixZQUFZLENBQUMsSUFnQjNCO0lBQ0UsTUFBTSxlQUFlLEdBQWdDLEVBQUUsQ0FBQztJQUN4RCxNQUFNLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQWdCO1FBQ2hELEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztRQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtRQUNuQixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFO1FBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxNQUFZLEVBQUUsWUFBNEIsRUFBaUIsRUFBRTtZQUN4RixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1lBRTlCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUYsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUN0RCxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLEVBQUU7d0JBQ3pELE9BQU8sWUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUM3QjtpQkFDSjtxQkFDSTtvQkFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsRUFBRTt3QkFDMUQsWUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDdEM7aUJBQ0o7YUFDSjtZQUVELE9BQU8sWUFBYSxDQUFDO1FBQ3pCLENBQUMsQ0FBQztLQUNMLENBQUMsQ0FBQztJQUVILE1BQU0sV0FBVyxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUM5QixHQUFHLENBQUMsTUFBcUIsRUFBRSxRQUFnQixFQUFFLEtBQVU7WUFDbkQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ2hGLElBQUksTUFBTSxFQUFFO2dCQUNSLGdFQUFnRTtnQkFFaEUsSUFBSSxJQUFrQyxDQUFDO2dCQUN2QyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUkseUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFBRTtvQkFDakUsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFxQixDQUFDO2lCQUN4RDtxQkFDSSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ3JCLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO2lCQUN6QjtnQkFFRCxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNQLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLFFBQVEsT0FBTyxNQUFNLGdDQUFnQyxDQUFDLENBQUM7aUJBQ2pHO2dCQUVELGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyw2Q0FBb0IsQ0FBQztvQkFDN0MsR0FBRyxFQUFFLFFBQVE7b0JBQ2IsSUFBSTtvQkFDSixZQUFZLEVBQUUsS0FBSztvQkFDbkIsTUFBTSxFQUFFLFNBQVM7aUJBQ3BCLENBQUMsQ0FBQzthQUNOO1lBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssS0FBSyxFQUFFO2dCQUN2RixlQUFlLENBQUMsUUFBUSxDQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQzthQUNqRDtZQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFDRCxjQUFjLENBQUMsTUFBcUIsRUFBRSxRQUFnQjtZQUNsRCxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsRUFBRTtnQkFDbEUsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFFRCxlQUFlLENBQUMsUUFBUSxDQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFcEMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFFekMsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUNKLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDO0lBRWhDLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUEzRkQsb0NBMkZDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6bm8tYW55IG5vLXVuc2FmZS1hbnkgbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4vLyBeIGFzIERlbHRhTWVyZ2VhYmxlcyBhcmUgYmxhY2sgbWFnaWMgYW55d2F5c1xuXG5pbXBvcnQgeyBJU2FuaXRpemFibGVUeXBlIH0gZnJvbSBcIn4vY29yZS9zYW5pdGl6ZS9zYW5pdGl6YWJsZS1pbnRlcmZhY2VzXCI7XG5pbXBvcnQgeyBJbW11dGFibGUsIG9iamVjdEhhc1Byb3BlcnR5LCBUeXBlZE9iamVjdCwgVW5rbm93bk9iamVjdCB9IGZyb20gXCJ+L3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVEZWx0YU1lcmdlYWJsZSB9IGZyb20gXCIuL2NyZWF0ZS1kZWx0YS1tZXJnZWFibGVcIjtcbmltcG9ydCB7IERlbHRhTWVyZ2VhYmxlLCBEZWx0YVRyYW5zZm9ybSB9IGZyb20gXCIuL2RlbHRhLW1lcmdlYWJsZVwiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBEZWx0YU1lcmdlYWJsZSBmb3IgYW4gT2JqZWN0IHdpdGggYSBQcm94eSB3cmFwcGVyLlxuICogQHBhcmFtIGFyZ3MgLSBUaGUgY3JlYXRpb24gYXJnc1xuICogQHJldHVybnMgQSBuZXcgRGVsdGFNZXJnZWFibGUgd3JhcHBpbmcgYW4gT2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KGFyZ3M6IFJlYWRvbmx5PHtcbiAgICAvKiogVGhlIGtleSBvZiB0aGlzIERlbHRhTWVyZ2VhYmxlIGluIGl0cyBwYXJlbnQgKi9cbiAgICBrZXk6IHN0cmluZztcbiAgICAvKiogVGhlIGluaXRpYWwgdmFsdWUgb2YgdGhpcyBvYmplY3QuIFVzZWQgdG8gZGVlcCBzZXQuICovXG4gICAgaW5pdGlhbFZhbHVlPzogYW55O1xuICAgIC8qKiBUaGUgcGFyZW50IG5vZGUuIElmIHVuZGVmaW5lZCBhc3N1bWVkIHRvIGJlIHRoZSByb290IG5vZGUuICovXG4gICAgcGFyZW50PzogRGVsdGFNZXJnZWFibGU7XG4gICAgLyoqIFRoZSB0eXBlIG9mIGFsbCBjaGlsZCB2YWx1ZXMgaW4gdGhpcyBvYmplY3QuICovXG4gICAgY2hpbGRUeXBlcz86IEltbXV0YWJsZTxUeXBlZE9iamVjdDxJU2FuaXRpemFibGVUeXBlPj47XG4gICAgLyoqIFRoZSBzaW5ndWxhciB0eXBlIG9mIGFsbCBjaGlsZHJlbiBpbiB0aGlzIG9iamVjdC4gKi9cbiAgICBjaGlsZFR5cGU/OiBJbW11dGFibGU8SVNhbml0aXphYmxlVHlwZT47XG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0byBhcHBseSBvbiBhbGwgc2V0cyB0byB0aGlzIG9iamVjdFxuICAgICAqIHNvIG5ldyBvYmplY3RzIGFyZSBub3QgY3JlYXRlZCB0byBtYWludGFpbiByZWZlcmVuY2VzXG4gICAgICovXG4gICAgdHJhbnNmb3JtPzogRGVsdGFUcmFuc2Zvcm08VW5rbm93bk9iamVjdD47XG59Pik6IERlbHRhTWVyZ2VhYmxlPFVua25vd25PYmplY3Q+IHtcbiAgICBjb25zdCBkZWx0YU1lcmdlYWJsZXM6IFR5cGVkT2JqZWN0PERlbHRhTWVyZ2VhYmxlPiA9IHt9O1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBEZWx0YU1lcmdlYWJsZTxVbmtub3duT2JqZWN0Pih7XG4gICAgICAgIGtleTogYXJncy5rZXksXG4gICAgICAgIHBhcmVudDogYXJncy5wYXJlbnQsXG4gICAgICAgIGluaXRpYWxWYWx1ZTogYXJncy5pbml0aWFsVmFsdWUgfHwge30sXG4gICAgICAgIHRyYW5zZm9ybTogYXJncy50cmFuc2Zvcm0gfHwgKChuZXdPYmo/OiBhbnksIGN1cnJlbnRWYWx1ZT86IFVua25vd25PYmplY3QpOiBVbmtub3duT2JqZWN0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvcHlGcm9tID0gbmV3T2JqIHx8IHt9O1xuXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gbmV3IFNldChPYmplY3Qua2V5cyhjb3B5RnJvbSB8fCB7fSkuY29uY2F0KE9iamVjdC5rZXlzKGN1cnJlbnRWYWx1ZSB8fCB7fSkpKTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb3B5RnJvbSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGN1cnJlbnRWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGN1cnJlbnRWYWx1ZSFba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY3VycmVudFZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUhW2tleV0gPSBjb3B5RnJvbVtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlITtcbiAgICAgICAgfSksIC8vIFRPRE86IG1ha2UgdHMgaGFwcHkgYWJvdXQgZ2VuZXJpYyBvYmplY3RcbiAgICB9KTtcblxuICAgIGNvbnN0IHByb3h5T2JqZWN0ID0gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgIHNldCh0YXJnZXQ6IFVua25vd25PYmplY3QsIHByb3BlcnR5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0tleSA9ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVsdGFNZXJnZWFibGVzLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICBpZiAobmV3S2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlbiB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGlzIG5ldyBjaGlsZCB3ZSd2ZSBuZXZlciBzZWVuIGJlZm9yZVxuXG4gICAgICAgICAgICAgICAgbGV0IHR5cGU6IElTYW5pdGl6YWJsZVR5cGUgfCB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MuY2hpbGRUeXBlcyAmJiBvYmplY3RIYXNQcm9wZXJ0eShhcmdzLmNoaWxkVHlwZXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gYXJncy5jaGlsZFR5cGVzW3Byb3BlcnR5XSBhcyBJU2FuaXRpemFibGVUeXBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChhcmdzLmNoaWxkVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gYXJncy5jaGlsZFR5cGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHNldCBwcm9wZXJ0eSAke3Byb3BlcnR5fSBvZiAke3RhcmdldH0gYmVjYXVzZSBpdCBpcyBhbiB1bmtub3duIHR5cGVgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWx0YU1lcmdlYWJsZXNbcHJvcGVydHldID0gY3JlYXRlRGVsdGFNZXJnZWFibGUoe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHByb3BlcnR5LFxuICAgICAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkZWx0YU1lcmdlYWJsZXNbcHJvcGVydHldIS5nZXRQYXJlbnQoKSB8fCBkZWx0YU1lcmdlYWJsZXNbcHJvcGVydHldIS5nZXQoKSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWx0YU1lcmdlYWJsZXNbcHJvcGVydHldIS5zZXQodmFsdWUsIG5ld0tleSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5LCBkZWx0YU1lcmdlYWJsZXNbcHJvcGVydHldIS5nZXQoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZVByb3BlcnR5KHRhcmdldDogVW5rbm93bk9iamVjdCwgcHJvcGVydHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGVsdGFNZXJnZWFibGVzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbHRhTWVyZ2VhYmxlc1twcm9wZXJ0eV0hLmRlbGV0ZSgpO1xuXG4gICAgICAgICAgICBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnRhaW5lci53cmFwcGVyID0gcHJveHlPYmplY3Q7XG5cbiAgICByZXR1cm4gY29udGFpbmVyO1xufVxuIl19