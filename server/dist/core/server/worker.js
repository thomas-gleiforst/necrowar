"use strict";
// This is the script that can be thought of as the 'main.js' for each worker
// thread that spins up a game session into an Instance using true
// multi-threading
Object.defineProperty(exports, "__esModule", { value: true });
const setup_thread_1 = require("../setup-thread");
setup_thread_1.setupThread(); // we have to do this before doing aliased imports below
const cluster_1 = require("cluster");
const Clients = require("~/core/clients");
const config_1 = require("~/core/config");
const logger_1 = require("~/core/logger");
const session_1 = require("./session");
if (cluster_1.isMaster) {
    /* tslint:disable-next-line:no-console */
    console.error("ERROR: worker running on master thread");
    process.exit(1); // worker threads not intended to run on main thread.
}
if (!config_1.Config.WORKER_DATA) {
    throw new Error("Configs WORKER_DATA not set, worker cannot work");
}
const workerData = config_1.Config.WORKER_DATA;
process.title = `${workerData.gameName} - ${workerData.sessionID}`;
// tslint:disable-next-line:no-var-requires non-literal-require - as we need it to be synchronous and dynamic
const required = require(`~/games/${workerData.gameName.toLowerCase()}/`);
if (!required.Namespace) {
    throw new Error("Error required game namespace not found!");
}
const gameNamespace = required.Namespace;
const clients = [];
process.on("message", (message, socket) => {
    if (typeof message !== "object" || !message || !message.type) {
        throw new Error(`Could not understand message from parent thread to worker: '${message}'`);
    }
    if (message.type === "client") {
        // then we've been sent a new client to connect
        if (!socket) {
            throw new Error("Sockets must be sent with client data!");
        }
        const info = message.clientInfo;
        const { className } = info;
        const baseClientClass = Clients[className];
        if (!baseClientClass) {
            throw new Error(`Session cannot handle client ${className}`);
        }
        // Disable Nagle
        socket.setNoDelay(true);
        const client = new baseClientClass(socket);
        clients.push(client);
        client.sendMetaDeltas = info.metaDeltas;
        client.isSpectating = info.spectating;
        client.setInfo(info);
    }
    else if (message.type === "done") {
        // we've been sent all the sockets for the clients,
        // so we are ready to start!
        const session = new session_1.Session({
            id: workerData.sessionID,
            clients,
            gameNamespace,
            gameSettingsManager: new gameNamespace.GameSettingsManager(workerData.gameSettings),
        });
        process.on("unhandledRejection", (reason, p) => {
            session.kill(`Unhandled promise: ${reason}`);
        });
        process.on("uncaughtException", (err) => {
            session.kill(`Uncaught exception thrown: ${err.message}`);
        });
        session.events.ended.once((data) => {
            const error = data instanceof Error
                ? data
                : undefined;
            const success = data instanceof Error
                ? undefined
                : data;
            if (error) {
                logger_1.logger.error(`Worker thread ending because of error: ${error}`);
            }
            if (!process.send) {
                throw new Error("Worker not on separate thread!");
            }
            process.send({ error, ...success }, () => {
                process.exit(error ? 1 : 0);
            });
        });
    }
    else {
        throw new Error("Unexpected message from main thread");
    }
});
//# sourceMappingURL=data:application/json;base64,