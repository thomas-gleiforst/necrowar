"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const base3 = mixins_1.mixTiled(base2);
const mixed = base3;
/** The base AI class for the Saloon game will mixin logic. */
class BaseSaloonAI extends mixed.AI {
}
/** The base Game class for the Saloon game will mixin logic. */
class BaseSaloonGame extends mixed.Game {
}
/** The base GameManager class for the Saloon game will mixin logic. */
class BaseSaloonGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Saloon game will mixin logic. */
class BaseSaloonGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Saloon game will mixin logic. */
class BaseSaloonGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseSaloonAI,
    Game: BaseSaloonGame,
    GameManager: BaseSaloonGameManager,
    GameObject: BaseSaloonGameObject,
    GameSettings: BaseSaloonGameSettings,
};
tslib_1.__exportStar(require("./bottle"), exports);
tslib_1.__exportStar(require("./cowboy"), exports);
tslib_1.__exportStar(require("./furnishing"), exports);
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./tile"), exports);
tslib_1.__exportStar(require("./young-gun"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const bottle_1 = require("./bottle");
const cowboy_1 = require("./cowboy");
const furnishing_1 = require("./furnishing");
const game_object_1 = require("./game-object");
const player_1 = require("./player");
const tile_1 = require("./tile");
const young_gun_1 = require("./young-gun");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Saloon game.
 */
class SaloonGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Bottle in the Game and tracks it for all players.
     *
     * @param args - Data about the Bottle to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Bottle hooked up in the game and ready for you to use.
     */
    bottle(args) {
        return this.createGameObject("Bottle", bottle_1.Bottle, args);
    }
    /**
     * Creates a new Cowboy in the Game and tracks it for all players.
     *
     * @param args - Data about the Cowboy to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Cowboy hooked up in the game and ready for you to use.
     */
    cowboy(args) {
        return this.createGameObject("Cowboy", cowboy_1.Cowboy, args);
    }
    /**
     * Creates a new Furnishing in the Game and tracks it for all players.
     *
     * @param args - Data about the Furnishing to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Furnishing hooked up in the game and ready for you to
     * use.
     */
    furnishing(args) {
        return this.createGameObject("Furnishing", furnishing_1.Furnishing, args);
    }
    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    tile(args) {
        return this.createGameObject("Tile", tile_1.Tile, args);
    }
    /**
     * Creates a new YoungGun in the Game and tracks it for all players.
     *
     * @param args - Data about the YoungGun to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new YoungGun hooked up in the game and ready for you to use.
     */
    youngGun(args) {
        return this.createGameObject("YoungGun", young_gun_1.YoungGun, args);
    }
}
exports.SaloonGameObjectFactory = SaloonGameObjectFactory;
/**
 * The shared namespace for Saloon that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.SaloonGame,
    GameManager: game_manager_1.SaloonGameManager,
    GameObjectFactory: SaloonGameObjectFactory,
    GameSettingsManager: game_settings_1.SaloonGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Saloon",
    gameSettingsManager: new game_settings_1.SaloonGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                bartenderCooldown: {
                    typeName: "int",
                },
                bottles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: bottle_1.Bottle,
                        nullable: false,
                    },
                },
                brawlerDamage: {
                    typeName: "int",
                },
                cowboys: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: cowboy_1.Cowboy,
                        nullable: false,
                    },
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                furnishings: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: furnishing_1.Furnishing,
                        nullable: false,
                    },
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                jobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxCowboysPerJob: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                rowdinessToSiesta: {
                    typeName: "int",
                },
                session: {
                    typeName: "string",
                },
                sharpshooterDamage: {
                    typeName: "int",
                },
                siestaLength: {
                    typeName: "int",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                turnsDrunk: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Bottle: {
            parentClassName: "GameObject",
            attributes: {
                direction: {
                    typeName: "string",
                    defaultValue: "North",
                    literals: ["North", "East", "South", "West"],
                },
                drunkDirection: {
                    typeName: "string",
                    defaultValue: "North",
                    literals: ["North", "East", "South", "West"],
                },
                isDestroyed: {
                    typeName: "boolean",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
            },
            functions: {},
        },
        Cowboy: {
            parentClassName: "GameObject",
            attributes: {
                canMove: {
                    typeName: "boolean",
                },
                drunkDirection: {
                    typeName: "string",
                    defaultValue: "",
                    literals: ["", "North", "East", "South", "West"],
                },
                focus: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                isDead: {
                    typeName: "boolean",
                },
                isDrunk: {
                    typeName: "boolean",
                },
                job: {
                    typeName: "string",
                    defaultValue: "Bartender",
                    literals: ["Bartender", "Brawler", "Sharpshooter"],
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tolerance: {
                    typeName: "int",
                },
                turnsBusy: {
                    typeName: "int",
                },
            },
            functions: {
                act: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "drunkDirection",
                            typeName: "string",
                            literals: ["", "North", "East", "South", "West"],
                            defaultValue: "",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                play: {
                    args: [
                        {
                            argName: "piano",
                            typeName: "gameObject",
                            gameObjectClass: furnishing_1.Furnishing,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Furnishing: {
            parentClassName: "GameObject",
            attributes: {
                health: {
                    typeName: "int",
                },
                isDestroyed: {
                    typeName: "boolean",
                },
                isPiano: {
                    typeName: "boolean",
                },
                isPlaying: {
                    typeName: "boolean",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                cowboys: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: cowboy_1.Cowboy,
                        nullable: false,
                    },
                },
                kills: {
                    typeName: "int",
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                rowdiness: {
                    typeName: "int",
                },
                score: {
                    typeName: "int",
                },
                siesta: {
                    typeName: "int",
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
                youngGun: {
                    typeName: "gameObject",
                    gameObjectClass: young_gun_1.YoungGun,
                    nullable: false,
                },
            },
            functions: {},
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                bottle: {
                    typeName: "gameObject",
                    gameObjectClass: bottle_1.Bottle,
                    nullable: true,
                },
                cowboy: {
                    typeName: "gameObject",
                    gameObjectClass: cowboy_1.Cowboy,
                    nullable: true,
                },
                furnishing: {
                    typeName: "gameObject",
                    gameObjectClass: furnishing_1.Furnishing,
                    nullable: true,
                },
                hasHazard: {
                    typeName: "boolean",
                },
                isBalcony: {
                    typeName: "boolean",
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
                youngGun: {
                    typeName: "gameObject",
                    gameObjectClass: young_gun_1.YoungGun,
                    nullable: true,
                },
            },
            functions: {},
        },
        YoungGun: {
            parentClassName: "GameObject",
            attributes: {
                callInTile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: false,
                },
                canCallIn: {
                    typeName: "boolean",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: false,
                },
            },
            functions: {
                callIn: {
                    args: [
                        {
                            argName: "job",
                            typeName: "string",
                            defaultValue: "Bartender",
                            literals: ["Bartender", "Brawler", "Sharpshooter"],
                        },
                    ],
                    invalidValue: undefined,
                    returns: {
                        typeName: "gameObject",
                        gameObjectClass: cowboy_1.Cowboy,
                        nullable: true,
                    },
                },
            },
        },
    },
    gameVersion: "fbaeac2bae9020bdd5a8816cb9ae38215c277e4bf7874a2f70c3995cd8eee8d3",
});
//# sourceMappingURL=data:application/json;base64,