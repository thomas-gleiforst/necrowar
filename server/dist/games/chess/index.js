"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const mixed = base1;
/** The base AI class for the Chess game will mixin logic. */
class BaseChessAI extends mixed.AI {
}
/** The base Game class for the Chess game will mixin logic. */
class BaseChessGame extends mixed.Game {
}
/** The base GameManager class for the Chess game will mixin logic. */
class BaseChessGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Chess game will mixin logic. */
class BaseChessGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Chess game will mixin logic. */
class BaseChessGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseChessAI,
    Game: BaseChessGame,
    GameManager: BaseChessGameManager,
    GameObject: BaseChessGameObject,
    GameSettings: BaseChessGameSettings,
};
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const game_object_1 = require("./game-object");
const player_1 = require("./player");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Chess game.
 */
class ChessGameObjectFactory extends game_1.BaseGameObjectFactory {
}
exports.ChessGameObjectFactory = ChessGameObjectFactory;
/**
 * The shared namespace for Chess that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.ChessGame,
    GameManager: game_manager_1.ChessGameManager,
    GameObjectFactory: ChessGameObjectFactory,
    GameSettingsManager: game_settings_1.ChessGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Chess",
    gameSettingsManager: new game_settings_1.ChessGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                makeMove: {
                    args: [],
                    returns: {
                        typeName: "string",
                    },
                },
            },
        },
        Game: {
            attributes: {
                fen: {
                    typeName: "string",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                history: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                session: {
                    typeName: "string",
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                color: {
                    typeName: "string",
                    defaultValue: "black",
                    literals: ["black", "white"],
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
    },
    gameVersion: "cfa5f5c1685087ce2899229c04c26e39f231e897ecc8fe036b44bc22103ef801",
});
//# sourceMappingURL=data:application/json;base64,