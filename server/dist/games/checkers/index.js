"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const mixed = base2;
/** The base AI class for the Checkers game will mixin logic. */
class BaseCheckersAI extends mixed.AI {
}
/** The base Game class for the Checkers game will mixin logic. */
class BaseCheckersGame extends mixed.Game {
}
/** The base GameManager class for the Checkers game will mixin logic. */
class BaseCheckersGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Checkers game will mixin logic. */
class BaseCheckersGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Checkers game will mixin logic. */
class BaseCheckersGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseCheckersAI,
    Game: BaseCheckersGame,
    GameManager: BaseCheckersGameManager,
    GameObject: BaseCheckersGameObject,
    GameSettings: BaseCheckersGameSettings,
};
tslib_1.__exportStar(require("./checker"), exports);
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const checker_1 = require("./checker");
const game_object_1 = require("./game-object");
const player_1 = require("./player");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Checkers game.
 */
class CheckersGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Checker in the Game and tracks it for all players.
     *
     * @param args - Data about the Checker to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Checker hooked up in the game and ready for you to use.
     */
    checker(args) {
        return this.createGameObject("Checker", checker_1.Checker, args);
    }
}
exports.CheckersGameObjectFactory = CheckersGameObjectFactory;
/**
 * The shared namespace for Checkers that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.CheckersGame,
    GameManager: game_manager_1.CheckersGameManager,
    GameObjectFactory: CheckersGameObjectFactory,
    GameSettingsManager: game_settings_1.CheckersGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Checkers",
    gameSettingsManager: new game_settings_1.CheckersGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                gotCaptured: {
                    args: [
                        {
                            argName: "checker",
                            typeName: "gameObject",
                            gameObjectClass: checker_1.Checker,
                            nullable: false,
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                boardHeight: {
                    typeName: "int",
                },
                boardWidth: {
                    typeName: "int",
                },
                checkerMoved: {
                    typeName: "gameObject",
                    gameObjectClass: checker_1.Checker,
                    nullable: true,
                },
                checkerMovedJumped: {
                    typeName: "boolean",
                },
                checkers: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: checker_1.Checker,
                        nullable: false,
                    },
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                maxTurns: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                session: {
                    typeName: "string",
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Checker: {
            parentClassName: "GameObject",
            attributes: {
                kinged: {
                    typeName: "boolean",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {
                isMine: {
                    args: [],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "x",
                            typeName: "int",
                        },
                        {
                            argName: "y",
                            typeName: "int",
                        },
                    ],
                    invalidValue: undefined,
                    returns: {
                        typeName: "gameObject",
                        gameObjectClass: checker_1.Checker,
                        nullable: true,
                    },
                },
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                checkers: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: checker_1.Checker,
                        nullable: false,
                    },
                },
                clientType: {
                    typeName: "string",
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
                yDirection: {
                    typeName: "int",
                },
            },
            functions: {},
        },
    },
    gameVersion: "49f1e5586cc4c62b6f74081e803d8edf9f54e8315f221c62c638f963cea8ab31",
});
//# sourceMappingURL=data:application/json;base64,