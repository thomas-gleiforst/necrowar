"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const base3 = mixins_1.mixTiled(base2);
const mixed = base3;
/** The base AI class for the Stumped game will mixin logic. */
class BaseStumpedAI extends mixed.AI {
}
/** The base Game class for the Stumped game will mixin logic. */
class BaseStumpedGame extends mixed.Game {
}
/** The base GameManager class for the Stumped game will mixin logic. */
class BaseStumpedGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Stumped game will mixin logic. */
class BaseStumpedGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Stumped game will mixin logic. */
class BaseStumpedGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseStumpedAI,
    Game: BaseStumpedGame,
    GameManager: BaseStumpedGameManager,
    GameObject: BaseStumpedGameObject,
    GameSettings: BaseStumpedGameSettings,
};
tslib_1.__exportStar(require("./beaver"), exports);
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./job"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./spawner"), exports);
tslib_1.__exportStar(require("./tile"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const beaver_1 = require("./beaver");
const game_object_1 = require("./game-object");
const job_1 = require("./job");
const player_1 = require("./player");
const spawner_1 = require("./spawner");
const tile_1 = require("./tile");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Stumped game.
 */
class StumpedGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Beaver in the Game and tracks it for all players.
     *
     * @param args - Data about the Beaver to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Beaver hooked up in the game and ready for you to use.
     */
    beaver(args) {
        return this.createGameObject("Beaver", beaver_1.Beaver, args);
    }
    /**
     * Creates a new Job in the Game and tracks it for all players.
     *
     * @param args - Data about the Job to set. Any keys matching a property in
     * the game object's class will be automatically set for you.
     * @returns A new Job hooked up in the game and ready for you to use.
     */
    job(args) {
        return this.createGameObject("Job", job_1.Job, args);
    }
    /**
     * Creates a new Spawner in the Game and tracks it for all players.
     *
     * @param args - Data about the Spawner to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Spawner hooked up in the game and ready for you to use.
     */
    spawner(args) {
        return this.createGameObject("Spawner", spawner_1.Spawner, args);
    }
    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    tile(args) {
        return this.createGameObject("Tile", tile_1.Tile, args);
    }
}
exports.StumpedGameObjectFactory = StumpedGameObjectFactory;
/**
 * The shared namespace for Stumped that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.StumpedGame,
    GameManager: game_manager_1.StumpedGameManager,
    GameObjectFactory: StumpedGameObjectFactory,
    GameSettingsManager: game_settings_1.StumpedGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Stumped",
    gameSettingsManager: new game_settings_1.StumpedGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                beavers: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: beaver_1.Beaver,
                        nullable: false,
                    },
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                freeBeaversCount: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                jobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: job_1.Job,
                        nullable: false,
                    },
                },
                lodgeCostConstant: {
                    typeName: "float",
                },
                lodgesToWin: {
                    typeName: "int",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                session: {
                    typeName: "string",
                },
                spawner: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: spawner_1.Spawner,
                        nullable: false,
                    },
                },
                spawnerHarvestConstant: {
                    typeName: "float",
                },
                spawnerTypes: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Beaver: {
            parentClassName: "GameObject",
            attributes: {
                actions: {
                    typeName: "int",
                },
                branches: {
                    typeName: "int",
                },
                food: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                job: {
                    typeName: "gameObject",
                    gameObjectClass: job_1.Job,
                    nullable: false,
                },
                moves: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                recruited: {
                    typeName: "boolean",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                turnsDistracted: {
                    typeName: "int",
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "beaver",
                            typeName: "gameObject",
                            gameObjectClass: beaver_1.Beaver,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                buildLodge: {
                    args: [],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                drop: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "resource",
                            typeName: "string",
                            defaultValue: "branches",
                            literals: ["branches", "food"],
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                harvest: {
                    args: [
                        {
                            argName: "spawner",
                            typeName: "gameObject",
                            gameObjectClass: spawner_1.Spawner,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                pickup: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "resource",
                            typeName: "string",
                            defaultValue: "branches",
                            literals: ["branches", "food"],
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Job: {
            parentClassName: "GameObject",
            attributes: {
                actions: {
                    typeName: "int",
                },
                carryLimit: {
                    typeName: "int",
                },
                chopping: {
                    typeName: "int",
                },
                cost: {
                    typeName: "int",
                },
                damage: {
                    typeName: "int",
                },
                distractionPower: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                munching: {
                    typeName: "int",
                },
                title: {
                    typeName: "string",
                },
            },
            functions: {
                recruit: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: undefined,
                    returns: {
                        typeName: "gameObject",
                        gameObjectClass: beaver_1.Beaver,
                        nullable: true,
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                beavers: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: beaver_1.Beaver,
                        nullable: false,
                    },
                },
                branchesToBuildLodge: {
                    typeName: "int",
                },
                clientType: {
                    typeName: "string",
                },
                lodges: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Spawner: {
            parentClassName: "GameObject",
            attributes: {
                hasBeenHarvested: {
                    typeName: "boolean",
                },
                health: {
                    typeName: "int",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: false,
                },
                type: {
                    typeName: "string",
                    defaultValue: "food",
                    literals: ["food", "branches"],
                },
            },
            functions: {},
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                beaver: {
                    typeName: "gameObject",
                    gameObjectClass: beaver_1.Beaver,
                    nullable: true,
                },
                branches: {
                    typeName: "int",
                },
                flowDirection: {
                    typeName: "string",
                    defaultValue: "North",
                    literals: ["North", "East", "South", "West", ""],
                },
                food: {
                    typeName: "int",
                },
                lodgeOwner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                spawner: {
                    typeName: "gameObject",
                    gameObjectClass: spawner_1.Spawner,
                    nullable: true,
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                type: {
                    typeName: "string",
                    defaultValue: "land",
                    literals: ["land", "water"],
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {},
        },
    },
    gameVersion: "7de307cae4a9a163a9b3600cb20c4b376b9f9cc42f1b990852878fea0127eed3",
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2FtZXMvc3R1bXBlZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMkJBQTJCO0FBQzNCLG9EQUFvRDtBQUNwRCw2RUFBNkU7QUFDN0UsOEVBQThFO0FBQzlFLGdEQUFnRDs7O0FBRWhELHNDQUFzQztBQUN0QyxpRUFBaUU7QUFFakUsb0JBQW9CO0FBQ3BCLHNDQUU0QztBQUU1QyxTQUFTO0FBQ1QsK0NBQ2dFO0FBZ0JoRSxNQUFNLEtBQUssR0FBRztJQUNWLEVBQUUsRUFBRSxhQUFNO0lBQ1YsSUFBSSxFQUFFLGVBQVE7SUFDZCxXQUFXLEVBQUUsc0JBQWU7SUFDNUIsVUFBVSxFQUFFLHFCQUFjO0lBQzFCLFlBQVksRUFBRSw4QkFBdUI7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sS0FBSyxHQUFHLHFCQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEMsTUFBTSxLQUFLLEdBQUcscUJBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxNQUFNLEtBQUssR0FBRyxpQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTlCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQztBQUVwQiwrREFBK0Q7QUFDL0QsTUFBTSxhQUFjLFNBQVEsS0FBSyxDQUFDLEVBQUU7Q0FBRztBQUV2QyxpRUFBaUU7QUFDakUsTUFBTSxlQUFnQixTQUFRLEtBQUssQ0FBQyxJQUFJO0NBQUc7QUFFM0Msd0VBQXdFO0FBQ3hFLE1BQU0sc0JBQXVCLFNBQVEsS0FBSyxDQUFDLFdBQVc7Q0FBRztBQUV6RCx1RUFBdUU7QUFDdkUsTUFBTSxxQkFBc0IsU0FBUSxLQUFLLENBQUMsVUFBVTtDQUFHO0FBRXZELHlFQUF5RTtBQUN6RSxNQUFNLHVCQUF3QixTQUFRLEtBQUssQ0FBQyxZQUFZO0NBQUc7QUFFM0QsdURBQXVEO0FBQzFDLFFBQUEsV0FBVyxHQUFHO0lBQ3ZCLEVBQUUsRUFBRSxh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UUFBUSxFQUFFLFlBQVk7b0JBQ3RCLGVBQWUsRUFBRSxXQUFJO29CQUNyQixRQUFRLEVBQUUsSUFBSTtpQkFDakI7Z0JBQ0QsUUFBUSxFQUFFO29CQUNOLFFBQVEsRUFBRSxZQUFZO29CQUN0QixlQUFlLEVBQUUsV0FBSTtvQkFDckIsUUFBUSxFQUFFLElBQUk7aUJBQ2pCO2dCQUNELElBQUksRUFBRTtvQkFDRixRQUFRLEVBQUUsUUFBUTtvQkFDbEIsWUFBWSxFQUFFLE1BQU07b0JBQ3BCLFFBQVEsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7aUJBQzlCO2dCQUNELENBQUMsRUFBRTtvQkFDQyxRQUFRLEVBQUUsS0FBSztpQkFDbEI7Z0JBQ0QsQ0FBQyxFQUFFO29CQUNDLFFBQVEsRUFBRSxLQUFLO2lCQUNsQjthQUNKO1lBQ0QsU0FBUyxFQUFFLEVBQ1Y7U0FDSjtLQUNKO0lBQ0QsV0FBVyxFQUFFLGtFQUFrRTtDQUNsRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXQVJOSU5HOiBIZXJlIGJlIERyYWdvbnNcbi8vIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgQ3JlZXIsIGRvIG5vdCBtb2RpZnkgaXRcbi8vIEl0IGJhc2ljYWxseSBzZXRzIHVwIGFsbCB0aGUgY2xhc3NlcywgaW50ZXJmYWNlcywgdHlwZXMsIGFuZCB3aGF0LW5vdCB0aGF0XG4vLyB3ZSBuZWVkIGZvciBUeXBlU2NyaXB0IHRvIGtub3cgdGhlIGJhc2UgY2xhc3Nlcywgd2hpbGUgYWxsb3dpbmcgZm9yIG1pbmltYWxcbi8vIGNvZGUgZm9yIGRldmVsb3BlcnMgdG8gYmUgZm9yY2VkIHRvIGZpbGwgb3V0LlxuXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtY2xhc3Nlcy1wZXItZmlsZVxuLy8gXiBiZWNhdXNlIHdlIG5lZWQgdG8gYnVpbGQgYSBidW5jaCBvZiBiYXNlIGNsYXNzIHdyYXBwZXJzIGhlcmVcblxuLy8gYmFzZSBnYW1lIGNsYXNzZXNcbmltcG9ydCB7IEJhc2VBSSwgQmFzZUdhbWUsIEJhc2VHYW1lTWFuYWdlciwgQmFzZUdhbWVPYmplY3QsXG4gICAgICAgICBCYXNlR2FtZU9iamVjdEZhY3RvcnksIEJhc2VHYW1lU2V0dGluZ3NNYW5hZ2VyLCBCYXNlUGxheWVyLFxuICAgICAgICAgbWFrZU5hbWVzcGFjZSB9IGZyb20gXCJ+L2NvcmUvZ2FtZVwiO1xuXG4vLyBtaXhpbnNcbmltcG9ydCB7IElUaWxlZFBsYXllciwgSVR1cm5CYXNlZFBsYXllciwgSVR3b1BsYXllclBsYXllciwgbWl4VGlsZWQsXG4gICAgICAgICBtaXhUdXJuQmFzZWQsIG1peFR3b1BsYXllciB9IGZyb20gXCJ+L2NvcmUvZ2FtZS9taXhpbnNcIjtcblxuLy8gZXh0cmFjdCBnYW1lIG9iamVjdCBjb25zdHJ1Y3RvciBhcmdzXG5pbXBvcnQgeyBGaXJzdEFyZ3VtZW50RnJvbUNvbnN0cnVjdG9yIH0gZnJvbSBcIn4vdXRpbHNcIjtcblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIHRoZSBQbGF5ZXIgZm9yIHRoZSBTdHVtcGVkIGdhbWVcbiAqIG11c3QgaW1wbGVtZW50IGZyb20gbWl4ZWQgaW4gZ2FtZSBsb2dpYy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmFzZVN0dW1wZWRQbGF5ZXIgZXh0ZW5kc1xuICAgIEJhc2VQbGF5ZXIsXG4gICAgSVR3b1BsYXllclBsYXllcixcbiAgICBJVHVybkJhc2VkUGxheWVyLFxuICAgIElUaWxlZFBsYXllciB7XG59XG5cbmNvbnN0IGJhc2UwID0ge1xuICAgIEFJOiBCYXNlQUksXG4gICAgR2FtZTogQmFzZUdhbWUsXG4gICAgR2FtZU1hbmFnZXI6IEJhc2VHYW1lTWFuYWdlcixcbiAgICBHYW1lT2JqZWN0OiBCYXNlR2FtZU9iamVjdCxcbiAgICBHYW1lU2V0dGluZ3M6IEJhc2VHYW1lU2V0dGluZ3NNYW5hZ2VyLFxufTtcblxuY29uc3QgYmFzZTEgPSBtaXhUd29QbGF5ZXIoYmFzZTApO1xuY29uc3QgYmFzZTIgPSBtaXhUdXJuQmFzZWQoYmFzZTEpO1xuY29uc3QgYmFzZTMgPSBtaXhUaWxlZChiYXNlMik7XG5cbmNvbnN0IG1peGVkID0gYmFzZTM7XG5cbi8qKiBUaGUgYmFzZSBBSSBjbGFzcyBmb3IgdGhlIFN0dW1wZWQgZ2FtZSB3aWxsIG1peGluIGxvZ2ljLiAqL1xuY2xhc3MgQmFzZVN0dW1wZWRBSSBleHRlbmRzIG1peGVkLkFJIHt9XG5cbi8qKiBUaGUgYmFzZSBHYW1lIGNsYXNzIGZvciB0aGUgU3R1bXBlZCBnYW1lIHdpbGwgbWl4aW4gbG9naWMuICovXG5jbGFzcyBCYXNlU3R1bXBlZEdhbWUgZXh0ZW5kcyBtaXhlZC5HYW1lIHt9XG5cbi8qKiBUaGUgYmFzZSBHYW1lTWFuYWdlciBjbGFzcyBmb3IgdGhlIFN0dW1wZWQgZ2FtZSB3aWxsIG1peGluIGxvZ2ljLiAqL1xuY2xhc3MgQmFzZVN0dW1wZWRHYW1lTWFuYWdlciBleHRlbmRzIG1peGVkLkdhbWVNYW5hZ2VyIHt9XG5cbi8qKiBUaGUgYmFzZSBHYW1lT2JqZWN0IGNsYXNzIGZvciB0aGUgU3R1bXBlZCBnYW1lIHdpbGwgbWl4aW4gbG9naWMuICovXG5jbGFzcyBCYXNlU3R1bXBlZEdhbWVPYmplY3QgZXh0ZW5kcyBtaXhlZC5HYW1lT2JqZWN0IHt9XG5cbi8qKiBUaGUgYmFzZSBHYW1lU2V0dGluZ3MgY2xhc3MgZm9yIHRoZSBTdHVtcGVkIGdhbWUgd2lsbCBtaXhpbiBsb2dpYy4gKi9cbmNsYXNzIEJhc2VTdHVtcGVkR2FtZVNldHRpbmdzIGV4dGVuZHMgbWl4ZWQuR2FtZVNldHRpbmdzIHt9XG5cbi8qKiBUaGUgQmFzZSBjbGFzc2VzIHRoYXQgZ2FtZSBjbGFzc2VzIGJ1aWxkIG9mZiBvZi4gKi9cbmV4cG9ydCBjb25zdCBCYXNlQ2xhc3NlcyA9IHtcbiAgICBBSTogQmFzZVN0dW1wZWRBSSxcbiAgICBHYW1lOiBCYXNlU3R1bXBlZEdhbWUsXG4gICAgR2FtZU1hbmFnZXI6IEJhc2VTdHVtcGVkR2FtZU1hbmFnZXIsXG4gICAgR2FtZU9iamVjdDogQmFzZVN0dW1wZWRHYW1lT2JqZWN0LFxuICAgIEdhbWVTZXR0aW5nczogQmFzZVN0dW1wZWRHYW1lU2V0dGluZ3MsXG59O1xuXG4vLyBOb3cgYWxsIHRoZSBiYXNlIGNsYXNzZXMgYXJlIGNyZWF0ZWQ7XG4vLyBzbyB3ZSBjYW4gc3RhcnQgaW1wb3J0aW5nL2V4cG9ydGluZyB0aGUgY2xhc3NlcyB0aGF0IG5lZWQgdGhlbS5cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gQmVhdmVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmVhdmVyUHJvcGVydGllcyB7XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBhY3Rpb25zIHJlbWFpbmluZyBmb3IgdGhlIEJlYXZlciB0aGlzIHR1cm4uXG4gICAgICovXG4gICAgYWN0aW9ucz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgYnJhbmNoZXMgdGhpcyBCZWF2ZXIgaXMgaG9sZGluZy5cbiAgICAgKi9cbiAgICBicmFuY2hlcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgZm9vZCB0aGlzIEJlYXZlciBpcyBob2xkaW5nLlxuICAgICAqL1xuICAgIGZvb2Q/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbXVjaCBoZWFsdGggdGhpcyBCZWF2ZXIgaGFzIGxlZnQuXG4gICAgICovXG4gICAgaGVhbHRoPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIEpvYiB0aGlzIEJlYXZlciB3YXMgcmVjcnVpdGVkIHRvIGRvLlxuICAgICAqL1xuICAgIGpvYj86IEpvYjtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IG1vdmVzIHRoaXMgQmVhdmVyIGhhcyBsZWZ0IHRoaXMgdHVybi5cbiAgICAgKi9cbiAgICBtb3Zlcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBQbGF5ZXIgdGhhdCBvd25zIGFuZCBjYW4gY29udHJvbCB0aGlzIEJlYXZlci5cbiAgICAgKi9cbiAgICBvd25lcj86IFBsYXllcjtcblxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgdGhlIEJlYXZlciBoYXMgZmluaXNoZWQgYmVpbmcgcmVjcnVpdGVkIGFuZCBjYW4gZG8gdGhpbmdzLCBGYWxzZVxuICAgICAqIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICByZWNydWl0ZWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdGhpcyBCZWF2ZXIgaXMgb24uXG4gICAgICovXG4gICAgdGlsZT86IFRpbGU7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgdHVybnMgdGhpcyBCZWF2ZXIgaXMgZGlzdHJhY3RlZCBmb3IgKDAgbWVhbnMgbm90IGRpc3RyYWN0ZWQpLlxuICAgICAqL1xuICAgIHR1cm5zRGlzdHJhY3RlZD86IG51bWJlcjtcblxufVxuXG4vKipcbiAqIEFyZ3VtZW50IG92ZXJyaWRlcyBmb3IgQmVhdmVyJ3MgYXR0YWNrIGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZlxuICogdGhpcyBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmVcbiAqIHVzZWQgaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmVhdmVyQXR0YWNrQXJncyB7XG4gICAgLyoqXG4gICAgICogVGhlIEJlYXZlciB0byBhdHRhY2suIE11c3QgYmUgb24gYW4gYWRqYWNlbnQgVGlsZS5cbiAgICAgKi9cbiAgICBiZWF2ZXI/OiBCZWF2ZXI7XG59XG5cbi8qKlxuICogQXJndW1lbnQgb3ZlcnJpZGVzIGZvciBCZWF2ZXIncyBidWlsZExvZGdlIGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdFxuICogb2YgdGhpcyBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGxcbiAqIGJlIHVzZWQgaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmVhdmVyQnVpbGRMb2RnZUFyZ3Mge1xufVxuXG4vKipcbiAqIEFyZ3VtZW50IG92ZXJyaWRlcyBmb3IgQmVhdmVyJ3MgZHJvcCBmdW5jdGlvbi4gSWYgeW91IHJldHVybiBhbiBvYmplY3Qgb2ZcbiAqIHRoaXMgaW50ZXJmYWNlIGZyb20gdGhlIGludmFsaWRhdGUgZnVuY3Rpb25zLCB0aGUgdmFsdWUocykgeW91IHNldCB3aWxsIGJlXG4gKiB1c2VkIGluIHRoZSBhY3R1YWwgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJlYXZlckRyb3BBcmdzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgVGlsZSB0byBkcm9wIGJyYW5jaGVzL2Zvb2Qgb24uIE11c3QgYmUgdGhlIHNhbWUgVGlsZSB0aGF0IHRoZSBCZWF2ZXJcbiAgICAgKiBpcyBvbiwgb3IgYW4gYWRqYWNlbnQgb25lLlxuICAgICAqL1xuICAgIHRpbGU/OiBUaWxlO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHJlc291cmNlIHRvIGRyb3AgKCdicmFuY2hlcycgb3IgJ2Zvb2QnKS5cbiAgICAgKi9cbiAgICByZXNvdXJjZT86IFwiYnJhbmNoZXNcIiB8IFwiZm9vZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgdGhlIHJlc291cmNlIHRvIGRyb3AsIG51bWJlcnMgPD0gMCB3aWxsIGRyb3AgYWxsIHRoZVxuICAgICAqIHJlc291cmNlIHR5cGUuXG4gICAgICovXG4gICAgYW1vdW50PzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEFyZ3VtZW50IG92ZXJyaWRlcyBmb3IgQmVhdmVyJ3MgaGFydmVzdCBmdW5jdGlvbi4gSWYgeW91IHJldHVybiBhbiBvYmplY3Qgb2ZcbiAqIHRoaXMgaW50ZXJmYWNlIGZyb20gdGhlIGludmFsaWRhdGUgZnVuY3Rpb25zLCB0aGUgdmFsdWUocykgeW91IHNldCB3aWxsIGJlXG4gKiB1c2VkIGluIHRoZSBhY3R1YWwgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJlYXZlckhhcnZlc3RBcmdzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgU3Bhd25lciB5b3Ugd2FudCB0byBoYXJ2ZXN0LiBNdXN0IGJlIG9uIGFuIGFkamFjZW50IFRpbGUuXG4gICAgICovXG4gICAgc3Bhd25lcj86IFNwYXduZXI7XG59XG5cbi8qKlxuICogQXJndW1lbnQgb3ZlcnJpZGVzIGZvciBCZWF2ZXIncyBtb3ZlIGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZlxuICogdGhpcyBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmVcbiAqIHVzZWQgaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmVhdmVyTW92ZUFyZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRoaXMgQmVhdmVyIHNob3VsZCBtb3ZlIHRvLlxuICAgICAqL1xuICAgIHRpbGU/OiBUaWxlO1xufVxuXG4vKipcbiAqIEFyZ3VtZW50IG92ZXJyaWRlcyBmb3IgQmVhdmVyJ3MgcGlja3VwIGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZlxuICogdGhpcyBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmVcbiAqIHVzZWQgaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQmVhdmVyUGlja3VwQXJncyB7XG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdG8gcGlja3VwIGJyYW5jaGVzL2Zvb2QgZnJvbS4gTXVzdCBiZSB0aGUgc2FtZSBUaWxlIHRoYXQgdGhlXG4gICAgICogQmVhdmVyIGlzIG9uLCBvciBhbiBhZGphY2VudCBvbmUuXG4gICAgICovXG4gICAgdGlsZT86IFRpbGU7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgcmVzb3VyY2UgdG8gcGlja3VwICgnYnJhbmNoZXMnIG9yICdmb29kJykuXG4gICAgICovXG4gICAgcmVzb3VyY2U/OiBcImJyYW5jaGVzXCIgfCBcImZvb2RcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIHRoZSByZXNvdXJjZSB0byBkcm9wLCBudW1iZXJzIDw9IDAgd2lsbCBwaWNrdXAgYWxsIG9mIHRoZVxuICAgICAqIHJlc291cmNlIHR5cGUuXG4gICAgICovXG4gICAgYW1vdW50PzogbnVtYmVyO1xufVxuXG4vKiogQWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIGZvciBhbiBHYW1lT2JqZWN0LiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR2FtZU9iamVjdFByb3BlcnRpZXMge1xufVxuXG4vKiogQWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIGZvciBhbiBKb2IuICovXG5leHBvcnQgaW50ZXJmYWNlIElKb2JQcm9wZXJ0aWVzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGFjdGlvbnMgdGhpcyBKb2IgY2FuIG1ha2UgcGVyIHR1cm4uXG4gICAgICovXG4gICAgYWN0aW9ucz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IGNvbWJpbmVkIHJlc291cmNlcyBhIGJlYXZlciB3aXRoIHRoaXMgSm9iIGNhbiBob2xkIGF0IG9uY2UuXG4gICAgICovXG4gICAgY2FycnlMaW1pdD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNjYWxhciBmb3IgaG93IG1hbnkgYnJhbmNoZXMgdGhpcyBKb2IgaGFydmVzdHMgYXQgb25jZS5cbiAgICAgKi9cbiAgICBjaG9wcGluZz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtdWNoIGZvb2QgdGhpcyBKb2IgY29zdHMgdG8gcmVjcnVpdC5cbiAgICAgKi9cbiAgICBjb3N0PzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBkYW1hZ2UgdGhpcyBKb2IgZG9lcyBwZXIgYXR0YWNrLlxuICAgICAqL1xuICAgIGRhbWFnZT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IHR1cm5zIGEgYmVhdmVyIGF0dGFja2VkIGJ5IHRoaXMgSm9iIGlzIGRpc3RyYWN0ZWQgYnkuXG4gICAgICovXG4gICAgZGlzdHJhY3Rpb25Qb3dlcj86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2Ygc3RhcnRpbmcgaGVhbHRoIHRoaXMgSm9iIGhhcy5cbiAgICAgKi9cbiAgICBoZWFsdGg/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG1vdmVzIHRoaXMgSm9iIGNhbiBtYWtlIHBlciB0dXJuLlxuICAgICAqL1xuICAgIG1vdmVzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2NhbGFyIGZvciBob3cgbXVjaCBmb29kIHRoaXMgSm9iIGhhcnZlc3RzIGF0IG9uY2UuXG4gICAgICovXG4gICAgbXVuY2hpbmc/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSm9iIHRpdGxlLlxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuXG59XG5cbi8qKlxuICogQXJndW1lbnQgb3ZlcnJpZGVzIGZvciBKb2IncyByZWNydWl0IGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZlxuICogdGhpcyBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmVcbiAqIHVzZWQgaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSm9iUmVjcnVpdEFyZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRoYXQgaXMgYSBsb2RnZSBvd25lZCBieSB5b3UgdGhhdCB5b3Ugd2lzaCB0byBzcGF3biB0aGUgQmVhdmVyXG4gICAgICogb2YgdGhpcyBKb2Igb24uXG4gICAgICovXG4gICAgdGlsZT86IFRpbGU7XG59XG5cbi8qKiBBbGwgdGhlIHBvc3NpYmxlIHByb3BlcnRpZXMgZm9yIGFuIFBsYXllci4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBsYXllclByb3BlcnRpZXMge1xuICAgIC8qKlxuICAgICAqIFRoZSBsaXN0IG9mIEJlYXZlcnMgb3duZWQgYnkgdGhpcyBQbGF5ZXIuXG4gICAgICovXG4gICAgYmVhdmVycz86IEJlYXZlcltdO1xuXG4gICAgLyoqXG4gICAgICogSG93IG1hbnkgYnJhbmNoZXMgYXJlIHJlcXVpcmVkIHRvIGJ1aWxkIGEgbG9kZ2UgZm9yIHRoaXMgUGxheWVyLlxuICAgICAqL1xuICAgIGJyYW5jaGVzVG9CdWlsZExvZGdlPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogV2hhdCB0eXBlIG9mIGNsaWVudCB0aGlzIGlzLCBlLmcuICdQeXRob24nLCAnSmF2YVNjcmlwdCcsIG9yIHNvbWUgb3RoZXJcbiAgICAgKiBsYW5ndWFnZS4gRm9yIHBvdGVudGlhbCBkYXRhIG1pbmluZyBwdXJwb3Nlcy5cbiAgICAgKi9cbiAgICBjbGllbnRUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIFRpbGVzIHRoYXQgY29udGFpbiBsb2RnZXMgb3duZWQgYnkgdGhpcyBwbGF5ZXIuXG4gICAgICovXG4gICAgbG9kZ2VzPzogVGlsZVtdO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHBsYXllciBsb3N0IHRoZSBnYW1lIG9yIG5vdC5cbiAgICAgKi9cbiAgICBsb3N0PzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBwbGF5ZXIuXG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoaXMgcGxheWVyJ3Mgb3Bwb25lbnQgaW4gdGhlIGdhbWUuXG4gICAgICovXG4gICAgb3Bwb25lbnQ/OiBQbGF5ZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcGxheWVyIGxvc3QgdGhlIGdhbWUuXG4gICAgICovXG4gICAgcmVhc29uTG9zdD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWFzb24gd2h5IHRoZSBwbGF5ZXIgd29uIHRoZSBnYW1lLlxuICAgICAqL1xuICAgIHJlYXNvbldvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSAoaW4gbnMpIHJlbWFpbmluZyBmb3IgdGhpcyBBSSB0byBzZW5kIGNvbW1hbmRzLlxuICAgICAqL1xuICAgIHRpbWVSZW1haW5pbmc/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcGxheWVyIHdvbiB0aGUgZ2FtZSBvciBub3QuXG4gICAgICovXG4gICAgd29uPzogYm9vbGVhbjtcblxufVxuXG4vKiogQWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIGZvciBhbiBTcGF3bmVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU3Bhd25lclByb3BlcnRpZXMge1xuICAgIC8qKlxuICAgICAqIFRydWUgaWYgdGhpcyBTcGF3bmVyIGhhcyBiZWVuIGhhcnZlc3RlZCB0aGlzIHR1cm4sIGFuZCBpdCB3aWxsIG5vdCBoZWFsXG4gICAgICogYXQgdGhlIGVuZCBvZiB0aGUgdHVybiwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGhhc0JlZW5IYXJ2ZXN0ZWQ/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogSG93IG11Y2ggaGVhbHRoIHRoaXMgU3Bhd25lciBoYXMsIHdoaWNoIGlzIHVzZWQgdG8gY2FsY3VsYXRlIGhvdyBtdWNoIG9mXG4gICAgICogaXRzIHJlc291cmNlIGNhbiBiZSBoYXJ2ZXN0ZWQuXG4gICAgICovXG4gICAgaGVhbHRoPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdGhpcyBTcGF3bmVyIGlzIG9uLlxuICAgICAqL1xuICAgIHRpbGU/OiBUaWxlO1xuXG4gICAgLyoqXG4gICAgICogV2hhdCB0eXBlIG9mIHJlc291cmNlIHRoaXMgaXMgKCdmb29kJyBvciAnYnJhbmNoZXMnKS5cbiAgICAgKi9cbiAgICB0eXBlPzogXCJmb29kXCIgfCBcImJyYW5jaGVzXCI7XG5cbn1cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gVGlsZS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbGVQcm9wZXJ0aWVzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgQmVhdmVyIG9uIHRoaXMgVGlsZSBpZiBwcmVzZW50LCBvdGhlcndpc2UgdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIGJlYXZlcj86IEJlYXZlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgYnJhbmNoZXMgZHJvcHBlZCBvbiB0aGlzIFRpbGUuXG4gICAgICovXG4gICAgYnJhbmNoZXM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY2FyZGluYWwgZGlyZWN0aW9uIHdhdGVyIGlzIGZsb3dpbmcgb24gdGhpcyBUaWxlICgnTm9ydGgnLCAnRWFzdCcsXG4gICAgICogJ1NvdXRoJywgJ1dlc3QnKS5cbiAgICAgKi9cbiAgICBmbG93RGlyZWN0aW9uPzogXCJOb3J0aFwiIHwgXCJFYXN0XCIgfCBcIlNvdXRoXCIgfCBcIldlc3RcIiB8IFwiXCI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGZvb2QgZHJvcHBlZCBvbiB0aGlzIFRpbGUuXG4gICAgICovXG4gICAgZm9vZD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvd25lciBvZiB0aGUgQmVhdmVyIGxvZGdlIG9uIHRoaXMgVGlsZSwgaWYgcHJlc2VudCwgb3RoZXJ3aXNlXG4gICAgICogdW5kZWZpbmVkLlxuICAgICAqL1xuICAgIGxvZGdlT3duZXI/OiBQbGF5ZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVzb3VyY2UgU3Bhd25lciBvbiB0aGlzIFRpbGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHVuZGVmaW5lZC5cbiAgICAgKi9cbiAgICBzcGF3bmVyPzogU3Bhd25lcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRvIHRoZSAnRWFzdCcgb2YgdGhpcyBvbmUgKHgrMSwgeSkuIFVuZGVmaW5lZCBpZiBvdXQgb2YgYm91bmRzXG4gICAgICogb2YgdGhlIG1hcC5cbiAgICAgKi9cbiAgICB0aWxlRWFzdD86IFRpbGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgVGlsZSB0byB0aGUgJ05vcnRoJyBvZiB0aGlzIG9uZSAoeCwgeS0xKS4gVW5kZWZpbmVkIGlmIG91dCBvZiBib3VuZHNcbiAgICAgKiBvZiB0aGUgbWFwLlxuICAgICAqL1xuICAgIHRpbGVOb3J0aD86IFRpbGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgVGlsZSB0byB0aGUgJ1NvdXRoJyBvZiB0aGlzIG9uZSAoeCwgeSsxKS4gVW5kZWZpbmVkIGlmIG91dCBvZiBib3VuZHNcbiAgICAgKiBvZiB0aGUgbWFwLlxuICAgICAqL1xuICAgIHRpbGVTb3V0aD86IFRpbGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgVGlsZSB0byB0aGUgJ1dlc3QnIG9mIHRoaXMgb25lICh4LTEsIHkpLiBVbmRlZmluZWQgaWYgb3V0IG9mIGJvdW5kc1xuICAgICAqIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgdGlsZVdlc3Q/OiBUaWxlO1xuXG4gICAgLyoqXG4gICAgICogV2hhdCB0eXBlIG9mIFRpbGUgdGhpcyBpcywgZWl0aGVyICd3YXRlcicgb3IgJ2xhbmQnLlxuICAgICAqL1xuICAgIHR5cGU/OiBcImxhbmRcIiB8IFwid2F0ZXJcIjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB4IChob3Jpem9udGFsKSBwb3NpdGlvbiBvZiB0aGlzIFRpbGUuXG4gICAgICovXG4gICAgeD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5ICh2ZXJ0aWNhbCkgcG9zaXRpb24gb2YgdGhpcyBUaWxlLlxuICAgICAqL1xuICAgIHk/OiBudW1iZXI7XG5cbn1cblxuZXhwb3J0ICogZnJvbSBcIi4vYmVhdmVyXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9nYW1lLW9iamVjdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vam9iXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wbGF5ZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3NwYXduZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RpbGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dhbWVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dhbWUtbWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWlcIjtcblxuaW1wb3J0IHsgQmVhdmVyIH0gZnJvbSBcIi4vYmVhdmVyXCI7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSBcIi4vZ2FtZS1vYmplY3RcIjtcbmltcG9ydCB7IEpvYiB9IGZyb20gXCIuL2pvYlwiO1xuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSBcIi4vcGxheWVyXCI7XG5pbXBvcnQgeyBTcGF3bmVyIH0gZnJvbSBcIi4vc3Bhd25lclwiO1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gXCIuL3RpbGVcIjtcblxuaW1wb3J0IHsgQUkgfSBmcm9tIFwiLi9haVwiO1xuaW1wb3J0IHsgU3R1bXBlZEdhbWUgfSBmcm9tIFwiLi9nYW1lXCI7XG5pbXBvcnQgeyBTdHVtcGVkR2FtZU1hbmFnZXIgfSBmcm9tIFwiLi9nYW1lLW1hbmFnZXJcIjtcbmltcG9ydCB7IFN0dW1wZWRHYW1lU2V0dGluZ3NNYW5hZ2VyIH0gZnJvbSBcIi4vZ2FtZS1zZXR0aW5nc1wiO1xuXG4vKiogVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGNvbnN0cnVjdCBhIEJlYXZlciAqL1xuZXhwb3J0IHR5cGUgQmVhdmVyQXJncyA9IEZpcnN0QXJndW1lbnRGcm9tQ29uc3RydWN0b3I8dHlwZW9mIEJlYXZlcj47XG5cbi8qKiBUaGUgYXJndW1lbnRzIHVzZWQgdG8gY29uc3RydWN0IGEgSm9iICovXG5leHBvcnQgdHlwZSBKb2JBcmdzID0gRmlyc3RBcmd1bWVudEZyb21Db25zdHJ1Y3Rvcjx0eXBlb2YgSm9iPjtcblxuLyoqIFRoZSBhcmd1bWVudHMgdXNlZCB0byBjb25zdHJ1Y3QgYSBTcGF3bmVyICovXG5leHBvcnQgdHlwZSBTcGF3bmVyQXJncyA9IEZpcnN0QXJndW1lbnRGcm9tQ29uc3RydWN0b3I8dHlwZW9mIFNwYXduZXI+O1xuXG4vKiogVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGNvbnN0cnVjdCBhIFRpbGUgKi9cbmV4cG9ydCB0eXBlIFRpbGVBcmdzID0gRmlyc3RBcmd1bWVudEZyb21Db25zdHJ1Y3Rvcjx0eXBlb2YgVGlsZT47XG5cbi8qKlxuICogVGhlIGZhY3RvcnkgdGhhdCAqKm11c3QqKiBiZSB1c2VkIHRvIGNyZWF0ZSBhbnkgZ2FtZSBvYmplY3RzIGluXG4gKiB0aGUgU3R1bXBlZCBnYW1lLlxuICovXG5leHBvcnQgY2xhc3MgU3R1bXBlZEdhbWVPYmplY3RGYWN0b3J5IGV4dGVuZHMgQmFzZUdhbWVPYmplY3RGYWN0b3J5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJlYXZlciBpbiB0aGUgR2FtZSBhbmQgdHJhY2tzIGl0IGZvciBhbGwgcGxheWVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gRGF0YSBhYm91dCB0aGUgQmVhdmVyIHRvIHNldC4gQW55IGtleXMgbWF0Y2hpbmcgYSBwcm9wZXJ0eVxuICAgICAqIGluIHRoZSBnYW1lIG9iamVjdCdzIGNsYXNzIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgZm9yIHlvdS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBCZWF2ZXIgaG9va2VkIHVwIGluIHRoZSBnYW1lIGFuZCByZWFkeSBmb3IgeW91IHRvIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgYmVhdmVyPFQgZXh0ZW5kcyBCZWF2ZXJBcmdzPihcbiAgICAgICAgYXJnczogUmVhZG9ubHk8VD4sXG4gICAgKTogQmVhdmVyICYgVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUdhbWVPYmplY3QoXCJCZWF2ZXJcIiwgQmVhdmVyLCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEpvYiBpbiB0aGUgR2FtZSBhbmQgdHJhY2tzIGl0IGZvciBhbGwgcGxheWVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gRGF0YSBhYm91dCB0aGUgSm9iIHRvIHNldC4gQW55IGtleXMgbWF0Y2hpbmcgYSBwcm9wZXJ0eSBpblxuICAgICAqIHRoZSBnYW1lIG9iamVjdCdzIGNsYXNzIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgZm9yIHlvdS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBKb2IgaG9va2VkIHVwIGluIHRoZSBnYW1lIGFuZCByZWFkeSBmb3IgeW91IHRvIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgam9iPFQgZXh0ZW5kcyBKb2JBcmdzPihcbiAgICAgICAgYXJnczogUmVhZG9ubHk8VD4sXG4gICAgKTogSm9iICYgVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUdhbWVPYmplY3QoXCJKb2JcIiwgSm9iLCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFNwYXduZXIgaW4gdGhlIEdhbWUgYW5kIHRyYWNrcyBpdCBmb3IgYWxsIHBsYXllcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIERhdGEgYWJvdXQgdGhlIFNwYXduZXIgdG8gc2V0LiBBbnkga2V5cyBtYXRjaGluZyBhXG4gICAgICogcHJvcGVydHkgaW4gdGhlIGdhbWUgb2JqZWN0J3MgY2xhc3Mgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHNldCBmb3IgeW91LlxuICAgICAqIEByZXR1cm5zIEEgbmV3IFNwYXduZXIgaG9va2VkIHVwIGluIHRoZSBnYW1lIGFuZCByZWFkeSBmb3IgeW91IHRvIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3Bhd25lcjxUIGV4dGVuZHMgU3Bhd25lckFyZ3M+KFxuICAgICAgICBhcmdzOiBSZWFkb25seTxUPixcbiAgICApOiBTcGF3bmVyICYgVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUdhbWVPYmplY3QoXCJTcGF3bmVyXCIsIFNwYXduZXIsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVGlsZSBpbiB0aGUgR2FtZSBhbmQgdHJhY2tzIGl0IGZvciBhbGwgcGxheWVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gRGF0YSBhYm91dCB0aGUgVGlsZSB0byBzZXQuIEFueSBrZXlzIG1hdGNoaW5nIGEgcHJvcGVydHlcbiAgICAgKiBpbiB0aGUgZ2FtZSBvYmplY3QncyBjbGFzcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0IGZvciB5b3UuXG4gICAgICogQHJldHVybnMgQSBuZXcgVGlsZSBob29rZWQgdXAgaW4gdGhlIGdhbWUgYW5kIHJlYWR5IGZvciB5b3UgdG8gdXNlLlxuICAgICAqL1xuICAgIHB1YmxpYyB0aWxlPFQgZXh0ZW5kcyBUaWxlQXJncz4oXG4gICAgICAgIGFyZ3M6IFJlYWRvbmx5PFQ+LFxuICAgICk6IFRpbGUgJiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR2FtZU9iamVjdChcIlRpbGVcIiwgVGlsZSwgYXJncyk7XG4gICAgfVxuXG59XG5cbi8qKlxuICogVGhlIHNoYXJlZCBuYW1lc3BhY2UgZm9yIFN0dW1wZWQgdGhhdCBpcyB1c2VkIHRvXG4gKiBpbml0aWFsaXplIGVhY2ggZ2FtZSBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGNvbnN0IE5hbWVzcGFjZSA9IG1ha2VOYW1lc3BhY2Uoe1xuICAgIEFJLFxuICAgIEdhbWU6IFN0dW1wZWRHYW1lLFxuICAgIEdhbWVNYW5hZ2VyOiBTdHVtcGVkR2FtZU1hbmFnZXIsXG4gICAgR2FtZU9iamVjdEZhY3Rvcnk6IFN0dW1wZWRHYW1lT2JqZWN0RmFjdG9yeSxcbiAgICBHYW1lU2V0dGluZ3NNYW5hZ2VyOiBTdHVtcGVkR2FtZVNldHRpbmdzTWFuYWdlcixcbiAgICBQbGF5ZXIsXG5cbiAgICAvLyBUaGVzZSBhcmUgZ2VuZXJhdGVkIG1ldGFkYXRhIHRoYXQgYWxsb3cgZGVsdGEtbWVyZ2luZyB2YWx1ZXMgZnJvbVxuICAgIC8vIGNsaWVudHMuXG4gICAgLy8gVGhleSBhcmUgbmV2ZXIgaW50ZW5kZWQgdG8gYmUgZGlyZWN0bHkgaW50ZXJmYWNlZCB3aXRoIG91dHNpZGUgb2YgdGhlXG4gICAgLy8gQ2VydmVhdSBjb3JlIGRldmVsb3BlcnMuXG4gICAgZ2FtZU5hbWU6IFwiU3R1bXBlZFwiLFxuICAgIGdhbWVTZXR0aW5nc01hbmFnZXI6IG5ldyBTdHVtcGVkR2FtZVNldHRpbmdzTWFuYWdlcigpLFxuICAgIGdhbWVPYmplY3RzU2NoZW1hOiB7XG4gICAgICAgIEFJOiB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgcnVuVHVybjoge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgR2FtZToge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGJlYXZlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwibGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogQmVhdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3VycmVudFBsYXllcjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogUGxheWVyLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjdXJyZW50VHVybjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZyZWVCZWF2ZXJzQ291bnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBnYW1lT2JqZWN0czoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJkaWN0aW9uYXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgIGtleVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogR2FtZU9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGpvYnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwibGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogSm9iLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbG9kZ2VDb3N0Q29uc3RhbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZmxvYXRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxvZGdlc1RvV2luOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFwSGVpZ2h0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFwV2lkdGg6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXhUdXJuczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwibGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogUGxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc2Vzc2lvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXduZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwibGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogU3Bhd25lcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXduZXJIYXJ2ZXN0Q29uc3RhbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZmxvYXRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXduZXJUeXBlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aWxlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGltZUFkZGVkUGVyVHVybjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgQmVhdmVyOiB7XG4gICAgICAgICAgICBwYXJlbnRDbGFzc05hbWU6IFwiR2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBicmFuY2hlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvb2Q6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFsdGg6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBqb2I6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IEpvYixcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbW92ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvd25lcjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogUGxheWVyLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWNydWl0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0dXJuc0Rpc3RyYWN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBhdHRhY2s6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWU6IFwiYmVhdmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogQmVhdmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkTG9kZ2U6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkcm9wOiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcInRpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJyZXNvdXJjZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogXCJicmFuY2hlc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBbXCJicmFuY2hlc1wiLCBcImZvb2RcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWU6IFwiYW1vdW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZFZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGFydmVzdDoge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJzcGF3bmVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogU3Bhd25lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3ZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcInRpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBpY2t1cDoge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJ0aWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWU6IFwicmVzb3VyY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFwiYnJhbmNoZXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXRlcmFsczogW1wiYnJhbmNoZXNcIiwgXCJmb29kXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcImFtb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgR2FtZU9iamVjdDoge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGdhbWVPYmplY3ROYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb2dzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgICAgIGxvZzoge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJ2b2lkXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIEpvYjoge1xuICAgICAgICAgICAgcGFyZW50Q2xhc3NOYW1lOiBcIkdhbWVPYmplY3RcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY2FycnlMaW1pdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNob3BwaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29zdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhbWFnZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpc3RyYWN0aW9uUG93ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFsdGg6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3Zlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG11bmNoaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbnM6IHtcbiAgICAgICAgICAgICAgICByZWNydWl0OiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcInRpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IEJlYXZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBQbGF5ZXI6IHtcbiAgICAgICAgICAgIHBhcmVudENsYXNzTmFtZTogXCJHYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgYmVhdmVyczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBCZWF2ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBicmFuY2hlc1RvQnVpbGRMb2RnZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNsaWVudFR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb2RnZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwibGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxvc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wcG9uZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBQbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYXNvbkxvc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWFzb25Xb246IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aW1lUmVtYWluaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB3b246IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb25zOiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBTcGF3bmVyOiB7XG4gICAgICAgICAgICBwYXJlbnRDbGFzc05hbWU6IFwiR2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGhhc0JlZW5IYXJ2ZXN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhbHRoOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBcImZvb2RcIixcbiAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHM6IFtcImZvb2RcIiwgXCJicmFuY2hlc1wiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgVGlsZToge1xuICAgICAgICAgICAgcGFyZW50Q2xhc3NOYW1lOiBcIkdhbWVPYmplY3RcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBiZWF2ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IEJlYXZlcixcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBicmFuY2hlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZsb3dEaXJlY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogXCJOb3J0aFwiLFxuICAgICAgICAgICAgICAgICAgICBsaXRlcmFsczogW1wiTm9ydGhcIiwgXCJFYXN0XCIsIFwiU291dGhcIiwgXCJXZXN0XCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZm9vZDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxvZGdlT3duZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzcGF3bmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBTcGF3bmVyLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbGVFYXN0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbGVOb3J0aDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aWxlU291dGg6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZVdlc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdHlwZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBcImxhbmRcIixcbiAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHM6IFtcImxhbmRcIiwgXCJ3YXRlclwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb25zOiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgZ2FtZVZlcnNpb246IFwiN2RlMzA3Y2FlNGE5YTE2M2E5YjM2MDBjYjIwYzRiMzc2YjlmOWNjNDJmMWI5OTA4NTI4NzhmZWEwMTI3ZWVkM1wiLFxufSk7XG4iXX0=