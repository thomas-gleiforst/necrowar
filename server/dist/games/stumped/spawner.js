"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_object_1 = require("./game-object");
/**
 * A resource spawner that generates branches or food.
 */
class Spawner extends game_object_1.GameObject {
    // <<-- /Creer-Merge: attributes -->>
    /**
     * Called when a Spawner is created.
     *
     * @param args - Initial value(s) to set member variables to.
     * @param required - Data required to initialize this (ignore it).
     */
    constructor(args, required) {
        super(args, required);
        // <<-- Creer-Merge: attributes -->>
        /** The cooldown on being harvested */
        this.harvestCooldown = 0;
        // <<-- Creer-Merge: constructor -->>
        this.health = 1;
        this.tile = args.tile;
        this.tile.spawner = this;
        this.game.spawner.push(this);
        // <<-- /Creer-Merge: constructor -->>
    }
}
exports.Spawner = Spawner;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bhd25lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9nYW1lcy9zdHVtcGVkL3NwYXduZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwrQ0FBMkM7QUFZM0M7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSx3QkFBVTtJQTRCbkMscUNBQXFDO0lBRXJDOzs7OztPQUtHO0lBQ0gsWUFDSSxJQU9FLEVBQ0YsUUFBK0M7UUFFL0MsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQXhCMUIsb0NBQW9DO1FBRXBDLHNDQUFzQztRQUMvQixvQkFBZSxHQUFHLENBQUMsQ0FBQztRQXVCdkIscUNBQXFDO1FBQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdCLHNDQUFzQztJQUMxQyxDQUFDO0NBZUo7QUF2RUQsMEJBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUJhc2VHYW1lT2JqZWN0UmVxdWlyZWREYXRhIH0gZnJvbSBcIn4vY29yZS9nYW1lXCI7XG5pbXBvcnQgeyBJU3Bhd25lclByb3BlcnRpZXMgfSBmcm9tIFwiLi9cIjtcbmltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tIFwiLi9nYW1lLW9iamVjdFwiO1xuaW1wb3J0IHsgVGlsZSB9IGZyb20gXCIuL3RpbGVcIjtcblxuLy8gPDwtLSBDcmVlci1NZXJnZTogaW1wb3J0cyAtLT4+XG4vLyBhbnkgYWRkaXRpb25hbCBpbXBvcnRzIHlvdSB3YW50IGNhbiBiZSBwbGFjZWQgaGVyZSBzYWZlbHkgYmV0d2VlbiBjcmVlciBydW5zXG4vLyA8PC0tIC9DcmVlci1NZXJnZTogaW1wb3J0cyAtLT4+XG5cbi8qKlxuICogV2hhdCB0eXBlIG9mIHJlc291cmNlIHRoaXMgaXMgKCdmb29kJyBvciAnYnJhbmNoZXMnKS5cbiAqL1xuZXhwb3J0IHR5cGUgU3Bhd25lclR5cGUgPSBcImZvb2RcIiB8IFwiYnJhbmNoZXNcIjtcblxuLyoqXG4gKiBBIHJlc291cmNlIHNwYXduZXIgdGhhdCBnZW5lcmF0ZXMgYnJhbmNoZXMgb3IgZm9vZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNwYXduZXIgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoaXMgU3Bhd25lciBoYXMgYmVlbiBoYXJ2ZXN0ZWQgdGhpcyB0dXJuLCBhbmQgaXQgd2lsbCBub3QgaGVhbFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIHR1cm4sIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzQmVlbkhhcnZlc3RlZCE6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbXVjaCBoZWFsdGggdGhpcyBTcGF3bmVyIGhhcywgd2hpY2ggaXMgdXNlZCB0byBjYWxjdWxhdGUgaG93IG11Y2ggb2ZcbiAgICAgKiBpdHMgcmVzb3VyY2UgY2FuIGJlIGhhcnZlc3RlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGVhbHRoITogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdGhpcyBTcGF3bmVyIGlzIG9uLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSB0aWxlOiBUaWxlO1xuXG4gICAgLyoqXG4gICAgICogV2hhdCB0eXBlIG9mIHJlc291cmNlIHRoaXMgaXMgKCdmb29kJyBvciAnYnJhbmNoZXMnKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgdHlwZSE6IFwiZm9vZFwiIHwgXCJicmFuY2hlc1wiO1xuXG4gICAgLy8gPDwtLSBDcmVlci1NZXJnZTogYXR0cmlidXRlcyAtLT4+XG5cbiAgICAvKiogVGhlIGNvb2xkb3duIG9uIGJlaW5nIGhhcnZlc3RlZCAqL1xuICAgIHB1YmxpYyBoYXJ2ZXN0Q29vbGRvd24gPSAwO1xuXG4gICAgLy8gPDwtLSAvQ3JlZXItTWVyZ2U6IGF0dHJpYnV0ZXMgLS0+PlxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gYSBTcGF3bmVyIGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIEluaXRpYWwgdmFsdWUocykgdG8gc2V0IG1lbWJlciB2YXJpYWJsZXMgdG8uXG4gICAgICogQHBhcmFtIHJlcXVpcmVkIC0gRGF0YSByZXF1aXJlZCB0byBpbml0aWFsaXplIHRoaXMgKGlnbm9yZSBpdCkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFyZ3M6IFJlYWRvbmx5PElTcGF3bmVyUHJvcGVydGllcyAmIHtcbiAgICAgICAgICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IGNvbnN0cnVjdG9yLWFyZ3MgLS0+PlxuICAgICAgICAgICAgLyoqIFRoZSBUaWxlIHRvIHBsYWNlIHRoaXMgU3Bhd25lciB1cG9uLiAqL1xuICAgICAgICAgICAgdGlsZTogVGlsZTtcbiAgICAgICAgICAgIC8qKiBUaGUgdHlwZSBvZiByZXNvdXJjZSB0aGlzIFNwYXduZXIgcHJvZHVjZXMuICovXG4gICAgICAgICAgICB0eXBlOiBcImJyYW5jaGVzXCIgfCBcImZvb2RcIjtcbiAgICAgICAgICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBjb25zdHJ1Y3Rvci1hcmdzIC0tPj5cbiAgICAgICAgfT4sXG4gICAgICAgIHJlcXVpcmVkOiBSZWFkb25seTxJQmFzZUdhbWVPYmplY3RSZXF1aXJlZERhdGE+LFxuICAgICkge1xuICAgICAgICBzdXBlcihhcmdzLCByZXF1aXJlZCk7XG5cbiAgICAgICAgLy8gPDwtLSBDcmVlci1NZXJnZTogY29uc3RydWN0b3IgLS0+PlxuICAgICAgICB0aGlzLmhlYWx0aCA9IDE7XG4gICAgICAgIHRoaXMudGlsZSA9IGFyZ3MudGlsZTtcbiAgICAgICAgdGhpcy50aWxlLnNwYXduZXIgPSB0aGlzO1xuICAgICAgICB0aGlzLmdhbWUuc3Bhd25lci5wdXNoKHRoaXMpO1xuXG4gICAgICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBjb25zdHJ1Y3RvciAtLT4+XG4gICAgfVxuXG4gICAgLy8gPDwtLSBDcmVlci1NZXJnZTogcHVibGljLWZ1bmN0aW9ucyAtLT4+XG5cbiAgICAvLyBBbnkgcHVibGljIGZ1bmN0aW9ucyBjYW4gZ28gaGVyZSBmb3Igb3RoZXIgdGhpbmdzIGluIHRoZSBnYW1lIHRvIHVzZS5cbiAgICAvLyBOT1RFOiBDbGllbnQgQUlzIGNhbm5vdCBjYWxsIHRoZXNlIGZ1bmN0aW9ucywgdGhvc2UgbXVzdCBiZSBkZWZpbmVkXG4gICAgLy8gaW4gdGhlIGNyZWVyIGZpbGUuXG5cbiAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogcHVibGljLWZ1bmN0aW9ucyAtLT4+XG5cbiAgICAvLyA8PC0tIENyZWVyLU1lcmdlOiBwcm90ZWN0ZWQtcHJpdmF0ZS1mdW5jdGlvbnMgLS0+PlxuXG4gICAgLy8gQW55IGFkZGl0aW9uYWwgcHJvdGVjdGVkIG9yIHBpcmF0ZSBtZXRob2RzIGNhbiBnbyBoZXJlLlxuXG4gICAgLy8gPDwtLSAvQ3JlZXItTWVyZ2U6IHByb3RlY3RlZC1wcml2YXRlLWZ1bmN0aW9ucyAtLT4+XG59XG4iXX0=