"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_object_1 = require("./game-object");
// <<-- Creer-Merge: imports -->>
// any additional imports you want can be placed here safely between creer runs
// <<-- /Creer-Merge: imports -->>
/**
 * A basic building. It does nothing besides burn down. Other Buildings inherit
 * from this class.
 */
class Building extends game_object_1.GameObject {
    // <<-- Creer-Merge: attributes -->>
    // Any additional member attributes can go here
    // NOTE: They will not be sent to the AIs, those must be defined
    // in the creer file.
    // <<-- /Creer-Merge: attributes -->>
    /**
     * Called when a Building is created.
     *
     * @param args - Initial value(s) to set member variables to.
     * @param required - Data required to initialize this (ignore it).
     */
    constructor(args, required) {
        super(args, required);
        // <<-- Creer-Merge: constructor -->>
        this.owner = args.owner;
        this.health = this.game.settings.buildingStartingHealth;
        // <<-- /Creer-Merge: constructor -->>
    }
    // <<-- Creer-Merge: public-functions -->>
    /**
     * Gets the neighbor in a direction of the building.
     * @param direction The direction to get at
     * @returns The building in that direction, if there is one.
     */
    getNeighbor(direction) {
        switch (direction.toLowerCase()) {
            case "north":
                return this.buildingNorth;
            case "east":
                return this.buildingEast;
            case "south":
                return this.buildingSouth;
            case "west":
                return this.buildingWest;
        }
    }
    // <<-- /Creer-Merge: public-functions -->>
    // <<-- Creer-Merge: protected-private-functions -->>
    /**
     * Tries to find a reason why the bribe (action) is invalid
     *
     * @param player - the player trying to bribe this building
     * @returns a game logic error is returned if the bribe is NOT valid, undefined otherwise
     */
    invalidateBribe(player) {
        if (player !== this.owner) {
            return `${this} is not owned by ${player} and cannot be bribed.`;
        }
        if (player.bribesRemaining <= 0) {
            return `${player} has no bribes left to bribe ${this} with.`;
        }
        if (this.health <= 0) {
            return `${this} has been burned down and cannot be bribed.`;
        }
        if (this.bribed) {
            return `${this} has already been bribed this turn and cannot be bribed again.`;
        }
    }
}
exports.Building = Building;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2FtZXMvYW5hcmNoeS9idWlsZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtDQUEyQztBQUczQyxpQ0FBaUM7QUFDakMsK0VBQStFO0FBQy9FLGtDQUFrQztBQUVsQzs7O0dBR0c7QUFDSCxNQUFhLFFBQVMsU0FBUSx3QkFBVTtJQWlFcEMsb0NBQW9DO0lBRXBDLCtDQUErQztJQUMvQyxnRUFBZ0U7SUFDaEUscUJBQXFCO0lBRXJCLHFDQUFxQztJQUVyQzs7Ozs7T0FLRztJQUNILFlBQ0ksSUFTRSxFQUNGLFFBQStDO1FBRS9DLEtBQUssQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFdEIscUNBQXFDO1FBRXJDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixDQUFDO1FBRXhELHNDQUFzQztJQUMxQyxDQUFDO0lBRUQsMENBQTBDO0lBRTFDOzs7O09BSUc7SUFDSSxXQUFXLENBQUMsU0FBaUI7UUFDaEMsUUFBUSxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDN0IsS0FBSyxPQUFPO2dCQUNSLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztZQUM5QixLQUFLLE1BQU07Z0JBQ1AsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1lBQzdCLEtBQUssT0FBTztnQkFDUixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7WUFDOUIsS0FBSyxNQUFNO2dCQUNQLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRCwyQ0FBMkM7SUFFM0MscURBQXFEO0lBRXJEOzs7OztPQUtHO0lBQ08sZUFBZSxDQUFDLE1BQWM7UUFDcEMsSUFBSSxNQUFNLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN2QixPQUFPLEdBQUcsSUFBSSxvQkFBb0IsTUFBTSx3QkFBd0IsQ0FBQztTQUNwRTtRQUVELElBQUksTUFBTSxDQUFDLGVBQWUsSUFBSSxDQUFDLEVBQUU7WUFDN0IsT0FBTyxHQUFHLE1BQU0sZ0NBQWdDLElBQUksUUFBUSxDQUFDO1NBQ2hFO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNsQixPQUFPLEdBQUcsSUFBSSw2Q0FBNkMsQ0FBQztTQUMvRDtRQUVELElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLE9BQU8sR0FBRyxJQUFJLGdFQUFnRSxDQUFDO1NBQ2xGO0lBQ0wsQ0FBQztDQUdKO0FBdkpELDRCQXVKQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCYXNlR2FtZU9iamVjdFJlcXVpcmVkRGF0YSB9IGZyb20gXCJ+L2NvcmUvZ2FtZVwiO1xuaW1wb3J0IHsgSUJ1aWxkaW5nUHJvcGVydGllcyB9IGZyb20gXCIuL1wiO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuL2dhbWUtb2JqZWN0XCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcblxuLy8gPDwtLSBDcmVlci1NZXJnZTogaW1wb3J0cyAtLT4+XG4vLyBhbnkgYWRkaXRpb25hbCBpbXBvcnRzIHlvdSB3YW50IGNhbiBiZSBwbGFjZWQgaGVyZSBzYWZlbHkgYmV0d2VlbiBjcmVlciBydW5zXG4vLyA8PC0tIC9DcmVlci1NZXJnZTogaW1wb3J0cyAtLT4+XG5cbi8qKlxuICogQSBiYXNpYyBidWlsZGluZy4gSXQgZG9lcyBub3RoaW5nIGJlc2lkZXMgYnVybiBkb3duLiBPdGhlciBCdWlsZGluZ3MgaW5oZXJpdFxuICogZnJvbSB0aGlzIGNsYXNzLlxuICovXG5leHBvcnQgY2xhc3MgQnVpbGRpbmcgZXh0ZW5kcyBHYW1lT2JqZWN0IHtcbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUgdGhpcyBidWlsZGluZyBoYXMgYWxyZWFkeSBiZWVuIGJyaWJlZCB0aGlzIHR1cm4gYW5kIGNhbm5vdCBiZVxuICAgICAqIGJyaWJlZCBhZ2FpbiB0aGlzIHR1cm4uXG4gICAgICovXG4gICAgcHVibGljIGJyaWJlZCE6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgQnVpbGRpbmcgZGlyZWN0bHkgdG8gdGhlIGVhc3Qgb2YgdGhpcyBidWlsZGluZywgb3IgdW5kZWZpbmVkIGlmIG5vdFxuICAgICAqIHByZXNlbnQuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGJ1aWxkaW5nRWFzdD86IEJ1aWxkaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIEJ1aWxkaW5nIGRpcmVjdGx5IHRvIHRoZSBub3J0aCBvZiB0aGlzIGJ1aWxkaW5nLCBvciB1bmRlZmluZWQgaWYgbm90XG4gICAgICogcHJlc2VudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRpbmdOb3J0aD86IEJ1aWxkaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIEJ1aWxkaW5nIGRpcmVjdGx5IHRvIHRoZSBzb3V0aCBvZiB0aGlzIGJ1aWxkaW5nLCBvciB1bmRlZmluZWQgaWYgbm90XG4gICAgICogcHJlc2VudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYnVpbGRpbmdTb3V0aD86IEJ1aWxkaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIEJ1aWxkaW5nIGRpcmVjdGx5IHRvIHRoZSB3ZXN0IG9mIHRoaXMgYnVpbGRpbmcsIG9yIHVuZGVmaW5lZCBpZiBub3RcbiAgICAgKiBwcmVzZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBidWlsZGluZ1dlc3Q/OiBCdWlsZGluZztcblxuICAgIC8qKlxuICAgICAqIEhvdyBtdWNoIGZpcmUgaXMgY3VycmVudGx5IGJ1cm5pbmcgdGhlIGJ1aWxkaW5nLCBhbmQgdGh1cyBob3cgbXVjaFxuICAgICAqIGRhbWFnZSBpdCB3aWxsIHRha2UgYXQgdGhlIGVuZCBvZiBpdHMgb3duZXIncyB0dXJuLiAwIG1lYW5zIG5vIGZpcmUuXG4gICAgICovXG4gICAgcHVibGljIGZpcmUhOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbXVjaCBoZWFsdGggdGhpcyBidWlsZGluZyBjdXJyZW50bHkgaGFzLiBXaGVuIHRoaXMgcmVhY2hlcyAwIHRoZVxuICAgICAqIEJ1aWxkaW5nIGhhcyBiZWVuIGJ1cm5lZCBkb3duLlxuICAgICAqL1xuICAgIHB1YmxpYyBoZWFsdGghOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoaXMgaXMgdGhlIEhlYWRxdWFydGVycyBvZiB0aGUgb3duaW5nIHBsYXllciwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEJ1cm5pbmcgdGhpcyBkb3duIHdpbnMgdGhlIGdhbWUgZm9yIHRoZSBvdGhlciBQbGF5ZXIuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGlzSGVhZHF1YXJ0ZXJzITogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwbGF5ZXIgdGhhdCBvd25zIHRoaXMgYnVpbGRpbmcuIElmIGl0IGJ1cm5zIGRvd24gKGhlYWx0aCByZWFjaGVzIDApXG4gICAgICogdGhhdCBwbGF5ZXIgZ2V0cyBhbiBhZGRpdGlvbmFsIGJyaWJlKHMpLlxuICAgICAqL1xuICAgIHB1YmxpYyBvd25lcjogUGxheWVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2F0aW9uIG9mIHRoZSBCdWlsZGluZyBhbG9uZyB0aGUgeC1heGlzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSB4ITogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGxvY2F0aW9uIG9mIHRoZSBCdWlsZGluZyBhbG9uZyB0aGUgeS1heGlzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSB5ITogbnVtYmVyO1xuXG4gICAgLy8gPDwtLSBDcmVlci1NZXJnZTogYXR0cmlidXRlcyAtLT4+XG5cbiAgICAvLyBBbnkgYWRkaXRpb25hbCBtZW1iZXIgYXR0cmlidXRlcyBjYW4gZ28gaGVyZVxuICAgIC8vIE5PVEU6IFRoZXkgd2lsbCBub3QgYmUgc2VudCB0byB0aGUgQUlzLCB0aG9zZSBtdXN0IGJlIGRlZmluZWRcbiAgICAvLyBpbiB0aGUgY3JlZXIgZmlsZS5cblxuICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBhdHRyaWJ1dGVzIC0tPj5cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGEgQnVpbGRpbmcgaXMgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gSW5pdGlhbCB2YWx1ZShzKSB0byBzZXQgbWVtYmVyIHZhcmlhYmxlcyB0by5cbiAgICAgKiBAcGFyYW0gcmVxdWlyZWQgLSBEYXRhIHJlcXVpcmVkIHRvIGluaXRpYWxpemUgdGhpcyAoaWdub3JlIGl0KS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYXJnczogUmVhZG9ubHk8SUJ1aWxkaW5nUHJvcGVydGllcyAmIHtcbiAgICAgICAgICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IGNvbnN0cnVjdG9yLWFyZ3MgLS0+PlxuICAgICAgICAgICAgLyoqIFRoZSBvd25lciBvZiB0aGlzIGJ1aWxkaW5nLiAqL1xuICAgICAgICAgICAgb3duZXI6IFBsYXllcjtcbiAgICAgICAgICAgIC8qKiBUaGUgeCBsb2NhdGlvbiBvZiB0aGlzIGJ1aWxkaW5nLiAqL1xuICAgICAgICAgICAgeDogbnVtYmVyO1xuICAgICAgICAgICAgLyoqIFRoZSB5IGxvY2F0aW9uIG9mIHRoaXMgYnVpbGRpbmcuICovXG4gICAgICAgICAgICB5OiBudW1iZXI7XG4gICAgICAgICAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogY29uc3RydWN0b3ItYXJncyAtLT4+XG4gICAgICAgIH0+LFxuICAgICAgICByZXF1aXJlZDogUmVhZG9ubHk8SUJhc2VHYW1lT2JqZWN0UmVxdWlyZWREYXRhPixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXJncywgcmVxdWlyZWQpO1xuXG4gICAgICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IGNvbnN0cnVjdG9yIC0tPj5cblxuICAgICAgICB0aGlzLm93bmVyID0gYXJncy5vd25lcjtcbiAgICAgICAgdGhpcy5oZWFsdGggPSB0aGlzLmdhbWUuc2V0dGluZ3MuYnVpbGRpbmdTdGFydGluZ0hlYWx0aDtcblxuICAgICAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogY29uc3RydWN0b3IgLS0+PlxuICAgIH1cblxuICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IHB1YmxpYy1mdW5jdGlvbnMgLS0+PlxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgbmVpZ2hib3IgaW4gYSBkaXJlY3Rpb24gb2YgdGhlIGJ1aWxkaW5nLlxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gVGhlIGRpcmVjdGlvbiB0byBnZXQgYXRcbiAgICAgKiBAcmV0dXJucyBUaGUgYnVpbGRpbmcgaW4gdGhhdCBkaXJlY3Rpb24sIGlmIHRoZXJlIGlzIG9uZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TmVpZ2hib3IoZGlyZWN0aW9uOiBzdHJpbmcpOiBCdWlsZGluZyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJub3J0aFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkaW5nTm9ydGg7XG4gICAgICAgICAgICBjYXNlIFwiZWFzdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkaW5nRWFzdDtcbiAgICAgICAgICAgIGNhc2UgXCJzb3V0aFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkaW5nU291dGg7XG4gICAgICAgICAgICBjYXNlIFwid2VzdFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkaW5nV2VzdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBwdWJsaWMtZnVuY3Rpb25zIC0tPj5cblxuICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IHByb3RlY3RlZC1wcml2YXRlLWZ1bmN0aW9ucyAtLT4+XG5cbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBmaW5kIGEgcmVhc29uIHdoeSB0aGUgYnJpYmUgKGFjdGlvbikgaXMgaW52YWxpZFxuICAgICAqXG4gICAgICogQHBhcmFtIHBsYXllciAtIHRoZSBwbGF5ZXIgdHJ5aW5nIHRvIGJyaWJlIHRoaXMgYnVpbGRpbmdcbiAgICAgKiBAcmV0dXJucyBhIGdhbWUgbG9naWMgZXJyb3IgaXMgcmV0dXJuZWQgaWYgdGhlIGJyaWJlIGlzIE5PVCB2YWxpZCwgdW5kZWZpbmVkIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBpbnZhbGlkYXRlQnJpYmUocGxheWVyOiBQbGF5ZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICBpZiAocGxheWVyICE9PSB0aGlzLm93bmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpc30gaXMgbm90IG93bmVkIGJ5ICR7cGxheWVyfSBhbmQgY2Fubm90IGJlIGJyaWJlZC5gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsYXllci5icmliZXNSZW1haW5pbmcgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3BsYXllcn0gaGFzIG5vIGJyaWJlcyBsZWZ0IHRvIGJyaWJlICR7dGhpc30gd2l0aC5gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaGVhbHRoIDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzfSBoYXMgYmVlbiBidXJuZWQgZG93biBhbmQgY2Fubm90IGJlIGJyaWJlZC5gO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYnJpYmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dGhpc30gaGFzIGFscmVhZHkgYmVlbiBicmliZWQgdGhpcyB0dXJuIGFuZCBjYW5ub3QgYmUgYnJpYmVkIGFnYWluLmA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogcHJvdGVjdGVkLXByaXZhdGUtZnVuY3Rpb25zIC0tPj5cbn1cbiJdfQ==