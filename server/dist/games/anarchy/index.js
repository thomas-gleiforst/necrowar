"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const mixed = base2;
/** The base AI class for the Anarchy game will mixin logic. */
class BaseAnarchyAI extends mixed.AI {
}
/** The base Game class for the Anarchy game will mixin logic. */
class BaseAnarchyGame extends mixed.Game {
}
/** The base GameManager class for the Anarchy game will mixin logic. */
class BaseAnarchyGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Anarchy game will mixin logic. */
class BaseAnarchyGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Anarchy game will mixin logic. */
class BaseAnarchyGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseAnarchyAI,
    Game: BaseAnarchyGame,
    GameManager: BaseAnarchyGameManager,
    GameObject: BaseAnarchyGameObject,
    GameSettings: BaseAnarchyGameSettings,
};
tslib_1.__exportStar(require("./building"), exports);
tslib_1.__exportStar(require("./fire-department"), exports);
tslib_1.__exportStar(require("./forecast"), exports);
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./police-department"), exports);
tslib_1.__exportStar(require("./warehouse"), exports);
tslib_1.__exportStar(require("./weather-station"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const building_1 = require("./building");
const fire_department_1 = require("./fire-department");
const forecast_1 = require("./forecast");
const game_object_1 = require("./game-object");
const player_1 = require("./player");
const police_department_1 = require("./police-department");
const warehouse_1 = require("./warehouse");
const weather_station_1 = require("./weather-station");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Anarchy game.
 */
class AnarchyGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Building in the Game and tracks it for all players.
     *
     * @param args - Data about the Building to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Building hooked up in the game and ready for you to use.
     */
    building(args) {
        return this.createGameObject("Building", building_1.Building, args);
    }
    /**
     * Creates a new FireDepartment in the Game and tracks it for all players.
     *
     * @param args - Data about the FireDepartment to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new FireDepartment hooked up in the game and ready for you to
     * use.
     */
    fireDepartment(args) {
        return this.createGameObject("FireDepartment", fire_department_1.FireDepartment, args);
    }
    /**
     * Creates a new Forecast in the Game and tracks it for all players.
     *
     * @param args - Data about the Forecast to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Forecast hooked up in the game and ready for you to use.
     */
    forecast(args) {
        return this.createGameObject("Forecast", forecast_1.Forecast, args);
    }
    /**
     * Creates a new PoliceDepartment in the Game and tracks it for all
     * players.
     *
     * @param args - Data about the PoliceDepartment to set. Any keys matching
     * a property in the game object's class will be automatically set for you.
     * @returns A new PoliceDepartment hooked up in the game and ready for you
     * to use.
     */
    policeDepartment(args) {
        return this.createGameObject("PoliceDepartment", police_department_1.PoliceDepartment, args);
    }
    /**
     * Creates a new Warehouse in the Game and tracks it for all players.
     *
     * @param args - Data about the Warehouse to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Warehouse hooked up in the game and ready for you to use.
     */
    warehouse(args) {
        return this.createGameObject("Warehouse", warehouse_1.Warehouse, args);
    }
    /**
     * Creates a new WeatherStation in the Game and tracks it for all players.
     *
     * @param args - Data about the WeatherStation to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new WeatherStation hooked up in the game and ready for you to
     * use.
     */
    weatherStation(args) {
        return this.createGameObject("WeatherStation", weather_station_1.WeatherStation, args);
    }
}
exports.AnarchyGameObjectFactory = AnarchyGameObjectFactory;
/**
 * The shared namespace for Anarchy that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.AnarchyGame,
    GameManager: game_manager_1.AnarchyGameManager,
    GameObjectFactory: AnarchyGameObjectFactory,
    GameSettingsManager: game_settings_1.AnarchyGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Anarchy",
    gameSettingsManager: new game_settings_1.AnarchyGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                baseBribesPerTurn: {
                    typeName: "int",
                },
                buildings: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: building_1.Building,
                        nullable: false,
                    },
                },
                currentForecast: {
                    typeName: "gameObject",
                    gameObjectClass: forecast_1.Forecast,
                    nullable: false,
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                forecasts: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: forecast_1.Forecast,
                        nullable: false,
                    },
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxFire: {
                    typeName: "int",
                },
                maxForecastIntensity: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                nextForecast: {
                    typeName: "gameObject",
                    gameObjectClass: forecast_1.Forecast,
                    nullable: true,
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                session: {
                    typeName: "string",
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Building: {
            parentClassName: "GameObject",
            attributes: {
                bribed: {
                    typeName: "boolean",
                },
                buildingEast: {
                    typeName: "gameObject",
                    gameObjectClass: building_1.Building,
                    nullable: true,
                },
                buildingNorth: {
                    typeName: "gameObject",
                    gameObjectClass: building_1.Building,
                    nullable: true,
                },
                buildingSouth: {
                    typeName: "gameObject",
                    gameObjectClass: building_1.Building,
                    nullable: true,
                },
                buildingWest: {
                    typeName: "gameObject",
                    gameObjectClass: building_1.Building,
                    nullable: true,
                },
                fire: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                isHeadquarters: {
                    typeName: "boolean",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        FireDepartment: {
            parentClassName: "Building",
            attributes: {
                fireExtinguished: {
                    typeName: "int",
                },
            },
            functions: {
                extinguish: {
                    args: [
                        {
                            argName: "building",
                            typeName: "gameObject",
                            gameObjectClass: building_1.Building,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Forecast: {
            parentClassName: "GameObject",
            attributes: {
                controllingPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                direction: {
                    typeName: "string",
                    defaultValue: "North",
                    literals: ["North", "East", "South", "West"],
                },
                intensity: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                bribesRemaining: {
                    typeName: "int",
                },
                buildings: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: building_1.Building,
                        nullable: false,
                    },
                },
                clientType: {
                    typeName: "string",
                },
                fireDepartments: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: fire_department_1.FireDepartment,
                        nullable: false,
                    },
                },
                headquarters: {
                    typeName: "gameObject",
                    gameObjectClass: warehouse_1.Warehouse,
                    nullable: false,
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                policeDepartments: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: police_department_1.PoliceDepartment,
                        nullable: false,
                    },
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                warehouses: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: warehouse_1.Warehouse,
                        nullable: false,
                    },
                },
                weatherStations: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: weather_station_1.WeatherStation,
                        nullable: false,
                    },
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        PoliceDepartment: {
            parentClassName: "Building",
            attributes: {},
            functions: {
                raid: {
                    args: [
                        {
                            argName: "warehouse",
                            typeName: "gameObject",
                            gameObjectClass: warehouse_1.Warehouse,
                            nullable: false,
                        },
                    ],
                    invalidValue: -1,
                    returns: {
                        typeName: "int",
                    },
                },
            },
        },
        Warehouse: {
            parentClassName: "Building",
            attributes: {
                exposure: {
                    typeName: "int",
                },
                fireAdded: {
                    typeName: "int",
                },
            },
            functions: {
                ignite: {
                    args: [
                        {
                            argName: "building",
                            typeName: "gameObject",
                            gameObjectClass: building_1.Building,
                            nullable: false,
                        },
                    ],
                    invalidValue: -1,
                    returns: {
                        typeName: "int",
                    },
                },
            },
        },
        WeatherStation: {
            parentClassName: "Building",
            attributes: {},
            functions: {
                intensify: {
                    args: [
                        {
                            argName: "negative",
                            typeName: "boolean",
                            defaultValue: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                rotate: {
                    args: [
                        {
                            argName: "counterclockwise",
                            typeName: "boolean",
                            defaultValue: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
    },
    gameVersion: "2bc66f9a5d7babd553079e149c7466feb6f553935b608ff722872e195fbadab8",
});
//# sourceMappingURL=data:application/json;base64,