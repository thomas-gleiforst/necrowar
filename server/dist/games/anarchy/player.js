"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_object_1 = require("./game-object");
// <<-- Creer-Merge: imports -->>
// any additional imports you want can be placed here safely between creer runs
// <<-- /Creer-Merge: imports -->>
/**
 * A player in this game. Every AI controls one player.
 */
class Player extends game_object_1.GameObject {
    // <<-- Creer-Merge: attributes -->>
    // Any additional member attributes can go here
    // NOTE: They will not be sent to the AIs, those must be defined
    // in the creer file.
    // <<-- /Creer-Merge: attributes -->>
    /**
     * Called when a Player is created.
     *
     * @param args - Initial value(s) to set member variables to.
     * @param required - Data required to initialize this (ignore it).
     */
    constructor(
    // never directly created by game developers
    args, required) {
        super(args, required);
        // <<-- Creer-Merge: constructor -->>
        // setup any thing you need here
        // <<-- /Creer-Merge: constructor -->>
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dhbWVzL2FuYXJjaHkvcGxheWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EsK0NBQTJDO0FBSzNDLGlDQUFpQztBQUNqQywrRUFBK0U7QUFDL0Usa0NBQWtDO0FBRWxDOztHQUVHO0FBQ0gsTUFBYSxNQUFPLFNBQVEsd0JBQVU7SUFtRmxDLG9DQUFvQztJQUVwQywrQ0FBK0M7SUFDL0MsZ0VBQWdFO0lBQ2hFLHFCQUFxQjtJQUVyQixxQ0FBcUM7SUFFckM7Ozs7O09BS0c7SUFDSDtJQUNJLDRDQUE0QztJQUM1QyxJQUFrQyxFQUNsQyxRQUErQztRQUUvQyxLQUFLLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRXRCLHFDQUFxQztRQUNyQyxnQ0FBZ0M7UUFDaEMsc0NBQXNDO0lBQzFDLENBQUM7Q0FlSjtBQTFIRCx3QkEwSEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQmFzZUdhbWVPYmplY3RSZXF1aXJlZERhdGEgfSBmcm9tIFwifi9jb3JlL2dhbWVcIjtcbmltcG9ydCB7IElCYXNlQW5hcmNoeVBsYXllciB9IGZyb20gXCIuL1wiO1xuaW1wb3J0IHsgQUkgfSBmcm9tIFwiLi9haVwiO1xuaW1wb3J0IHsgQnVpbGRpbmcgfSBmcm9tIFwiLi9idWlsZGluZ1wiO1xuaW1wb3J0IHsgRmlyZURlcGFydG1lbnQgfSBmcm9tIFwiLi9maXJlLWRlcGFydG1lbnRcIjtcbmltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tIFwiLi9nYW1lLW9iamVjdFwiO1xuaW1wb3J0IHsgUG9saWNlRGVwYXJ0bWVudCB9IGZyb20gXCIuL3BvbGljZS1kZXBhcnRtZW50XCI7XG5pbXBvcnQgeyBXYXJlaG91c2UgfSBmcm9tIFwiLi93YXJlaG91c2VcIjtcbmltcG9ydCB7IFdlYXRoZXJTdGF0aW9uIH0gZnJvbSBcIi4vd2VhdGhlci1zdGF0aW9uXCI7XG5cbi8vIDw8LS0gQ3JlZXItTWVyZ2U6IGltcG9ydHMgLS0+PlxuLy8gYW55IGFkZGl0aW9uYWwgaW1wb3J0cyB5b3Ugd2FudCBjYW4gYmUgcGxhY2VkIGhlcmUgc2FmZWx5IGJldHdlZW4gY3JlZXIgcnVuc1xuLy8gPDwtLSAvQ3JlZXItTWVyZ2U6IGltcG9ydHMgLS0+PlxuXG4vKipcbiAqIEEgcGxheWVyIGluIHRoaXMgZ2FtZS4gRXZlcnkgQUkgY29udHJvbHMgb25lIHBsYXllci5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXllciBleHRlbmRzIEdhbWVPYmplY3QgaW1wbGVtZW50cyBJQmFzZUFuYXJjaHlQbGF5ZXIge1xuICAgIC8qKiBUaGUgQUkgY29udHJvbGxpbmcgdGhpcyBQbGF5ZXIgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgYWkhOiBBSTtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IGJyaWJlcyB0aGlzIHBsYXllciBoYXMgcmVtYWluaW5nIHRvIHVzZSBkdXJpbmcgdGhlaXIgdHVybi4gRWFjaFxuICAgICAqIGFjdGlvbiBhIEJ1aWxkaW5nIGRvZXMgY29zdHMgMSBicmliZS4gQW55IHVudXNlZCBicmliZXMgYXJlIGxvc3QgYXQgdGhlXG4gICAgICogZW5kIG9mIHRoZSBwbGF5ZXIncyB0dXJuLlxuICAgICAqL1xuICAgIHB1YmxpYyBicmliZXNSZW1haW5pbmchOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBbGwgdGhlIGJ1aWxkaW5ncyBvd25lZCBieSB0aGlzIHBsYXllci5cbiAgICAgKi9cbiAgICBwdWJsaWMgYnVpbGRpbmdzITogQnVpbGRpbmdbXTtcblxuICAgIC8qKlxuICAgICAqIFdoYXQgdHlwZSBvZiBjbGllbnQgdGhpcyBpcywgZS5nLiAnUHl0aG9uJywgJ0phdmFTY3JpcHQnLCBvciBzb21lIG90aGVyXG4gICAgICogbGFuZ3VhZ2UuIEZvciBwb3RlbnRpYWwgZGF0YSBtaW5pbmcgcHVycG9zZXMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNsaWVudFR5cGUhOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBbGwgdGhlIEZpcmVEZXBhcnRtZW50cyBvd25lZCBieSB0aGlzIHBsYXllci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmlyZURlcGFydG1lbnRzITogRmlyZURlcGFydG1lbnRbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBXYXJlaG91c2UgdGhhdCBzZXJ2ZXMgYXMgdGhpcyBwbGF5ZXIncyBoZWFkcXVhcnRlcnMgYW5kIGhhcyBleHRyYVxuICAgICAqIGhlYWx0aC4gSWYgdGhpcyBnZXRzIGRlc3Ryb3llZCB0aGV5IGxvc2UuXG4gICAgICovXG4gICAgcHVibGljIGhlYWRxdWFydGVycyE6IFdhcmVob3VzZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBwbGF5ZXIgbG9zdCB0aGUgZ2FtZSBvciBub3QuXG4gICAgICovXG4gICAgcHVibGljIGxvc3QhOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHBsYXllci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSE6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoaXMgcGxheWVyJ3Mgb3Bwb25lbnQgaW4gdGhlIGdhbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IG9wcG9uZW50ITogUGxheWVyO1xuXG4gICAgLyoqXG4gICAgICogQWxsIHRoZSBQb2xpY2VEZXBhcnRtZW50cyBvd25lZCBieSB0aGlzIHBsYXllci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcG9saWNlRGVwYXJ0bWVudHMhOiBQb2xpY2VEZXBhcnRtZW50W107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcGxheWVyIGxvc3QgdGhlIGdhbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYXNvbkxvc3QhOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcGxheWVyIHdvbiB0aGUgZ2FtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhc29uV29uITogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiB0aW1lIChpbiBucykgcmVtYWluaW5nIGZvciB0aGlzIEFJIHRvIHNlbmQgY29tbWFuZHMuXG4gICAgICovXG4gICAgcHVibGljIHRpbWVSZW1haW5pbmchOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBBbGwgdGhlIHdhcmVob3VzZXMgb3duZWQgYnkgdGhpcyBwbGF5ZXIuIEluY2x1ZGVzIHRoZSBIZWFkcXVhcnRlcnMuXG4gICAgICovXG4gICAgcHVibGljIHdhcmVob3VzZXMhOiBXYXJlaG91c2VbXTtcblxuICAgIC8qKlxuICAgICAqIEFsbCB0aGUgV2VhdGhlclN0YXRpb25zIG93bmVkIGJ5IHRoaXMgcGxheWVyLlxuICAgICAqL1xuICAgIHB1YmxpYyB3ZWF0aGVyU3RhdGlvbnMhOiBXZWF0aGVyU3RhdGlvbltdO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHBsYXllciB3b24gdGhlIGdhbWUgb3Igbm90LlxuICAgICAqL1xuICAgIHB1YmxpYyB3b24hOiBib29sZWFuO1xuXG4gICAgLy8gPDwtLSBDcmVlci1NZXJnZTogYXR0cmlidXRlcyAtLT4+XG5cbiAgICAvLyBBbnkgYWRkaXRpb25hbCBtZW1iZXIgYXR0cmlidXRlcyBjYW4gZ28gaGVyZVxuICAgIC8vIE5PVEU6IFRoZXkgd2lsbCBub3QgYmUgc2VudCB0byB0aGUgQUlzLCB0aG9zZSBtdXN0IGJlIGRlZmluZWRcbiAgICAvLyBpbiB0aGUgY3JlZXIgZmlsZS5cblxuICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBhdHRyaWJ1dGVzIC0tPj5cblxuICAgIC8qKlxuICAgICAqIENhbGxlZCB3aGVuIGEgUGxheWVyIGlzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIEluaXRpYWwgdmFsdWUocykgdG8gc2V0IG1lbWJlciB2YXJpYWJsZXMgdG8uXG4gICAgICogQHBhcmFtIHJlcXVpcmVkIC0gRGF0YSByZXF1aXJlZCB0byBpbml0aWFsaXplIHRoaXMgKGlnbm9yZSBpdCkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIC8vIG5ldmVyIGRpcmVjdGx5IGNyZWF0ZWQgYnkgZ2FtZSBkZXZlbG9wZXJzXG4gICAgICAgIGFyZ3M6IFJlYWRvbmx5PElCYXNlQW5hcmNoeVBsYXllcj4sXG4gICAgICAgIHJlcXVpcmVkOiBSZWFkb25seTxJQmFzZUdhbWVPYmplY3RSZXF1aXJlZERhdGE+LFxuICAgICkge1xuICAgICAgICBzdXBlcihhcmdzLCByZXF1aXJlZCk7XG5cbiAgICAgICAgLy8gPDwtLSBDcmVlci1NZXJnZTogY29uc3RydWN0b3IgLS0+PlxuICAgICAgICAvLyBzZXR1cCBhbnkgdGhpbmcgeW91IG5lZWQgaGVyZVxuICAgICAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogY29uc3RydWN0b3IgLS0+PlxuICAgIH1cblxuICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IHB1YmxpYy1mdW5jdGlvbnMgLS0+PlxuXG4gICAgLy8gQW55IHB1YmxpYyBmdW5jdGlvbnMgY2FuIGdvIGhlcmUgZm9yIG90aGVyIHRoaW5ncyBpbiB0aGUgZ2FtZSB0byB1c2UuXG4gICAgLy8gTk9URTogQ2xpZW50IEFJcyBjYW5ub3QgY2FsbCB0aGVzZSBmdW5jdGlvbnMsIHRob3NlIG11c3QgYmUgZGVmaW5lZFxuICAgIC8vIGluIHRoZSBjcmVlciBmaWxlLlxuXG4gICAgLy8gPDwtLSAvQ3JlZXItTWVyZ2U6IHB1YmxpYy1mdW5jdGlvbnMgLS0+PlxuXG4gICAgLy8gPDwtLSBDcmVlci1NZXJnZTogcHJvdGVjdGVkLXByaXZhdGUtZnVuY3Rpb25zIC0tPj5cblxuICAgIC8vIEFueSBhZGRpdGlvbmFsIHByb3RlY3RlZCBvciBwaXJhdGUgbWV0aG9kcyBjYW4gZ28gaGVyZS5cblxuICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBwcm90ZWN0ZWQtcHJpdmF0ZS1mdW5jdGlvbnMgLS0+PlxufVxuIl19