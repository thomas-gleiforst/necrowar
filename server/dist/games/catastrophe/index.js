"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const base3 = mixins_1.mixTiled(base2);
const mixed = base3;
/** The base AI class for the Catastrophe game will mixin logic. */
class BaseCatastropheAI extends mixed.AI {
}
/** The base Game class for the Catastrophe game will mixin logic. */
class BaseCatastropheGame extends mixed.Game {
}
/** The base GameManager class for the Catastrophe game will mixin logic. */
class BaseCatastropheGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Catastrophe game will mixin logic. */
class BaseCatastropheGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Catastrophe game will mixin logic. */
class BaseCatastropheGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseCatastropheAI,
    Game: BaseCatastropheGame,
    GameManager: BaseCatastropheGameManager,
    GameObject: BaseCatastropheGameObject,
    GameSettings: BaseCatastropheGameSettings,
};
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./job"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./structure"), exports);
tslib_1.__exportStar(require("./tile"), exports);
tslib_1.__exportStar(require("./unit"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const game_object_1 = require("./game-object");
const job_1 = require("./job");
const player_1 = require("./player");
const structure_1 = require("./structure");
const tile_1 = require("./tile");
const unit_1 = require("./unit");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Catastrophe game.
 */
class CatastropheGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Job in the Game and tracks it for all players.
     *
     * @param args - Data about the Job to set. Any keys matching a property in
     * the game object's class will be automatically set for you.
     * @returns A new Job hooked up in the game and ready for you to use.
     */
    job(args) {
        return this.createGameObject("Job", job_1.Job, args);
    }
    /**
     * Creates a new Structure in the Game and tracks it for all players.
     *
     * @param args - Data about the Structure to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Structure hooked up in the game and ready for you to use.
     */
    structure(args) {
        return this.createGameObject("Structure", structure_1.Structure, args);
    }
    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    tile(args) {
        return this.createGameObject("Tile", tile_1.Tile, args);
    }
    /**
     * Creates a new Unit in the Game and tracks it for all players.
     *
     * @param args - Data about the Unit to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Unit hooked up in the game and ready for you to use.
     */
    unit(args) {
        return this.createGameObject("Unit", unit_1.Unit, args);
    }
}
exports.CatastropheGameObjectFactory = CatastropheGameObjectFactory;
/**
 * The shared namespace for Catastrophe that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.CatastropheGame,
    GameManager: game_manager_1.CatastropheGameManager,
    GameObjectFactory: CatastropheGameObjectFactory,
    GameSettingsManager: game_settings_1.CatastropheGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Catastrophe",
    gameSettingsManager: new game_settings_1.CatastropheGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                catEnergyMult: {
                    typeName: "float",
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                harvestCooldown: {
                    typeName: "int",
                },
                jobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: job_1.Job,
                        nullable: false,
                    },
                },
                lowerHarvestAmount: {
                    typeName: "int",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                monumentCostMult: {
                    typeName: "float",
                },
                monumentMaterials: {
                    typeName: "int",
                },
                neutralMaterials: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                session: {
                    typeName: "string",
                },
                shelterMaterials: {
                    typeName: "int",
                },
                startingFood: {
                    typeName: "int",
                },
                starvingEnergyMult: {
                    typeName: "float",
                },
                structures: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: structure_1.Structure,
                        nullable: false,
                    },
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                turnsBetweenHarvests: {
                    typeName: "int",
                },
                turnsToCreateHuman: {
                    typeName: "int",
                },
                turnsToLowerHarvest: {
                    typeName: "int",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                wallMaterials: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Job: {
            parentClassName: "GameObject",
            attributes: {
                actionCost: {
                    typeName: "float",
                },
                carryLimit: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                regenRate: {
                    typeName: "float",
                },
                title: {
                    typeName: "string",
                    defaultValue: "fresh human",
                    literals: ["fresh human", "cat overlord", "soldier", "gatherer", "builder", "missionary"],
                },
                upkeep: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                cat: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: false,
                },
                clientType: {
                    typeName: "string",
                },
                food: {
                    typeName: "int",
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                structures: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: structure_1.Structure,
                        nullable: false,
                    },
                },
                timeRemaining: {
                    typeName: "float",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                upkeep: {
                    typeName: "int",
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Structure: {
            parentClassName: "GameObject",
            attributes: {
                effectRadius: {
                    typeName: "int",
                },
                materials: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                type: {
                    typeName: "string",
                    defaultValue: "neutral",
                    literals: ["neutral", "shelter", "monument", "wall", "road"],
                },
            },
            functions: {},
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                food: {
                    typeName: "int",
                },
                harvestRate: {
                    typeName: "int",
                },
                materials: {
                    typeName: "int",
                },
                structure: {
                    typeName: "gameObject",
                    gameObjectClass: structure_1.Structure,
                    nullable: true,
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                turnsToHarvest: {
                    typeName: "int",
                },
                unit: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Unit: {
            parentClassName: "GameObject",
            attributes: {
                acted: {
                    typeName: "boolean",
                },
                energy: {
                    typeName: "float",
                },
                food: {
                    typeName: "int",
                },
                job: {
                    typeName: "gameObject",
                    gameObjectClass: job_1.Job,
                    nullable: false,
                },
                materials: {
                    typeName: "int",
                },
                movementTarget: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                moves: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                squad: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                starving: {
                    typeName: "boolean",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                turnsToDie: {
                    typeName: "int",
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                changeJob: {
                    args: [
                        {
                            argName: "job",
                            typeName: "string",
                            defaultValue: "soldier",
                            literals: ["soldier", "gatherer", "builder", "missionary"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                construct: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "type",
                            typeName: "string",
                            defaultValue: "neutral",
                            literals: ["neutral", "shelter", "monument", "wall", "road"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                convert: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                deconstruct: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                drop: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "resource",
                            typeName: "string",
                            defaultValue: "materials",
                            literals: ["materials", "food"],
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                harvest: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                pickup: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "resource",
                            typeName: "string",
                            defaultValue: "materials",
                            literals: ["materials", "food"],
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                rest: {
                    args: [],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
    },
    gameVersion: "ede84ab86376b00287c09558f05e8f2a61b92109d93aad9ebd3379ff4215fb53",
});
//# sourceMappingURL=data:application/json;base64,