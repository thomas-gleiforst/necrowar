"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const game_object_1 = require("./game-object");
// <<-- Creer-Merge: imports -->>
// any additional imports you want can be placed here safely between creer runs
// <<-- /Creer-Merge: imports -->>
/**
 * A player in this game. Every AI controls one player.
 */
class Player extends game_object_1.GameObject {
    // Any additional member attributes can go here
    // NOTE: They will not be sent to the AIs, those must be defined
    // in the creer file.
    // <<-- /Creer-Merge: attributes -->>
    /**
     * Called when a Player is created.
     *
     * @param args - Initial value(s) to set member variables to.
     * @param required - Data required to initialize this (ignore it).
     */
    constructor(
    // never directly created by game developers
    args, required) {
        super(args, required);
        // <<-- Creer-Merge: constructor -->>
        this.conveyors = [];
        // setup any thing you need here
        // <<-- /Creer-Merge: constructor -->>
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dhbWVzL25ld3Rvbmlhbi9wbGF5ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSwrQ0FBMkM7QUFJM0MsaUNBQWlDO0FBQ2pDLCtFQUErRTtBQUMvRSxrQ0FBa0M7QUFFbEM7O0dBRUc7QUFDSCxNQUFhLE1BQU8sU0FBUSx3QkFBVTtJQTZGbEMsK0NBQStDO0lBQy9DLGdFQUFnRTtJQUNoRSxxQkFBcUI7SUFFckIscUNBQXFDO0lBRXJDOzs7OztPQUtHO0lBQ0g7SUFDSSw0Q0FBNEM7SUFDNUMsSUFBb0MsRUFDcEMsUUFBK0M7UUFFL0MsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUV0QixxQ0FBcUM7UUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsZ0NBQWdDO1FBQ2hDLHNDQUFzQztJQUMxQyxDQUFDO0NBZUo7QUFuSUQsd0JBbUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUJhc2VHYW1lT2JqZWN0UmVxdWlyZWREYXRhIH0gZnJvbSBcIn4vY29yZS9nYW1lXCI7XG5pbXBvcnQgeyBJQmFzZU5ld3RvbmlhblBsYXllciB9IGZyb20gXCIuL1wiO1xuaW1wb3J0IHsgQUkgfSBmcm9tIFwiLi9haVwiO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuL2dhbWUtb2JqZWN0XCI7XG5pbXBvcnQgeyBUaWxlIH0gZnJvbSBcIi4vdGlsZVwiO1xuaW1wb3J0IHsgVW5pdCB9IGZyb20gXCIuL3VuaXRcIjtcblxuLy8gPDwtLSBDcmVlci1NZXJnZTogaW1wb3J0cyAtLT4+XG4vLyBhbnkgYWRkaXRpb25hbCBpbXBvcnRzIHlvdSB3YW50IGNhbiBiZSBwbGFjZWQgaGVyZSBzYWZlbHkgYmV0d2VlbiBjcmVlciBydW5zXG4vLyA8PC0tIC9DcmVlci1NZXJnZTogaW1wb3J0cyAtLT4+XG5cbi8qKlxuICogQSBwbGF5ZXIgaW4gdGhpcyBnYW1lLiBFdmVyeSBBSSBjb250cm9scyBvbmUgcGxheWVyLlxuICovXG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgR2FtZU9iamVjdCBpbXBsZW1lbnRzIElCYXNlTmV3dG9uaWFuUGxheWVyIHtcbiAgICAvKiogVGhlIEFJIGNvbnRyb2xsaW5nIHRoaXMgUGxheWVyICovXG4gICAgcHVibGljIHJlYWRvbmx5IGFpITogQUk7XG5cbiAgICAvKipcbiAgICAgKiBXaGF0IHR5cGUgb2YgY2xpZW50IHRoaXMgaXMsIGUuZy4gJ1B5dGhvbicsICdKYXZhU2NyaXB0Jywgb3Igc29tZSBvdGhlclxuICAgICAqIGxhbmd1YWdlLiBGb3IgcG90ZW50aWFsIGRhdGEgbWluaW5nIHB1cnBvc2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjbGllbnRUeXBlITogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRXZlcnkgZ2VuZXJhdG9yIFRpbGUgb3duZWQgYnkgdGhpcyBQbGF5ZXIuIChsaXN0ZWQgZnJvbSB0aGUgb3V0ZXIgZWRnZXNcbiAgICAgKiBpbndhcmQsIGZyb20gdG9wIHRvIGJvdHRvbSkuXG4gICAgICovXG4gICAgcHVibGljIGdlbmVyYXRvclRpbGVzITogVGlsZVtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBoZWF0IHRoaXMgUGxheWVyIGhhcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgaGVhdCE6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIGxlZnQgdGlsbCBhIGludGVybiBzcGF3bnMuICgwIHRvIHNwYXduVGltZSkuXG4gICAgICovXG4gICAgcHVibGljIGludGVyblNwYXduITogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHBsYXllciBsb3N0IHRoZSBnYW1lIG9yIG5vdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgbG9zdCE6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBsZWZ0IHRpbGwgYSBtYW5hZ2VyIHNwYXducy4gKDAgdG8gc3Bhd25UaW1lKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWFuYWdlclNwYXduITogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIHBsYXllci5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSE6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoaXMgcGxheWVyJ3Mgb3Bwb25lbnQgaW4gdGhlIGdhbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IG9wcG9uZW50ITogUGxheWVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRpbWUgbGVmdCB0aWxsIGEgcGh5c2ljaXN0IHNwYXducy4gKDAgdG8gc3Bhd25UaW1lKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcGh5c2ljaXN0U3Bhd24hOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIHByZXNzdXJlIHRoaXMgUGxheWVyIGhhcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHJlc3N1cmUhOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcGxheWVyIGxvc3QgdGhlIGdhbWUuXG4gICAgICovXG4gICAgcHVibGljIHJlYXNvbkxvc3QhOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcGxheWVyIHdvbiB0aGUgZ2FtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhc29uV29uITogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQWxsIHRoZSB0aWxlcyB0aGlzIFBsYXllcidzIHVuaXRzIGNhbiBzcGF3biBvbi4gKGxpc3RlZCBmcm9tIHRoZSBvdXRlclxuICAgICAqIGVkZ2VzIGlud2FyZCwgZnJvbSB0b3AgdG8gYm90dG9tKS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3Bhd25UaWxlcyE6IFRpbGVbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSAoaW4gbnMpIHJlbWFpbmluZyBmb3IgdGhpcyBBSSB0byBzZW5kIGNvbW1hbmRzLlxuICAgICAqL1xuICAgIHB1YmxpYyB0aW1lUmVtYWluaW5nITogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogRXZlcnkgVW5pdCBvd25lZCBieSB0aGlzIFBsYXllci5cbiAgICAgKi9cbiAgICBwdWJsaWMgdW5pdHMhOiBVbml0W107XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgcGxheWVyIHdvbiB0aGUgZ2FtZSBvciBub3QuXG4gICAgICovXG4gICAgcHVibGljIHdvbiE6IGJvb2xlYW47XG5cbiAgICAvLyA8PC0tIENyZWVyLU1lcmdlOiBhdHRyaWJ1dGVzIC0tPj5cbiAgICAvKipcbiAgICAgKiBUcmFja3MgY29udmV5b3JzIG9uIHRoZSBwbGF5ZXJzIHNpZGUgb2YgdGhlIG1hcC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29udmV5b3JzITogVGlsZVtdO1xuXG4gICAgLy8gQW55IGFkZGl0aW9uYWwgbWVtYmVyIGF0dHJpYnV0ZXMgY2FuIGdvIGhlcmVcbiAgICAvLyBOT1RFOiBUaGV5IHdpbGwgbm90IGJlIHNlbnQgdG8gdGhlIEFJcywgdGhvc2UgbXVzdCBiZSBkZWZpbmVkXG4gICAgLy8gaW4gdGhlIGNyZWVyIGZpbGUuXG5cbiAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogYXR0cmlidXRlcyAtLT4+XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIFBsYXllciBpcyBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgLSBJbml0aWFsIHZhbHVlKHMpIHRvIHNldCBtZW1iZXIgdmFyaWFibGVzIHRvLlxuICAgICAqIEBwYXJhbSByZXF1aXJlZCAtIERhdGEgcmVxdWlyZWQgdG8gaW5pdGlhbGl6ZSB0aGlzIChpZ25vcmUgaXQpLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICAvLyBuZXZlciBkaXJlY3RseSBjcmVhdGVkIGJ5IGdhbWUgZGV2ZWxvcGVyc1xuICAgICAgICBhcmdzOiBSZWFkb25seTxJQmFzZU5ld3RvbmlhblBsYXllcj4sXG4gICAgICAgIHJlcXVpcmVkOiBSZWFkb25seTxJQmFzZUdhbWVPYmplY3RSZXF1aXJlZERhdGE+LFxuICAgICkge1xuICAgICAgICBzdXBlcihhcmdzLCByZXF1aXJlZCk7XG5cbiAgICAgICAgLy8gPDwtLSBDcmVlci1NZXJnZTogY29uc3RydWN0b3IgLS0+PlxuICAgICAgICB0aGlzLmNvbnZleW9ycyA9IFtdO1xuICAgICAgICAvLyBzZXR1cCBhbnkgdGhpbmcgeW91IG5lZWQgaGVyZVxuICAgICAgICAvLyA8PC0tIC9DcmVlci1NZXJnZTogY29uc3RydWN0b3IgLS0+PlxuICAgIH1cblxuICAgIC8vIDw8LS0gQ3JlZXItTWVyZ2U6IHB1YmxpYy1mdW5jdGlvbnMgLS0+PlxuXG4gICAgLy8gQW55IHB1YmxpYyBmdW5jdGlvbnMgY2FuIGdvIGhlcmUgZm9yIG90aGVyIHRoaW5ncyBpbiB0aGUgZ2FtZSB0byB1c2UuXG4gICAgLy8gTk9URTogQ2xpZW50IEFJcyBjYW5ub3QgY2FsbCB0aGVzZSBmdW5jdGlvbnMsIHRob3NlIG11c3QgYmUgZGVmaW5lZFxuICAgIC8vIGluIHRoZSBjcmVlciBmaWxlLlxuXG4gICAgLy8gPDwtLSAvQ3JlZXItTWVyZ2U6IHB1YmxpYy1mdW5jdGlvbnMgLS0+PlxuXG4gICAgLy8gPDwtLSBDcmVlci1NZXJnZTogcHJvdGVjdGVkLXByaXZhdGUtZnVuY3Rpb25zIC0tPj5cblxuICAgIC8vIEFueSBhZGRpdGlvbmFsIHByb3RlY3RlZCBvciBwaXJhdGUgbWV0aG9kcyBjYW4gZ28gaGVyZS5cblxuICAgIC8vIDw8LS0gL0NyZWVyLU1lcmdlOiBwcm90ZWN0ZWQtcHJpdmF0ZS1mdW5jdGlvbnMgLS0+PlxufVxuIl19