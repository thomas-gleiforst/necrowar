"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const base3 = mixins_1.mixTiled(base2);
const mixed = base3;
/** The base AI class for the Newtonian game will mixin logic. */
class BaseNewtonianAI extends mixed.AI {
}
/** The base Game class for the Newtonian game will mixin logic. */
class BaseNewtonianGame extends mixed.Game {
}
/** The base GameManager class for the Newtonian game will mixin logic. */
class BaseNewtonianGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Newtonian game will mixin logic. */
class BaseNewtonianGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Newtonian game will mixin logic. */
class BaseNewtonianGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseNewtonianAI,
    Game: BaseNewtonianGame,
    GameManager: BaseNewtonianGameManager,
    GameObject: BaseNewtonianGameObject,
    GameSettings: BaseNewtonianGameSettings,
};
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./job"), exports);
tslib_1.__exportStar(require("./machine"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./tile"), exports);
tslib_1.__exportStar(require("./unit"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const game_object_1 = require("./game-object");
const job_1 = require("./job");
const machine_1 = require("./machine");
const player_1 = require("./player");
const tile_1 = require("./tile");
const unit_1 = require("./unit");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Newtonian game.
 */
class NewtonianGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Job in the Game and tracks it for all players.
     *
     * @param args - Data about the Job to set. Any keys matching a property in
     * the game object's class will be automatically set for you.
     * @returns A new Job hooked up in the game and ready for you to use.
     */
    job(args) {
        return this.createGameObject("Job", job_1.Job, args);
    }
    /**
     * Creates a new Machine in the Game and tracks it for all players.
     *
     * @param args - Data about the Machine to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Machine hooked up in the game and ready for you to use.
     */
    machine(args) {
        return this.createGameObject("Machine", machine_1.Machine, args);
    }
    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    tile(args) {
        return this.createGameObject("Tile", tile_1.Tile, args);
    }
    /**
     * Creates a new Unit in the Game and tracks it for all players.
     *
     * @param args - Data about the Unit to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Unit hooked up in the game and ready for you to use.
     */
    unit(args) {
        return this.createGameObject("Unit", unit_1.Unit, args);
    }
}
exports.NewtonianGameObjectFactory = NewtonianGameObjectFactory;
/**
 * The shared namespace for Newtonian that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.NewtonianGame,
    GameManager: game_manager_1.NewtonianGameManager,
    GameObjectFactory: NewtonianGameObjectFactory,
    GameSettingsManager: game_settings_1.NewtonianGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Newtonian",
    gameSettingsManager: new game_settings_1.NewtonianGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                internCap: {
                    typeName: "int",
                },
                jobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: job_1.Job,
                        nullable: false,
                    },
                },
                machines: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: machine_1.Machine,
                        nullable: false,
                    },
                },
                managerCap: {
                    typeName: "int",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                materialSpawn: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                physicistCap: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                refinedValue: {
                    typeName: "int",
                },
                regenerateRate: {
                    typeName: "float",
                },
                session: {
                    typeName: "string",
                },
                spawnTime: {
                    typeName: "int",
                },
                stunTime: {
                    typeName: "int",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                timeImmune: {
                    typeName: "int",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                victoryAmount: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Job: {
            parentClassName: "GameObject",
            attributes: {
                carryLimit: {
                    typeName: "int",
                },
                damage: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                title: {
                    typeName: "string",
                    defaultValue: "intern",
                    literals: ["intern", "manager", "physicist"],
                },
            },
            functions: {},
        },
        Machine: {
            parentClassName: "GameObject",
            attributes: {
                oreType: {
                    typeName: "string",
                    defaultValue: "redium",
                    literals: ["redium", "blueium"],
                },
                refineInput: {
                    typeName: "int",
                },
                refineOutput: {
                    typeName: "int",
                },
                refineTime: {
                    typeName: "int",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: false,
                },
                worked: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                generatorTiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                heat: {
                    typeName: "int",
                },
                internSpawn: {
                    typeName: "int",
                },
                lost: {
                    typeName: "boolean",
                },
                managerSpawn: {
                    typeName: "int",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                physicistSpawn: {
                    typeName: "int",
                },
                pressure: {
                    typeName: "int",
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                spawnTiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeRemaining: {
                    typeName: "float",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                blueium: {
                    typeName: "int",
                },
                blueiumOre: {
                    typeName: "int",
                },
                decoration: {
                    typeName: "int",
                },
                direction: {
                    typeName: "string",
                    defaultValue: "blank",
                    literals: ["blank", "north", "east", "south", "west"],
                },
                isWall: {
                    typeName: "boolean",
                },
                machine: {
                    typeName: "gameObject",
                    gameObjectClass: machine_1.Machine,
                    nullable: true,
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                redium: {
                    typeName: "int",
                },
                rediumOre: {
                    typeName: "int",
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                type: {
                    typeName: "string",
                    defaultValue: "normal",
                    literals: ["normal", "generator", "conveyor", "spawn"],
                },
                unit: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Unit: {
            parentClassName: "GameObject",
            attributes: {
                acted: {
                    typeName: "boolean",
                },
                blueium: {
                    typeName: "int",
                },
                blueiumOre: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                job: {
                    typeName: "gameObject",
                    gameObjectClass: job_1.Job,
                    nullable: false,
                },
                moves: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                redium: {
                    typeName: "int",
                },
                rediumOre: {
                    typeName: "int",
                },
                stunImmune: {
                    typeName: "int",
                },
                stunTime: {
                    typeName: "int",
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
            },
            functions: {
                act: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                attack: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                drop: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                        },
                        {
                            argName: "material",
                            typeName: "string",
                            defaultValue: "redium ore",
                            literals: ["redium ore", "redium", "blueium", "blueium ore"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                pickup: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                        },
                        {
                            argName: "material",
                            typeName: "string",
                            defaultValue: "redium ore",
                            literals: ["redium ore", "redium", "blueium", "blueium ore"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
    },
    gameVersion: "7c19f909ee5faa0ac3faf4e989032b5a37ba94aeb5d6ae7654a15a2bb1401bbe",
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ2FtZXMvbmV3dG9uaWFuL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwyQkFBMkI7QUFDM0Isb0RBQW9EO0FBQ3BELDZFQUE2RTtBQUM3RSw4RUFBOEU7QUFDOUUsZ0RBQWdEOzs7QUFFaEQsc0NBQXNDO0FBQ3RDLGlFQUFpRTtBQUVqRSxvQkFBb0I7QUFDcEIsc0NBRTRDO0FBRTVDLFNBQVM7QUFDVCwrQ0FDZ0U7QUFnQmhFLE1BQU0sS0FBSyxHQUFHO0lBQ1YsRUFBRSxFQUFFLGFBQU07SUFDVixJQUFJLEVBQUUsZUFBUTtJQUNkLFdBQVcsRUFBRSxzQkFBZTtJQUM1QixVQUFVLEVBQUUscUJBQWM7SUFDMUIsWUFBWSxFQUFFLDhCQUF1QjtDQUN4QyxDQUFDO0FBRUYsTUFBTSxLQUFLLEdBQUcscUJBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxNQUFNLEtBQUssR0FBRyxxQkFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLGlCQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFOUIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBRXBCLGlFQUFpRTtBQUNqRSxNQUFNLGVBQWdCLFNBQVEsS0FBSyxDQUFDLEVBQUU7Q0FBRztBQUV6QyxtRUFBbUU7QUFDbkUsTUFBTSxpQkFBa0IsU0FBUSxLQUFLLENBQUMsSUFBSTtDQUFHO0FBRTdDLDBFQUEwRTtBQUMxRSxNQUFNLHdCQUF5QixTQUFRLEtBQUssQ0FBQyxXQUFXO0NBQUc7QUFFM0QseUVBQXlFO0FBQ3pFLE1BQU0sdUJBQXdCLFNBQVEsS0FBSyxDQUFDLFVBQVU7Q0FBRztBQUV6RCwyRUFBMkU7QUFDM0UsTUFBTSx5QkFBMEIsU0FBUSxLQUFLLENBQUMsWUFBWTtDQUFHO0FBRTdELHVEQUF1RDtBQUMxQyxRQUFBLFdBQVcsR0FBRztJQUN2QixFQUFFLEVB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LENBQUM7eUJBQy9EO3FCQUNKO29CQUNELFlBQVksRUFBRSxLQUFLO29CQUNuQixPQUFPLEVBQUU7d0JBQ0wsUUFBUSxFQUFFLFNBQVM7cUJBQ3RCO2lCQUNKO2dCQUNELElBQUksRUFBRTtvQkFDRixJQUFJLEVBQUU7d0JBQ0Y7NEJBQ0ksT0FBTyxFQUFFLE1BQU07NEJBQ2YsUUFBUSxFQUFFLFlBQVk7NEJBQ3RCLGVBQWUsRUFBRSxXQUFJOzRCQUNyQixRQUFRLEVBQUUsS0FBSzt5QkFDbEI7cUJBQ0o7b0JBQ0QsWUFBWSxFQUFFLEtBQUs7b0JBQ25CLE9BQU8sRUFBRTt3QkFDTCxRQUFRLEVBQUUsU0FBUztxQkFDdEI7aUJBQ0o7Z0JBQ0QsTUFBTSxFQUFFO29CQUNKLElBQUksRUFBRTt3QkFDRjs0QkFDSSxPQUFPLEVBQUUsTUFBTTs0QkFDZixRQUFRLEVBQUUsWUFBWTs0QkFDdEIsZUFBZSxFQUFFLFdBQUk7NEJBQ3JCLFFBQVEsRUFBRSxLQUFLO3lCQUNsQjt3QkFDRDs0QkFDSSxPQUFPLEVBQUUsUUFBUTs0QkFDakIsUUFBUSxFQUFFLEtBQUs7eUJBQ2xCO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSxVQUFVOzRCQUNuQixRQUFRLEVBQUUsUUFBUTs0QkFDbEIsWUFBWSxFQUFFLFlBQVk7NEJBQzFCLFFBQVEsRUFBRSxDQUFDLFlBQVksRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLGFBQWEsQ0FBQzt5QkFDL0Q7cUJBQ0o7b0JBQ0QsWUFBWSxFQUFFLEtBQUs7b0JBQ25CLE9BQU8sRUFBRTt3QkFDTCxRQUFRLEVBQUUsU0FBUztxQkFDdEI7aUJBQ0o7YUFDSjtTQUNKO0tBQ0o7SUFDRCxXQUFXLEVBQUUsa0VBQWtFO0NBQ2xGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFdBUk5JTkc6IEhlcmUgYmUgRHJhZ29uc1xuLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSBDcmVlciwgZG8gbm90IG1vZGlmeSBpdFxuLy8gSXQgYmFzaWNhbGx5IHNldHMgdXAgYWxsIHRoZSBjbGFzc2VzLCBpbnRlcmZhY2VzLCB0eXBlcywgYW5kIHdoYXQtbm90IHRoYXRcbi8vIHdlIG5lZWQgZm9yIFR5cGVTY3JpcHQgdG8ga25vdyB0aGUgYmFzZSBjbGFzc2VzLCB3aGlsZSBhbGxvd2luZyBmb3IgbWluaW1hbFxuLy8gY29kZSBmb3IgZGV2ZWxvcGVycyB0byBiZSBmb3JjZWQgdG8gZmlsbCBvdXQuXG5cbi8vIHRzbGludDpkaXNhYmxlOm1heC1jbGFzc2VzLXBlci1maWxlXG4vLyBeIGJlY2F1c2Ugd2UgbmVlZCB0byBidWlsZCBhIGJ1bmNoIG9mIGJhc2UgY2xhc3Mgd3JhcHBlcnMgaGVyZVxuXG4vLyBiYXNlIGdhbWUgY2xhc3Nlc1xuaW1wb3J0IHsgQmFzZUFJLCBCYXNlR2FtZSwgQmFzZUdhbWVNYW5hZ2VyLCBCYXNlR2FtZU9iamVjdCxcbiAgICAgICAgIEJhc2VHYW1lT2JqZWN0RmFjdG9yeSwgQmFzZUdhbWVTZXR0aW5nc01hbmFnZXIsIEJhc2VQbGF5ZXIsXG4gICAgICAgICBtYWtlTmFtZXNwYWNlIH0gZnJvbSBcIn4vY29yZS9nYW1lXCI7XG5cbi8vIG1peGluc1xuaW1wb3J0IHsgSVRpbGVkUGxheWVyLCBJVHVybkJhc2VkUGxheWVyLCBJVHdvUGxheWVyUGxheWVyLCBtaXhUaWxlZCxcbiAgICAgICAgIG1peFR1cm5CYXNlZCwgbWl4VHdvUGxheWVyIH0gZnJvbSBcIn4vY29yZS9nYW1lL21peGluc1wiO1xuXG4vLyBleHRyYWN0IGdhbWUgb2JqZWN0IGNvbnN0cnVjdG9yIGFyZ3NcbmltcG9ydCB7IEZpcnN0QXJndW1lbnRGcm9tQ29uc3RydWN0b3IgfSBmcm9tIFwifi91dGlsc1wiO1xuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgdGhlIFBsYXllciBmb3IgdGhlIE5ld3RvbmlhbiBnYW1lXG4gKiBtdXN0IGltcGxlbWVudCBmcm9tIG1peGVkIGluIGdhbWUgbG9naWMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUJhc2VOZXd0b25pYW5QbGF5ZXIgZXh0ZW5kc1xuICAgIEJhc2VQbGF5ZXIsXG4gICAgSVR3b1BsYXllclBsYXllcixcbiAgICBJVHVybkJhc2VkUGxheWVyLFxuICAgIElUaWxlZFBsYXllciB7XG59XG5cbmNvbnN0IGJhc2UwID0ge1xuICAgIEFJOiBCYXNlQUksXG4gICAgR2FtZTogQmFzZUdhbWUsXG4gICAgR2FtZU1hbmFnZXI6IEJhc2VHYW1lTWFuYWdlcixcbiAgICBHYW1lT2JqZWN0OiBCYXNlR2FtZU9iamVjdCxcbiAgICBHYW1lU2V0dGluZ3M6IEJhc2VHYW1lU2V0dGluZ3NNYW5hZ2VyLFxufTtcblxuY29uc3QgYmFzZTEgPSBtaXhUd29QbGF5ZXIoYmFzZTApO1xuY29uc3QgYmFzZTIgPSBtaXhUdXJuQmFzZWQoYmFzZTEpO1xuY29uc3QgYmFzZTMgPSBtaXhUaWxlZChiYXNlMik7XG5cbmNvbnN0IG1peGVkID0gYmFzZTM7XG5cbi8qKiBUaGUgYmFzZSBBSSBjbGFzcyBmb3IgdGhlIE5ld3RvbmlhbiBnYW1lIHdpbGwgbWl4aW4gbG9naWMuICovXG5jbGFzcyBCYXNlTmV3dG9uaWFuQUkgZXh0ZW5kcyBtaXhlZC5BSSB7fVxuXG4vKiogVGhlIGJhc2UgR2FtZSBjbGFzcyBmb3IgdGhlIE5ld3RvbmlhbiBnYW1lIHdpbGwgbWl4aW4gbG9naWMuICovXG5jbGFzcyBCYXNlTmV3dG9uaWFuR2FtZSBleHRlbmRzIG1peGVkLkdhbWUge31cblxuLyoqIFRoZSBiYXNlIEdhbWVNYW5hZ2VyIGNsYXNzIGZvciB0aGUgTmV3dG9uaWFuIGdhbWUgd2lsbCBtaXhpbiBsb2dpYy4gKi9cbmNsYXNzIEJhc2VOZXd0b25pYW5HYW1lTWFuYWdlciBleHRlbmRzIG1peGVkLkdhbWVNYW5hZ2VyIHt9XG5cbi8qKiBUaGUgYmFzZSBHYW1lT2JqZWN0IGNsYXNzIGZvciB0aGUgTmV3dG9uaWFuIGdhbWUgd2lsbCBtaXhpbiBsb2dpYy4gKi9cbmNsYXNzIEJhc2VOZXd0b25pYW5HYW1lT2JqZWN0IGV4dGVuZHMgbWl4ZWQuR2FtZU9iamVjdCB7fVxuXG4vKiogVGhlIGJhc2UgR2FtZVNldHRpbmdzIGNsYXNzIGZvciB0aGUgTmV3dG9uaWFuIGdhbWUgd2lsbCBtaXhpbiBsb2dpYy4gKi9cbmNsYXNzIEJhc2VOZXd0b25pYW5HYW1lU2V0dGluZ3MgZXh0ZW5kcyBtaXhlZC5HYW1lU2V0dGluZ3Mge31cblxuLyoqIFRoZSBCYXNlIGNsYXNzZXMgdGhhdCBnYW1lIGNsYXNzZXMgYnVpbGQgb2ZmIG9mLiAqL1xuZXhwb3J0IGNvbnN0IEJhc2VDbGFzc2VzID0ge1xuICAgIEFJOiBCYXNlTmV3dG9uaWFuQUksXG4gICAgR2FtZTogQmFzZU5ld3RvbmlhbkdhbWUsXG4gICAgR2FtZU1hbmFnZXI6IEJhc2VOZXd0b25pYW5HYW1lTWFuYWdlcixcbiAgICBHYW1lT2JqZWN0OiBCYXNlTmV3dG9uaWFuR2FtZU9iamVjdCxcbiAgICBHYW1lU2V0dGluZ3M6IEJhc2VOZXd0b25pYW5HYW1lU2V0dGluZ3MsXG59O1xuXG4vLyBOb3cgYWxsIHRoZSBiYXNlIGNsYXNzZXMgYXJlIGNyZWF0ZWQ7XG4vLyBzbyB3ZSBjYW4gc3RhcnQgaW1wb3J0aW5nL2V4cG9ydGluZyB0aGUgY2xhc3NlcyB0aGF0IG5lZWQgdGhlbS5cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gR2FtZU9iamVjdC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdhbWVPYmplY3RQcm9wZXJ0aWVzIHtcbn1cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gSm9iLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJSm9iUHJvcGVydGllcyB7XG4gICAgLyoqXG4gICAgICogSG93IG1hbnkgY29tYmluZWQgcmVzb3VyY2VzIGEgdW5pdCB3aXRoIHRoaXMgSm9iIGNhbiBob2xkIGF0IG9uY2UuXG4gICAgICovXG4gICAgY2FycnlMaW1pdD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgZGFtYWdlIHRoaXMgSm9iIGRvZXMgcGVyIGF0dGFjay5cbiAgICAgKi9cbiAgICBkYW1hZ2U/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIHN0YXJ0aW5nIGhlYWx0aCB0aGlzIEpvYiBoYXMuXG4gICAgICovXG4gICAgaGVhbHRoPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBtb3ZlcyB0aGlzIEpvYiBjYW4gbWFrZSBwZXIgdHVybi5cbiAgICAgKi9cbiAgICBtb3Zlcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBKb2IgdGl0bGUuICdpbnRlcm4nLCAnbWFuYWdlcicsIG9yICdwaHlzaWNpc3QnLlxuICAgICAqL1xuICAgIHRpdGxlPzogXCJpbnRlcm5cIiB8IFwibWFuYWdlclwiIHwgXCJwaHlzaWNpc3RcIjtcblxufVxuXG4vKiogQWxsIHRoZSBwb3NzaWJsZSBwcm9wZXJ0aWVzIGZvciBhbiBNYWNoaW5lLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJTWFjaGluZVByb3BlcnRpZXMge1xuICAgIC8qKlxuICAgICAqIFdoYXQgdHlwZSBvZiBvcmUgdGhlIG1hY2hpbmUgdGFrZXMgaXQuIEFsc28gZGV0ZXJtaW5lcyB0aGUgdHlwZSBvZlxuICAgICAqIG1hdGVyaWFsIGl0IG91dHB1dHMuIChyZWRpdW0gb3IgYmx1ZWl1bSkuXG4gICAgICovXG4gICAgb3JlVHlwZT86IFwicmVkaXVtXCIgfCBcImJsdWVpdW1cIjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2Ygb3JlIHRoYXQgbmVlZHMgdG8gYmUgaW5wdXR0ZWQgaW50byB0aGUgbWFjaGluZSBmb3IgaXQgdG9cbiAgICAgKiBiZSB3b3JrZWQuXG4gICAgICovXG4gICAgcmVmaW5lSW5wdXQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIHJlZmluZWQgb3JlIHRoYXQgaXMgcmV0dXJuZWQgYWZ0ZXIgdGhlIG1hY2hpbmUgaGFzIGJlZW5cbiAgICAgKiBmdWxseSB3b3JrZWQuXG4gICAgICovXG4gICAgcmVmaW5lT3V0cHV0PzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB0aW1lcyB0aGlzIG1hY2hpbmUgbmVlZHMgdG8gYmUgd29ya2VkIHRvIHJlZmluZSBvcmUuXG4gICAgICovXG4gICAgcmVmaW5lVGltZT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRoaXMgTWFjaGluZSBpcyBvbi5cbiAgICAgKi9cbiAgICB0aWxlPzogVGlsZTtcblxuICAgIC8qKlxuICAgICAqIFRyYWNrcyBob3cgbWFueSB0aW1lcyB0aGlzIG1hY2hpbmUgaGFzIGJlZW4gd29ya2VkLiAoMCB0byByZWZpbmVUaW1lKS5cbiAgICAgKi9cbiAgICB3b3JrZWQ/OiBudW1iZXI7XG5cbn1cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gUGxheWVyLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGxheWVyUHJvcGVydGllcyB7XG4gICAgLyoqXG4gICAgICogV2hhdCB0eXBlIG9mIGNsaWVudCB0aGlzIGlzLCBlLmcuICdQeXRob24nLCAnSmF2YVNjcmlwdCcsIG9yIHNvbWUgb3RoZXJcbiAgICAgKiBsYW5ndWFnZS4gRm9yIHBvdGVudGlhbCBkYXRhIG1pbmluZyBwdXJwb3Nlcy5cbiAgICAgKi9cbiAgICBjbGllbnRUeXBlPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogRXZlcnkgZ2VuZXJhdG9yIFRpbGUgb3duZWQgYnkgdGhpcyBQbGF5ZXIuIChsaXN0ZWQgZnJvbSB0aGUgb3V0ZXIgZWRnZXNcbiAgICAgKiBpbndhcmQsIGZyb20gdG9wIHRvIGJvdHRvbSkuXG4gICAgICovXG4gICAgZ2VuZXJhdG9yVGlsZXM/OiBUaWxlW107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIGhlYXQgdGhpcyBQbGF5ZXIgaGFzLlxuICAgICAqL1xuICAgIGhlYXQ/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBsZWZ0IHRpbGwgYSBpbnRlcm4gc3Bhd25zLiAoMCB0byBzcGF3blRpbWUpLlxuICAgICAqL1xuICAgIGludGVyblNwYXduPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHBsYXllciBsb3N0IHRoZSBnYW1lIG9yIG5vdC5cbiAgICAgKi9cbiAgICBsb3N0PzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIGxlZnQgdGlsbCBhIG1hbmFnZXIgc3Bhd25zLiAoMCB0byBzcGF3blRpbWUpLlxuICAgICAqL1xuICAgIG1hbmFnZXJTcGF3bj86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBwbGF5ZXIuXG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoaXMgcGxheWVyJ3Mgb3Bwb25lbnQgaW4gdGhlIGdhbWUuXG4gICAgICovXG4gICAgb3Bwb25lbnQ/OiBQbGF5ZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBsZWZ0IHRpbGwgYSBwaHlzaWNpc3Qgc3Bhd25zLiAoMCB0byBzcGF3blRpbWUpLlxuICAgICAqL1xuICAgIHBoeXNpY2lzdFNwYXduPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBwcmVzc3VyZSB0aGlzIFBsYXllciBoYXMuXG4gICAgICovXG4gICAgcHJlc3N1cmU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSB0aGUgcGxheWVyIGxvc3QgdGhlIGdhbWUuXG4gICAgICovXG4gICAgcmVhc29uTG9zdD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIFRoZSByZWFzb24gd2h5IHRoZSBwbGF5ZXIgd29uIHRoZSBnYW1lLlxuICAgICAqL1xuICAgIHJlYXNvbldvbj86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFsbCB0aGUgdGlsZXMgdGhpcyBQbGF5ZXIncyB1bml0cyBjYW4gc3Bhd24gb24uIChsaXN0ZWQgZnJvbSB0aGUgb3V0ZXJcbiAgICAgKiBlZGdlcyBpbndhcmQsIGZyb20gdG9wIHRvIGJvdHRvbSkuXG4gICAgICovXG4gICAgc3Bhd25UaWxlcz86IFRpbGVbXTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgdGltZSAoaW4gbnMpIHJlbWFpbmluZyBmb3IgdGhpcyBBSSB0byBzZW5kIGNvbW1hbmRzLlxuICAgICAqL1xuICAgIHRpbWVSZW1haW5pbmc/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBFdmVyeSBVbml0IG93bmVkIGJ5IHRoaXMgUGxheWVyLlxuICAgICAqL1xuICAgIHVuaXRzPzogVW5pdFtdO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHBsYXllciB3b24gdGhlIGdhbWUgb3Igbm90LlxuICAgICAqL1xuICAgIHdvbj86IGJvb2xlYW47XG5cbn1cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gVGlsZS4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbGVQcm9wZXJ0aWVzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIGJsdWVpdW0gb24gdGhpcyB0aWxlLlxuICAgICAqL1xuICAgIGJsdWVpdW0/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIGJsdWVpdW0gb3JlIG9uIHRoaXMgdGlsZS5cbiAgICAgKi9cbiAgICBibHVlaXVtT3JlPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogKFZpc3VhbGl6ZXIgb25seSkgRGlmZmVyZW50IHRpbGUgdHlwZXMsIGNyYWNrZWQsIHNsaWdodGx5IGRpcnR5LCBldGMuXG4gICAgICogVGhpcyBoYXMgbm8gZWZmZWN0IG9uIGdhbWVwbGF5LCBidXQgZmVlbCBmcmVlIHRvIHVzZSBpdCBpZiB5b3Ugd2FudC5cbiAgICAgKi9cbiAgICBkZWNvcmF0aW9uPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRpcmVjdGlvbiBvZiBhIGNvbnZleW9yIGJlbHQgKCdibGFuaycsICdub3J0aCcsICdlYXN0JywgJ3NvdXRoJywgb3JcbiAgICAgKiAnd2VzdCcpLiBibGFuayBtZWFucyBjb252ZXlvciBkb2Vzbid0IG1vdmUuXG4gICAgICovXG4gICAgZGlyZWN0aW9uPzogXCJibGFua1wiIHwgXCJub3J0aFwiIHwgXCJlYXN0XCIgfCBcInNvdXRoXCIgfCBcIndlc3RcIjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSB0aWxlIGlzIGEgd2FsbC5cbiAgICAgKi9cbiAgICBpc1dhbGw/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogVGhlIE1hY2hpbmUgb24gdGhpcyBUaWxlIGlmIHByZXNlbnQsIG90aGVyd2lzZSB1bmRlZmluZWQuXG4gICAgICovXG4gICAgbWFjaGluZT86IE1hY2hpbmU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3duZXIgb2YgdGhpcyBUaWxlLCBvciB1bmRlZmluZWQgaWYgb3duZWQgYnkgbm8tb25lLiBPbmx5IGZvclxuICAgICAqIGdlbmVyYXRvcnMgYW5kIHNwYXduIGFyZWFzLlxuICAgICAqL1xuICAgIG93bmVyPzogUGxheWVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiByZWRpdW0gb24gdGhpcyB0aWxlLlxuICAgICAqL1xuICAgIHJlZGl1bT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgcmVkaXVtIG9yZSBvbiB0aGlzIHRpbGUuXG4gICAgICovXG4gICAgcmVkaXVtT3JlPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdG8gdGhlICdFYXN0JyBvZiB0aGlzIG9uZSAoeCsxLCB5KS4gVW5kZWZpbmVkIGlmIG91dCBvZiBib3VuZHNcbiAgICAgKiBvZiB0aGUgbWFwLlxuICAgICAqL1xuICAgIHRpbGVFYXN0PzogVGlsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRvIHRoZSAnTm9ydGgnIG9mIHRoaXMgb25lICh4LCB5LTEpLiBVbmRlZmluZWQgaWYgb3V0IG9mIGJvdW5kc1xuICAgICAqIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgdGlsZU5vcnRoPzogVGlsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRvIHRoZSAnU291dGgnIG9mIHRoaXMgb25lICh4LCB5KzEpLiBVbmRlZmluZWQgaWYgb3V0IG9mIGJvdW5kc1xuICAgICAqIG9mIHRoZSBtYXAuXG4gICAgICovXG4gICAgdGlsZVNvdXRoPzogVGlsZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRvIHRoZSAnV2VzdCcgb2YgdGhpcyBvbmUgKHgtMSwgeSkuIFVuZGVmaW5lZCBpZiBvdXQgb2YgYm91bmRzXG4gICAgICogb2YgdGhlIG1hcC5cbiAgICAgKi9cbiAgICB0aWxlV2VzdD86IFRpbGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBUaWxlIHRoaXMgaXMgKCdub3JtYWwnLCAnZ2VuZXJhdG9yJywgJ2NvbnZleW9yJywgb3JcbiAgICAgKiAnc3Bhd24nKS5cbiAgICAgKi9cbiAgICB0eXBlPzogXCJub3JtYWxcIiB8IFwiZ2VuZXJhdG9yXCIgfCBcImNvbnZleW9yXCIgfCBcInNwYXduXCI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgVW5pdCBvbiB0aGlzIFRpbGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHVuZGVmaW5lZC5cbiAgICAgKi9cbiAgICB1bml0PzogVW5pdDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB4IChob3Jpem9udGFsKSBwb3NpdGlvbiBvZiB0aGlzIFRpbGUuXG4gICAgICovXG4gICAgeD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5ICh2ZXJ0aWNhbCkgcG9zaXRpb24gb2YgdGhpcyBUaWxlLlxuICAgICAqL1xuICAgIHk/OiBudW1iZXI7XG5cbn1cblxuLyoqIEFsbCB0aGUgcG9zc2libGUgcHJvcGVydGllcyBmb3IgYW4gVW5pdC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVVuaXRQcm9wZXJ0aWVzIHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIFVuaXQgaGFzIHBlcmZvcm1lZCBpdHMgYWN0aW9uIHRoaXMgdHVybi5cbiAgICAgKi9cbiAgICBhY3RlZD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIGJsdWVpdW0gY2FycmllZCBieSB0aGlzIHVuaXQuICgwIHRvIGpvYiBjYXJyeSBjYXBhY2l0eSAtXG4gICAgICogb3RoZXIgY2FycmllZCBpdGVtcykuXG4gICAgICovXG4gICAgYmx1ZWl1bT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgYmx1ZWl1bSBvcmUgY2FycmllZCBieSB0aGlzIHVuaXQuICgwIHRvIGpvYiBjYXJyeSBjYXBhY2l0eVxuICAgICAqIC0gb3RoZXIgY2FycmllZCBpdGVtcykuXG4gICAgICovXG4gICAgYmx1ZWl1bU9yZT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSByZW1haW5pbmcgaGVhbHRoIG9mIGEgdW5pdC5cbiAgICAgKi9cbiAgICBoZWFsdGg/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSm9iIHRoaXMgVW5pdCBoYXMuXG4gICAgICovXG4gICAgam9iPzogSm9iO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBtb3ZlcyB0aGlzIHVuaXQgaGFzIGxlZnQgdGhpcyB0dXJuLlxuICAgICAqL1xuICAgIG1vdmVzPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFBsYXllciB0aGF0IG93bnMgYW5kIGNhbiBjb250cm9sIHRoaXMgVW5pdC5cbiAgICAgKi9cbiAgICBvd25lcj86IFBsYXllcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgcmVkaXVtIGNhcnJpZWQgYnkgdGhpcyB1bml0LiAoMCB0byBqb2IgY2FycnkgY2FwYWNpdHkgLVxuICAgICAqIG90aGVyIGNhcnJpZWQgaXRlbXMpLlxuICAgICAqL1xuICAgIHJlZGl1bT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgcmVkaXVtIG9yZSBjYXJyaWVkIGJ5IHRoaXMgdW5pdC4gKDAgdG8gam9iIGNhcnJ5IGNhcGFjaXR5XG4gICAgICogLSBvdGhlciBjYXJyaWVkIGl0ZW1zKS5cbiAgICAgKi9cbiAgICByZWRpdW1PcmU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBEdXJhdGlvbiBvZiBzdHVuIGltbXVuaXR5LiAoMCB0byB0aW1lSW1tdW5lKS5cbiAgICAgKi9cbiAgICBzdHVuSW1tdW5lPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gdGhlIHVuaXQgaXMgc3R1bm5lZC4gKDAgdG8gdGhlIGdhbWUgY29uc3RhbnQgc3R1blRpbWUpLlxuICAgICAqL1xuICAgIHN0dW5UaW1lPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdGhpcyBVbml0IGlzIG9uLlxuICAgICAqL1xuICAgIHRpbGU/OiBUaWxlO1xuXG59XG5cbi8qKlxuICogQXJndW1lbnQgb3ZlcnJpZGVzIGZvciBVbml0J3MgYWN0IGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZiB0aGlzXG4gKiBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmUgdXNlZFxuICogaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVW5pdEFjdEFyZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aWxlIHRoZSB1bml0IGFjdHMgb24uXG4gICAgICovXG4gICAgdGlsZT86IFRpbGU7XG59XG5cbi8qKlxuICogQXJndW1lbnQgb3ZlcnJpZGVzIGZvciBVbml0J3MgYXR0YWNrIGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZlxuICogdGhpcyBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmVcbiAqIHVzZWQgaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVW5pdEF0dGFja0FyZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSBUaWxlIHRvIGF0dGFjay5cbiAgICAgKi9cbiAgICB0aWxlPzogVGlsZTtcbn1cblxuLyoqXG4gKiBBcmd1bWVudCBvdmVycmlkZXMgZm9yIFVuaXQncyBkcm9wIGZ1bmN0aW9uLiBJZiB5b3UgcmV0dXJuIGFuIG9iamVjdCBvZiB0aGlzXG4gKiBpbnRlcmZhY2UgZnJvbSB0aGUgaW52YWxpZGF0ZSBmdW5jdGlvbnMsIHRoZSB2YWx1ZShzKSB5b3Ugc2V0IHdpbGwgYmUgdXNlZFxuICogaW4gdGhlIGFjdHVhbCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVW5pdERyb3BBcmdzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGlsZSB0aGUgbWF0ZXJpYWxzIHdpbGwgYmUgZHJvcHBlZCBvbi5cbiAgICAgKi9cbiAgICB0aWxlPzogVGlsZTtcbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIG1hdGVyaWFscyB0byBkcm9wcGVkLiBBbW91bnRzIDw9IDAgd2lsbCBkcm9wIGFsbCB0aGVcbiAgICAgKiBtYXRlcmlhbHMuXG4gICAgICovXG4gICAgYW1vdW50PzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRoZSBtYXRlcmlhbCB0aGUgdW5pdCB3aWxsIGRyb3AuICdyZWRpdW0nLCAnYmx1ZWl1bScsICdyZWRpdW0gb3JlJywgb3JcbiAgICAgKiAnYmx1ZWl1bSBvcmUnLlxuICAgICAqL1xuICAgIG1hdGVyaWFsPzogXCJyZWRpdW0gb3JlXCIgfCBcInJlZGl1bVwiIHwgXCJibHVlaXVtXCIgfCBcImJsdWVpdW0gb3JlXCI7XG59XG5cbi8qKlxuICogQXJndW1lbnQgb3ZlcnJpZGVzIGZvciBVbml0J3MgbW92ZSBmdW5jdGlvbi4gSWYgeW91IHJldHVybiBhbiBvYmplY3Qgb2YgdGhpc1xuICogaW50ZXJmYWNlIGZyb20gdGhlIGludmFsaWRhdGUgZnVuY3Rpb25zLCB0aGUgdmFsdWUocykgeW91IHNldCB3aWxsIGJlIHVzZWRcbiAqIGluIHRoZSBhY3R1YWwgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVVuaXRNb3ZlQXJncyB7XG4gICAgLyoqXG4gICAgICogVGhlIFRpbGUgdGhpcyBVbml0IHNob3VsZCBtb3ZlIHRvLlxuICAgICAqL1xuICAgIHRpbGU/OiBUaWxlO1xufVxuXG4vKipcbiAqIEFyZ3VtZW50IG92ZXJyaWRlcyBmb3IgVW5pdCdzIHBpY2t1cCBmdW5jdGlvbi4gSWYgeW91IHJldHVybiBhbiBvYmplY3Qgb2ZcbiAqIHRoaXMgaW50ZXJmYWNlIGZyb20gdGhlIGludmFsaWRhdGUgZnVuY3Rpb25zLCB0aGUgdmFsdWUocykgeW91IHNldCB3aWxsIGJlXG4gKiB1c2VkIGluIHRoZSBhY3R1YWwgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVVuaXRQaWNrdXBBcmdzIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdGlsZSB0aGUgbWF0ZXJpYWxzIHdpbGwgYmUgcGlja2VkIHVwIGZyb20uXG4gICAgICovXG4gICAgdGlsZT86IFRpbGU7XG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBtYXRlcmlhbHMgdG8gcGljayB1cC4gQW1vdW50cyA8PSAwIHdpbGwgcGljayB1cCBhbGwgdGhlXG4gICAgICogbWF0ZXJpYWxzIHRoYXQgdGhlIHVuaXQgY2FuLlxuICAgICAqL1xuICAgIGFtb3VudD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgbWF0ZXJpYWwgdGhlIHVuaXQgd2lsbCBwaWNrIHVwLiAncmVkaXVtJywgJ2JsdWVpdW0nLCAncmVkaXVtIG9yZScsXG4gICAgICogb3IgJ2JsdWVpdW0gb3JlJy5cbiAgICAgKi9cbiAgICBtYXRlcmlhbD86IFwicmVkaXVtIG9yZVwiIHwgXCJyZWRpdW1cIiB8IFwiYmx1ZWl1bVwiIHwgXCJibHVlaXVtIG9yZVwiO1xufVxuXG5leHBvcnQgKiBmcm9tIFwiLi9nYW1lLW9iamVjdFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vam9iXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9tYWNoaW5lXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9wbGF5ZXJcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RpbGVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3VuaXRcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dhbWVcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2dhbWUtbWFuYWdlclwiO1xuZXhwb3J0ICogZnJvbSBcIi4vYWlcIjtcblxuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuL2dhbWUtb2JqZWN0XCI7XG5pbXBvcnQgeyBKb2IgfSBmcm9tIFwiLi9qb2JcIjtcbmltcG9ydCB7IE1hY2hpbmUgfSBmcm9tIFwiLi9tYWNoaW5lXCI7XG5pbXBvcnQgeyBQbGF5ZXIgfSBmcm9tIFwiLi9wbGF5ZXJcIjtcbmltcG9ydCB7IFRpbGUgfSBmcm9tIFwiLi90aWxlXCI7XG5pbXBvcnQgeyBVbml0IH0gZnJvbSBcIi4vdW5pdFwiO1xuXG5pbXBvcnQgeyBBSSB9IGZyb20gXCIuL2FpXCI7XG5pbXBvcnQgeyBOZXd0b25pYW5HYW1lIH0gZnJvbSBcIi4vZ2FtZVwiO1xuaW1wb3J0IHsgTmV3dG9uaWFuR2FtZU1hbmFnZXIgfSBmcm9tIFwiLi9nYW1lLW1hbmFnZXJcIjtcbmltcG9ydCB7IE5ld3RvbmlhbkdhbWVTZXR0aW5nc01hbmFnZXIgfSBmcm9tIFwiLi9nYW1lLXNldHRpbmdzXCI7XG5cbi8qKiBUaGUgYXJndW1lbnRzIHVzZWQgdG8gY29uc3RydWN0IGEgSm9iICovXG5leHBvcnQgdHlwZSBKb2JBcmdzID0gRmlyc3RBcmd1bWVudEZyb21Db25zdHJ1Y3Rvcjx0eXBlb2YgSm9iPjtcblxuLyoqIFRoZSBhcmd1bWVudHMgdXNlZCB0byBjb25zdHJ1Y3QgYSBNYWNoaW5lICovXG5leHBvcnQgdHlwZSBNYWNoaW5lQXJncyA9IEZpcnN0QXJndW1lbnRGcm9tQ29uc3RydWN0b3I8dHlwZW9mIE1hY2hpbmU+O1xuXG4vKiogVGhlIGFyZ3VtZW50cyB1c2VkIHRvIGNvbnN0cnVjdCBhIFRpbGUgKi9cbmV4cG9ydCB0eXBlIFRpbGVBcmdzID0gRmlyc3RBcmd1bWVudEZyb21Db25zdHJ1Y3Rvcjx0eXBlb2YgVGlsZT47XG5cbi8qKiBUaGUgYXJndW1lbnRzIHVzZWQgdG8gY29uc3RydWN0IGEgVW5pdCAqL1xuZXhwb3J0IHR5cGUgVW5pdEFyZ3MgPSBGaXJzdEFyZ3VtZW50RnJvbUNvbnN0cnVjdG9yPHR5cGVvZiBVbml0PjtcblxuLyoqXG4gKiBUaGUgZmFjdG9yeSB0aGF0ICoqbXVzdCoqIGJlIHVzZWQgdG8gY3JlYXRlIGFueSBnYW1lIG9iamVjdHMgaW5cbiAqIHRoZSBOZXd0b25pYW4gZ2FtZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE5ld3RvbmlhbkdhbWVPYmplY3RGYWN0b3J5IGV4dGVuZHMgQmFzZUdhbWVPYmplY3RGYWN0b3J5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEpvYiBpbiB0aGUgR2FtZSBhbmQgdHJhY2tzIGl0IGZvciBhbGwgcGxheWVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gRGF0YSBhYm91dCB0aGUgSm9iIHRvIHNldC4gQW55IGtleXMgbWF0Y2hpbmcgYSBwcm9wZXJ0eSBpblxuICAgICAqIHRoZSBnYW1lIG9iamVjdCdzIGNsYXNzIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgZm9yIHlvdS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBKb2IgaG9va2VkIHVwIGluIHRoZSBnYW1lIGFuZCByZWFkeSBmb3IgeW91IHRvIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgam9iPFQgZXh0ZW5kcyBKb2JBcmdzPihcbiAgICAgICAgYXJnczogUmVhZG9ubHk8VD4sXG4gICAgKTogSm9iICYgVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUdhbWVPYmplY3QoXCJKb2JcIiwgSm9iLCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IE1hY2hpbmUgaW4gdGhlIEdhbWUgYW5kIHRyYWNrcyBpdCBmb3IgYWxsIHBsYXllcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYXJncyAtIERhdGEgYWJvdXQgdGhlIE1hY2hpbmUgdG8gc2V0LiBBbnkga2V5cyBtYXRjaGluZyBhXG4gICAgICogcHJvcGVydHkgaW4gdGhlIGdhbWUgb2JqZWN0J3MgY2xhc3Mgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHNldCBmb3IgeW91LlxuICAgICAqIEByZXR1cm5zIEEgbmV3IE1hY2hpbmUgaG9va2VkIHVwIGluIHRoZSBnYW1lIGFuZCByZWFkeSBmb3IgeW91IHRvIHVzZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWFjaGluZTxUIGV4dGVuZHMgTWFjaGluZUFyZ3M+KFxuICAgICAgICBhcmdzOiBSZWFkb25seTxUPixcbiAgICApOiBNYWNoaW5lICYgVCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUdhbWVPYmplY3QoXCJNYWNoaW5lXCIsIE1hY2hpbmUsIGFyZ3MpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVGlsZSBpbiB0aGUgR2FtZSBhbmQgdHJhY2tzIGl0IGZvciBhbGwgcGxheWVycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhcmdzIC0gRGF0YSBhYm91dCB0aGUgVGlsZSB0byBzZXQuIEFueSBrZXlzIG1hdGNoaW5nIGEgcHJvcGVydHlcbiAgICAgKiBpbiB0aGUgZ2FtZSBvYmplY3QncyBjbGFzcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgc2V0IGZvciB5b3UuXG4gICAgICogQHJldHVybnMgQSBuZXcgVGlsZSBob29rZWQgdXAgaW4gdGhlIGdhbWUgYW5kIHJlYWR5IGZvciB5b3UgdG8gdXNlLlxuICAgICAqL1xuICAgIHB1YmxpYyB0aWxlPFQgZXh0ZW5kcyBUaWxlQXJncz4oXG4gICAgICAgIGFyZ3M6IFJlYWRvbmx5PFQ+LFxuICAgICk6IFRpbGUgJiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlR2FtZU9iamVjdChcIlRpbGVcIiwgVGlsZSwgYXJncyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBVbml0IGluIHRoZSBHYW1lIGFuZCB0cmFja3MgaXQgZm9yIGFsbCBwbGF5ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFyZ3MgLSBEYXRhIGFib3V0IHRoZSBVbml0IHRvIHNldC4gQW55IGtleXMgbWF0Y2hpbmcgYSBwcm9wZXJ0eVxuICAgICAqIGluIHRoZSBnYW1lIG9iamVjdCdzIGNsYXNzIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgZm9yIHlvdS5cbiAgICAgKiBAcmV0dXJucyBBIG5ldyBVbml0IGhvb2tlZCB1cCBpbiB0aGUgZ2FtZSBhbmQgcmVhZHkgZm9yIHlvdSB0byB1c2UuXG4gICAgICovXG4gICAgcHVibGljIHVuaXQ8VCBleHRlbmRzIFVuaXRBcmdzPihcbiAgICAgICAgYXJnczogUmVhZG9ubHk8VD4sXG4gICAgKTogVW5pdCAmIFQge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVHYW1lT2JqZWN0KFwiVW5pdFwiLCBVbml0LCBhcmdzKTtcbiAgICB9XG5cbn1cblxuLyoqXG4gKiBUaGUgc2hhcmVkIG5hbWVzcGFjZSBmb3IgTmV3dG9uaWFuIHRoYXQgaXMgdXNlZCB0b1xuICogaW5pdGlhbGl6ZSBlYWNoIGdhbWUgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBOYW1lc3BhY2UgPSBtYWtlTmFtZXNwYWNlKHtcbiAgICBBSSxcbiAgICBHYW1lOiBOZXd0b25pYW5HYW1lLFxuICAgIEdhbWVNYW5hZ2VyOiBOZXd0b25pYW5HYW1lTWFuYWdlcixcbiAgICBHYW1lT2JqZWN0RmFjdG9yeTogTmV3dG9uaWFuR2FtZU9iamVjdEZhY3RvcnksXG4gICAgR2FtZVNldHRpbmdzTWFuYWdlcjogTmV3dG9uaWFuR2FtZVNldHRpbmdzTWFuYWdlcixcbiAgICBQbGF5ZXIsXG5cbiAgICAvLyBUaGVzZSBhcmUgZ2VuZXJhdGVkIG1ldGFkYXRhIHRoYXQgYWxsb3cgZGVsdGEtbWVyZ2luZyB2YWx1ZXMgZnJvbVxuICAgIC8vIGNsaWVudHMuXG4gICAgLy8gVGhleSBhcmUgbmV2ZXIgaW50ZW5kZWQgdG8gYmUgZGlyZWN0bHkgaW50ZXJmYWNlZCB3aXRoIG91dHNpZGUgb2YgdGhlXG4gICAgLy8gQ2VydmVhdSBjb3JlIGRldmVsb3BlcnMuXG4gICAgZ2FtZU5hbWU6IFwiTmV3dG9uaWFuXCIsXG4gICAgZ2FtZVNldHRpbmdzTWFuYWdlcjogbmV3IE5ld3RvbmlhbkdhbWVTZXR0aW5nc01hbmFnZXIoKSxcbiAgICBnYW1lT2JqZWN0c1NjaGVtYToge1xuICAgICAgICBBSToge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgICAgIHJ1blR1cm46IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIEdhbWU6IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGxheWVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBQbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRUdXJuOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2FtZU9iamVjdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZGljdGlvbmFyeVwiLFxuICAgICAgICAgICAgICAgICAgICBrZXlUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IEdhbWVPYmplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnRlcm5DYXA6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBqb2JzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IEpvYixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hY2hpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IE1hY2hpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYW5hZ2VyQ2FwOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFwSGVpZ2h0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWFwV2lkdGg6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFNwYXduOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbWF4VHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwaHlzaWNpc3RDYXA6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlZmluZWRWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlZ2VuZXJhdGVSYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImZsb2F0XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXNzaW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3Bhd25UaW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3R1blRpbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aWxlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGltZUFkZGVkUGVyVHVybjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbWVJbW11bmU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1bml0czoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVHlwZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBVbml0LFxuICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmljdG9yeUFtb3VudDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgR2FtZU9iamVjdDoge1xuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGdhbWVPYmplY3ROYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb2dzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgICAgIGxvZzoge1xuICAgICAgICAgICAgICAgICAgICBhcmdzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJ2b2lkXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIEpvYjoge1xuICAgICAgICAgICAgcGFyZW50Q2xhc3NOYW1lOiBcIkdhbWVPYmplY3RcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBjYXJyeUxpbWl0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGFtYWdlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaGVhbHRoOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbW92ZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBcImludGVyblwiLFxuICAgICAgICAgICAgICAgICAgICBsaXRlcmFsczogW1wiaW50ZXJuXCIsIFwibWFuYWdlclwiLCBcInBoeXNpY2lzdFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgTWFjaGluZToge1xuICAgICAgICAgICAgcGFyZW50Q2xhc3NOYW1lOiBcIkdhbWVPYmplY3RcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBvcmVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFwicmVkaXVtXCIsXG4gICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBbXCJyZWRpdW1cIiwgXCJibHVlaXVtXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVmaW5lSW5wdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWZpbmVPdXRwdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZWZpbmVUaW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgd29ya2VkOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb25zOiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBQbGF5ZXI6IHtcbiAgICAgICAgICAgIHBhcmVudENsYXNzTmFtZTogXCJHYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgY2xpZW50VHlwZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGdlbmVyYXRvclRpbGVzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWF0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW50ZXJuU3Bhd246IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsb3N0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1hbmFnZXJTcGF3bjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHBvbmVudDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogUGxheWVyLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwaHlzaWNpc3RTcGF3bjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHByZXNzdXJlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVhc29uTG9zdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHJlYXNvbldvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHNwYXduVGlsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwibGlzdFwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZVR5cGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZmxvYXRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHVuaXRzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImxpc3RcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVUeXBlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFVuaXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB3b246IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb25zOiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBUaWxlOiB7XG4gICAgICAgICAgICBwYXJlbnRDbGFzc05hbWU6IFwiR2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgIGJsdWVpdW06IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiaW50XCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBibHVlaXVtT3JlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVjb3JhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBcImJsYW5rXCIsXG4gICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBbXCJibGFua1wiLCBcIm5vcnRoXCIsIFwiZWFzdFwiLCBcInNvdXRoXCIsIFwid2VzdFwiXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlzV2FsbDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYWNoaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBNYWNoaW5lLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG93bmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBQbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVkaXVtOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVkaXVtT3JlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZUVhc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiZ2FtZU9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZU5vcnRoOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRpbGVTb3V0aDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0aWxlV2VzdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFwibm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBbXCJub3JtYWxcIiwgXCJnZW5lcmF0b3JcIiwgXCJjb252ZXlvclwiLCBcInNwYXduXCJdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdW5pdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVW5pdCxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB4OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uczoge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgVW5pdDoge1xuICAgICAgICAgICAgcGFyZW50Q2xhc3NOYW1lOiBcIkdhbWVPYmplY3RcIixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBhY3RlZDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBibHVlaXVtOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYmx1ZWl1bU9yZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWx0aDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGpvYjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogSm9iLFxuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtb3Zlczoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG93bmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBQbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVkaXVtOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmVkaXVtT3JlOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3R1bkltbXVuZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0dW5UaW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGlsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGdhbWVPYmplY3RDbGFzczogVGlsZSxcbiAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBhY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWU6IFwidGlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZFZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXR0YWNrOiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcInRpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRyb3A6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWU6IFwidGlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcImFtb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImludFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcIm1hdGVyaWFsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBcInJlZGl1bSBvcmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXRlcmFsczogW1wicmVkaXVtIG9yZVwiLCBcInJlZGl1bVwiLCBcImJsdWVpdW1cIiwgXCJibHVlaXVtIG9yZVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRWYWx1ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHJldHVybnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG1vdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJnczogW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ05hbWU6IFwidGlsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcImdhbWVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYW1lT2JqZWN0Q2xhc3M6IFRpbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZFZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGlja3VwOiB7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdOYW1lOiBcInRpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJnYW1lT2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZU9iamVjdENsYXNzOiBUaWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGxhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJhbW91bnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJpbnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnTmFtZTogXCJtYXRlcmlhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVOYW1lOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogXCJyZWRpdW0gb3JlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHM6IFtcInJlZGl1bSBvcmVcIiwgXCJyZWRpdW1cIiwgXCJibHVlaXVtXCIsIFwiYmx1ZWl1bSBvcmVcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkVmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlTmFtZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBnYW1lVmVyc2lvbjogXCI3YzE5ZjkwOWVlNWZhYTBhYzNmYWY0ZTk4OTAzMmI1YTM3YmE5NGFlYjVkNmFlNzY1NGExNWEyYmIxNDAxYmJlXCIsXG59KTtcbiJdfQ==