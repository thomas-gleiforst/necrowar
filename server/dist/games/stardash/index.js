"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const mixed = base2;
/** The base AI class for the Stardash game will mixin logic. */
class BaseStardashAI extends mixed.AI {
}
/** The base Game class for the Stardash game will mixin logic. */
class BaseStardashGame extends mixed.Game {
}
/** The base GameManager class for the Stardash game will mixin logic. */
class BaseStardashGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Stardash game will mixin logic. */
class BaseStardashGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Stardash game will mixin logic. */
class BaseStardashGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseStardashAI,
    Game: BaseStardashGame,
    GameManager: BaseStardashGameManager,
    GameObject: BaseStardashGameObject,
    GameSettings: BaseStardashGameSettings,
};
tslib_1.__exportStar(require("./body"), exports);
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./job"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./projectile"), exports);
tslib_1.__exportStar(require("./unit"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const body_1 = require("./body");
const game_object_1 = require("./game-object");
const job_1 = require("./job");
const player_1 = require("./player");
const projectile_1 = require("./projectile");
const unit_1 = require("./unit");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Stardash game.
 */
class StardashGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Body in the Game and tracks it for all players.
     *
     * @param args - Data about the Body to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Body hooked up in the game and ready for you to use.
     */
    body(args) {
        return this.createGameObject("Body", body_1.Body, args);
    }
    /**
     * Creates a new Job in the Game and tracks it for all players.
     *
     * @param args - Data about the Job to set. Any keys matching a property in
     * the game object's class will be automatically set for you.
     * @returns A new Job hooked up in the game and ready for you to use.
     */
    job(args) {
        return this.createGameObject("Job", job_1.Job, args);
    }
    /**
     * Creates a new Projectile in the Game and tracks it for all players.
     *
     * @param args - Data about the Projectile to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Projectile hooked up in the game and ready for you to
     * use.
     */
    projectile(args) {
        return this.createGameObject("Projectile", projectile_1.Projectile, args);
    }
    /**
     * Creates a new Unit in the Game and tracks it for all players.
     *
     * @param args - Data about the Unit to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Unit hooked up in the game and ready for you to use.
     */
    unit(args) {
        return this.createGameObject("Unit", unit_1.Unit, args);
    }
}
exports.StardashGameObjectFactory = StardashGameObjectFactory;
/**
 * The shared namespace for Stardash that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.StardashGame,
    GameManager: game_manager_1.StardashGameManager,
    GameObjectFactory: StardashGameObjectFactory,
    GameSettingsManager: game_settings_1.StardashGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Stardash",
    gameSettingsManager: new game_settings_1.StardashGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                bodies: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: body_1.Body,
                        nullable: false,
                    },
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                dashCost: {
                    typeName: "int",
                },
                dashDistance: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                genariumValue: {
                    typeName: "float",
                },
                jobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: job_1.Job,
                        nullable: false,
                    },
                },
                legendariumValue: {
                    typeName: "float",
                },
                maxAsteroid: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                minAsteroid: {
                    typeName: "int",
                },
                miningSpeed: {
                    typeName: "int",
                },
                mythiciteAmount: {
                    typeName: "float",
                },
                orbitsProtected: {
                    typeName: "int",
                },
                oreRarityGenarium: {
                    typeName: "float",
                },
                oreRarityLegendarium: {
                    typeName: "float",
                },
                oreRarityRarium: {
                    typeName: "float",
                },
                planetEnergyCap: {
                    typeName: "int",
                },
                planetRechargeRate: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                projectileRadius: {
                    typeName: "int",
                },
                projectileSpeed: {
                    typeName: "int",
                },
                projectiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: projectile_1.Projectile,
                        nullable: false,
                    },
                },
                rariumValue: {
                    typeName: "float",
                },
                regenerateRate: {
                    typeName: "float",
                },
                session: {
                    typeName: "string",
                },
                shipRadius: {
                    typeName: "int",
                },
                sizeX: {
                    typeName: "int",
                },
                sizeY: {
                    typeName: "int",
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                turnsToOrbit: {
                    typeName: "int",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
            },
            functions: {},
        },
        Body: {
            parentClassName: "GameObject",
            attributes: {
                amount: {
                    typeName: "int",
                },
                bodyType: {
                    typeName: "string",
                    defaultValue: "planet",
                    literals: ["planet", "asteroid", "sun"],
                },
                materialType: {
                    typeName: "string",
                    defaultValue: "none",
                    literals: ["none", "genarium", "rarium", "legendarium", "mythicite"],
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                radius: {
                    typeName: "float",
                },
                x: {
                    typeName: "float",
                },
                y: {
                    typeName: "float",
                },
            },
            functions: {
                nextX: {
                    args: [
                        {
                            argName: "num",
                            typeName: "int",
                        },
                    ],
                    invalidValue: -1,
                    returns: {
                        typeName: "int",
                    },
                },
                nextY: {
                    args: [
                        {
                            argName: "num",
                            typeName: "int",
                        },
                    ],
                    invalidValue: -1,
                    returns: {
                        typeName: "int",
                    },
                },
                spawn: {
                    args: [
                        {
                            argName: "x",
                            typeName: "float",
                        },
                        {
                            argName: "y",
                            typeName: "float",
                        },
                        {
                            argName: "title",
                            typeName: "string",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Job: {
            parentClassName: "GameObject",
            attributes: {
                carryLimit: {
                    typeName: "int",
                },
                damage: {
                    typeName: "int",
                },
                energy: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                range: {
                    typeName: "int",
                },
                shield: {
                    typeName: "int",
                },
                title: {
                    typeName: "string",
                    defaultValue: "corvette",
                    literals: ["corvette", "missileboat", "martyr", "transport", "miner"],
                },
                unitCost: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                homeBase: {
                    typeName: "gameObject",
                    gameObjectClass: body_1.Body,
                    nullable: false,
                },
                lost: {
                    typeName: "boolean",
                },
                money: {
                    typeName: "int",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                projectiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: projectile_1.Projectile,
                        nullable: false,
                    },
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                victoryPoints: {
                    typeName: "int",
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Projectile: {
            parentClassName: "GameObject",
            attributes: {
                energy: {
                    typeName: "int",
                },
                fuel: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                target: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: false,
                },
                x: {
                    typeName: "float",
                },
                y: {
                    typeName: "float",
                },
            },
            functions: {},
        },
        Unit: {
            parentClassName: "GameObject",
            attributes: {
                acted: {
                    typeName: "boolean",
                },
                dashX: {
                    typeName: "float",
                },
                dashY: {
                    typeName: "float",
                },
                energy: {
                    typeName: "int",
                },
                genarium: {
                    typeName: "int",
                },
                isBusy: {
                    typeName: "boolean",
                },
                job: {
                    typeName: "gameObject",
                    gameObjectClass: job_1.Job,
                    nullable: false,
                },
                legendarium: {
                    typeName: "int",
                },
                moves: {
                    typeName: "float",
                },
                mythicite: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                protector: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: true,
                },
                rarium: {
                    typeName: "int",
                },
                shield: {
                    typeName: "int",
                },
                x: {
                    typeName: "float",
                },
                y: {
                    typeName: "float",
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "enemy",
                            typeName: "gameObject",
                            gameObjectClass: unit_1.Unit,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                dash: {
                    args: [
                        {
                            argName: "x",
                            typeName: "float",
                        },
                        {
                            argName: "y",
                            typeName: "float",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                mine: {
                    args: [
                        {
                            argName: "body",
                            typeName: "gameObject",
                            gameObjectClass: body_1.Body,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "x",
                            typeName: "float",
                        },
                        {
                            argName: "y",
                            typeName: "float",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                safe: {
                    args: [
                        {
                            argName: "x",
                            typeName: "float",
                        },
                        {
                            argName: "y",
                            typeName: "float",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                shootdown: {
                    args: [
                        {
                            argName: "missile",
                            typeName: "gameObject",
                            gameObjectClass: projectile_1.Projectile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                transfer: {
                    args: [
                        {
                            argName: "unit",
                            typeName: "gameObject",
                            gameObjectClass: unit_1.Unit,
                            nullable: false,
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                        },
                        {
                            argName: "material",
                            typeName: "string",
                            defaultValue: "genarium",
                            literals: ["genarium", "rarium", "legendarium", "mythicite"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
    },
    gameVersion: "0fa378e83ac567ebdf3e9805d3f130023f936e2740acda173d238b37f2b5d541",
});
//# sourceMappingURL=data:application/json;base64,