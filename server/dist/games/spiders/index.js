"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const mixed = base2;
/** The base AI class for the Spiders game will mixin logic. */
class BaseSpidersAI extends mixed.AI {
}
/** The base Game class for the Spiders game will mixin logic. */
class BaseSpidersGame extends mixed.Game {
}
/** The base GameManager class for the Spiders game will mixin logic. */
class BaseSpidersGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Spiders game will mixin logic. */
class BaseSpidersGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Spiders game will mixin logic. */
class BaseSpidersGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseSpidersAI,
    Game: BaseSpidersGame,
    GameManager: BaseSpidersGameManager,
    GameObject: BaseSpidersGameObject,
    GameSettings: BaseSpidersGameSettings,
};
tslib_1.__exportStar(require("./brood-mother"), exports);
tslib_1.__exportStar(require("./cutter"), exports);
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./nest"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./spider"), exports);
tslib_1.__exportStar(require("./spiderling"), exports);
tslib_1.__exportStar(require("./spitter"), exports);
tslib_1.__exportStar(require("./weaver"), exports);
tslib_1.__exportStar(require("./web"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const brood_mother_1 = require("./brood-mother");
const cutter_1 = require("./cutter");
const game_object_1 = require("./game-object");
const nest_1 = require("./nest");
const player_1 = require("./player");
const spider_1 = require("./spider");
const spiderling_1 = require("./spiderling");
const spitter_1 = require("./spitter");
const weaver_1 = require("./weaver");
const web_1 = require("./web");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Spiders game.
 */
class SpidersGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new BroodMother in the Game and tracks it for all players.
     *
     * @param args - Data about the BroodMother to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new BroodMother hooked up in the game and ready for you to
     * use.
     */
    broodMother(args) {
        return this.createGameObject("BroodMother", brood_mother_1.BroodMother, args);
    }
    /**
     * Creates a new Cutter in the Game and tracks it for all players.
     *
     * @param args - Data about the Cutter to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Cutter hooked up in the game and ready for you to use.
     */
    cutter(args) {
        return this.createGameObject("Cutter", cutter_1.Cutter, args);
    }
    /**
     * Creates a new Nest in the Game and tracks it for all players.
     *
     * @param args - Data about the Nest to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Nest hooked up in the game and ready for you to use.
     */
    nest(args) {
        return this.createGameObject("Nest", nest_1.Nest, args);
    }
    /**
     * Creates a new Spider in the Game and tracks it for all players.
     *
     * @param args - Data about the Spider to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Spider hooked up in the game and ready for you to use.
     */
    spider(args) {
        return this.createGameObject("Spider", spider_1.Spider, args);
    }
    /**
     * Creates a new Spiderling in the Game and tracks it for all players.
     *
     * @param args - Data about the Spiderling to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Spiderling hooked up in the game and ready for you to
     * use.
     */
    spiderling(args) {
        return this.createGameObject("Spiderling", spiderling_1.Spiderling, args);
    }
    /**
     * Creates a new Spitter in the Game and tracks it for all players.
     *
     * @param args - Data about the Spitter to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new Spitter hooked up in the game and ready for you to use.
     */
    spitter(args) {
        return this.createGameObject("Spitter", spitter_1.Spitter, args);
    }
    /**
     * Creates a new Weaver in the Game and tracks it for all players.
     *
     * @param args - Data about the Weaver to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Weaver hooked up in the game and ready for you to use.
     */
    weaver(args) {
        return this.createGameObject("Weaver", weaver_1.Weaver, args);
    }
    /**
     * Creates a new Web in the Game and tracks it for all players.
     *
     * @param args - Data about the Web to set. Any keys matching a property in
     * the game object's class will be automatically set for you.
     * @returns A new Web hooked up in the game and ready for you to use.
     */
    web(args) {
        return this.createGameObject("Web", web_1.Web, args);
    }
}
exports.SpidersGameObjectFactory = SpidersGameObjectFactory;
/**
 * The shared namespace for Spiders that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.SpidersGame,
    GameManager: game_manager_1.SpidersGameManager,
    GameObjectFactory: SpidersGameObjectFactory,
    GameSettingsManager: game_settings_1.SpidersGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Spiders",
    gameSettingsManager: new game_settings_1.SpidersGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                cutSpeed: {
                    typeName: "int",
                },
                eggsScalar: {
                    typeName: "float",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                initialWebStrength: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                maxWebStrength: {
                    typeName: "int",
                },
                movementSpeed: {
                    typeName: "int",
                },
                nests: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: nest_1.Nest,
                        nullable: false,
                    },
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                session: {
                    typeName: "string",
                },
                spitSpeed: {
                    typeName: "int",
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                weavePower: {
                    typeName: "int",
                },
                weaveSpeed: {
                    typeName: "int",
                },
                webs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: web_1.Web,
                        nullable: false,
                    },
                },
            },
            functions: {},
        },
        BroodMother: {
            parentClassName: "Spider",
            attributes: {
                eggs: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
            },
            functions: {
                consume: {
                    args: [
                        {
                            argName: "spiderling",
                            typeName: "gameObject",
                            gameObjectClass: spiderling_1.Spiderling,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                spawn: {
                    args: [
                        {
                            argName: "spiderlingType",
                            typeName: "string",
                            defaultValue: "Spitter",
                            literals: ["Spitter", "Weaver", "Cutter"],
                        },
                    ],
                    invalidValue: undefined,
                    returns: {
                        typeName: "gameObject",
                        gameObjectClass: spiderling_1.Spiderling,
                        nullable: true,
                    },
                },
            },
        },
        Cutter: {
            parentClassName: "Spiderling",
            attributes: {
                cuttingWeb: {
                    typeName: "gameObject",
                    gameObjectClass: web_1.Web,
                    nullable: true,
                },
            },
            functions: {
                cut: {
                    args: [
                        {
                            argName: "web",
                            typeName: "gameObject",
                            gameObjectClass: web_1.Web,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Nest: {
            parentClassName: "GameObject",
            attributes: {
                controllingPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                spiders: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: spider_1.Spider,
                        nullable: false,
                    },
                },
                webs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: web_1.Web,
                        nullable: false,
                    },
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                broodMother: {
                    typeName: "gameObject",
                    gameObjectClass: brood_mother_1.BroodMother,
                    nullable: false,
                },
                clientType: {
                    typeName: "string",
                },
                lost: {
                    typeName: "boolean",
                },
                maxSpiderlings: {
                    typeName: "int",
                },
                name: {
                    typeName: "string",
                },
                numberOfNestsControlled: {
                    typeName: "int",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                spiders: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: spider_1.Spider,
                        nullable: false,
                    },
                },
                timeRemaining: {
                    typeName: "float",
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Spider: {
            parentClassName: "GameObject",
            attributes: {
                isDead: {
                    typeName: "boolean",
                },
                nest: {
                    typeName: "gameObject",
                    gameObjectClass: nest_1.Nest,
                    nullable: true,
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
            },
            functions: {},
        },
        Spiderling: {
            parentClassName: "Spider",
            attributes: {
                busy: {
                    typeName: "string",
                    defaultValue: "",
                    literals: ["", "Moving", "Attacking", "Strengthening", "Weakening", "Cutting", "Spitting"],
                },
                movingOnWeb: {
                    typeName: "gameObject",
                    gameObjectClass: web_1.Web,
                    nullable: true,
                },
                movingToNest: {
                    typeName: "gameObject",
                    gameObjectClass: nest_1.Nest,
                    nullable: true,
                },
                numberOfCoworkers: {
                    typeName: "int",
                },
                workRemaining: {
                    typeName: "float",
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "spiderling",
                            typeName: "gameObject",
                            gameObjectClass: spiderling_1.Spiderling,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "web",
                            typeName: "gameObject",
                            gameObjectClass: web_1.Web,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Spitter: {
            parentClassName: "Spiderling",
            attributes: {
                spittingWebToNest: {
                    typeName: "gameObject",
                    gameObjectClass: nest_1.Nest,
                    nullable: true,
                },
            },
            functions: {
                spit: {
                    args: [
                        {
                            argName: "nest",
                            typeName: "gameObject",
                            gameObjectClass: nest_1.Nest,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Weaver: {
            parentClassName: "Spiderling",
            attributes: {
                strengtheningWeb: {
                    typeName: "gameObject",
                    gameObjectClass: web_1.Web,
                    nullable: true,
                },
                weakeningWeb: {
                    typeName: "gameObject",
                    gameObjectClass: web_1.Web,
                    nullable: true,
                },
            },
            functions: {
                strengthen: {
                    args: [
                        {
                            argName: "web",
                            typeName: "gameObject",
                            gameObjectClass: web_1.Web,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                weaken: {
                    args: [
                        {
                            argName: "web",
                            typeName: "gameObject",
                            gameObjectClass: web_1.Web,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Web: {
            parentClassName: "GameObject",
            attributes: {
                length: {
                    typeName: "float",
                },
                load: {
                    typeName: "int",
                },
                nestA: {
                    typeName: "gameObject",
                    gameObjectClass: nest_1.Nest,
                    nullable: true,
                },
                nestB: {
                    typeName: "gameObject",
                    gameObjectClass: nest_1.Nest,
                    nullable: true,
                },
                spiderlings: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: spiderling_1.Spiderling,
                        nullable: false,
                    },
                },
                strength: {
                    typeName: "int",
                },
            },
            functions: {},
        },
    },
    gameVersion: "a8df6038306b6855bb35959d7698f8dcbf98f48e7e148de59fef940ccb241bdf",
});
//# sourceMappingURL=data:application/json;base64,