"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require("./");
// <<-- Creer-Merge: imports -->>
const utils_1 = require("~/utils");
// <<-- /Creer-Merge: imports -->>
/**
 * There's an infestation of enemy spiders challenging your queen broodmother
 * spider! Protect her and attack the other broodmother in this turn based,
 * node based, game.
 */
class SpidersGame extends _1.BaseClasses.Game {
    // <<-- Creer-Merge: attributes -->>
    // Any additional member attributes can go here
    // NOTE: They will not be sent to the AIs, those must be defined
    // in the creer file.
    // <<-- /Creer-Merge: attributes -->>
    /**
     * Called when a Game is created.
     *
     * @param settingsManager - The manager that holds initial settings.
     * @param required - Data required to initialize this (ignore it).
     */
    constructor(settingsManager, required) {
        super(settingsManager, required);
        this.settingsManager = settingsManager;
        /** The settings used to initialize the game, as set by players */
        this.settings = Object.freeze(this.settingsManager.values);
        // <<-- Creer-Merge: constructor -->>
        const mapWidth = 400;
        const mapHeight = 200;
        const deadzone = 25;
        const maxNests = 48; // per side, as are the mirrored
        const minNests = 8;
        const maxWebs = 20;
        const minWebs = 0;
        const minCrossWebs = 0;
        const maxCrossWebs = 4;
        // generare Nests on the left
        let numNests = this.manager.random.int(maxNests, minNests);
        // Try to place nests this many times before giving up because the map
        // is probably too congested
        let retries = 1000;
        for (let i = 0; i < numNests; i++) {
            while (--retries > 0) {
                let point = {
                    x: this.manager.random.int(mapWidth / 2 - deadzone / 2),
                    y: this.manager.random.int(mapHeight),
                };
                for (const nest of this.nests) {
                    if (utils_1.euclideanDistance(nest, point) <= deadzone) {
                        point = undefined;
                        break;
                    }
                }
                if (point) {
                    this.nests.push(this.manager.create.nest(point));
                    break; // out of while(retries), as the point was valid
                }
            }
        }
        // re-set just incase we had to abort above due to congestion
        numNests = this.nests.length;
        if (!utils_1.arrayHasElements(this.nests)) {
            throw new Error("Spiders game has no nests!");
        }
        // generate Webs on the left
        const numWebs = this.manager.random.int(maxWebs, minWebs);
        for (let i = 0; i < numWebs; i++) {
            const nestA = this.manager.random.element(this.nests);
            if (!nestA) {
                throw new Error("No nests to create Webs.");
            }
            let nestB = nestA;
            while (nestB === nestA) {
                nestB = this.manager.random.element(this.nests);
            }
            this.manager.create.web({ nestA, nestB });
        }
        // create the BroodMother
        this.players[0].broodMother = this.manager.create.broodMother({
            owner: this.players[0],
            nest: this.manager.random.element(this.nests),
        });
        // now mirror it
        // mirror the Nests
        const mirrorNests = new Map();
        for (let i = 0; i < numNests; i++) {
            const mirroring = this.nests[i];
            const mirrored = this.manager.create.nest({
                x: mapWidth - mirroring.x,
                y: mirroring.y,
            });
            // these are not exposed to competitors
            mirrorNests.set(mirroring, mirrored);
            mirrorNests.set(mirrored, mirroring);
        }
        // mirror the Webs
        for (const web of this.webs) {
            if (!web.hasNotSnapped()) {
                throw new Error("Invalid web on game creation!");
            }
            // get mirror the nests
            const nestA = mirrorNests.get(web.nestA);
            const nestB = mirrorNests.get(web.nestB);
            this.manager.create.web({ nestA, nestB });
        }
        // webs that cross the middle of the game
        const numCrossWebs = this.manager.random.int(minCrossWebs, maxCrossWebs);
        for (let i = 0; i < numCrossWebs; i++) {
            // the first half the the array has the nests on player 0's side
            const nestA = this.nests[this.manager.random.int(numNests - 1)];
            // and the other half has player 1's
            const nestB = this.nests[this.manager.random.int(numNests, numNests * 2 - 1)];
            this.manager.create.web({ nestA, nestB });
            const mirrorA = mirrorNests.get(nestA);
            const mirrorB = mirrorNests.get(nestB);
            if (mirrorNests.get(nestA) !== nestB) {
                // this is the mirror of the web created above, so long as the nests don't mirror each other already
                this.manager.create.web({ nestA: mirrorA, nestB: mirrorB });
            }
        }
        // mirror the BroodMother
        const secondPlayer = this.players[1];
        const nest0 = this.players[0].broodMother.nest;
        if (!nest0) {
            throw new Error("Player 0's BroodMother has no nest!");
        }
        const mirrorNest = mirrorNests.get(nest0);
        if (!mirrorNest) {
            throw new Error("Player 1's BroodMother has no nest!");
        }
        secondPlayer.broodMother = this.manager.create.broodMother({
            owner: this.players[1],
            nest: mirrorNest,
        });
        // <<-- /Creer-Merge: constructor -->>
    }
}
exports.SpidersGame = SpidersGame;
//# sourceMappingURL=data:application/json;base64,