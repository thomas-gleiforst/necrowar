"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const base3 = mixins_1.mixTiled(base2);
const mixed = base3;
/** The base AI class for the Necrowar game will mixin logic. */
class BaseNecrowarAI extends mixed.AI {
}
/** The base Game class for the Necrowar game will mixin logic. */
class BaseNecrowarGame extends mixed.Game {
}
/** The base GameManager class for the Necrowar game will mixin logic. */
class BaseNecrowarGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Necrowar game will mixin logic. */
class BaseNecrowarGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Necrowar game will mixin logic. */
class BaseNecrowarGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BaseNecrowarAI,
    Game: BaseNecrowarGame,
    GameManager: BaseNecrowarGameManager,
    GameObject: BaseNecrowarGameObject,
    GameSettings: BaseNecrowarGameSettings,
};
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./tile"), exports);
tslib_1.__exportStar(require("./tower"), exports);
tslib_1.__exportStar(require("./tower-job"), exports);
tslib_1.__exportStar(require("./unit"), exports);
tslib_1.__exportStar(require("./unit-job"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const game_object_1 = require("./game-object");
const player_1 = require("./player");
const tile_1 = require("./tile");
const tower_1 = require("./tower");
const tower_job_1 = require("./tower-job");
const unit_1 = require("./unit");
const unit_job_1 = require("./unit-job");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Necrowar game.
 */
class NecrowarGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    tile(args) {
        return this.createGameObject("Tile", tile_1.Tile, args);
    }
    /**
     * Creates a new Tower in the Game and tracks it for all players.
     *
     * @param args - Data about the Tower to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tower hooked up in the game and ready for you to use.
     */
    tower(args) {
        return this.createGameObject("Tower", tower_1.Tower, args);
    }
    /**
     * Creates a new TowerJob in the Game and tracks it for all players.
     *
     * @param args - Data about the TowerJob to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new TowerJob hooked up in the game and ready for you to use.
     */
    towerJob(args) {
        return this.createGameObject("TowerJob", tower_job_1.TowerJob, args);
    }
    /**
     * Creates a new Unit in the Game and tracks it for all players.
     *
     * @param args - Data about the Unit to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Unit hooked up in the game and ready for you to use.
     */
    unit(args) {
        return this.createGameObject("Unit", unit_1.Unit, args);
    }
    /**
     * Creates a new UnitJob in the Game and tracks it for all players.
     *
     * @param args - Data about the UnitJob to set. Any keys matching a
     * property in the game object's class will be automatically set for you.
     * @returns A new UnitJob hooked up in the game and ready for you to use.
     */
    unitJob(args) {
        return this.createGameObject("UnitJob", unit_job_1.UnitJob, args);
    }
}
exports.NecrowarGameObjectFactory = NecrowarGameObjectFactory;
/**
 * The shared namespace for Necrowar that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.NecrowarGame,
    GameManager: game_manager_1.NecrowarGameManager,
    GameObjectFactory: NecrowarGameObjectFactory,
    GameSettingsManager: game_settings_1.NecrowarGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Necrowar",
    gameSettingsManager: new game_settings_1.NecrowarGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                goldIncomePerUnit: {
                    typeName: "int",
                },
                islandIncomePerUnit: {
                    typeName: "int",
                },
                manaIncomePerUnit: {
                    typeName: "int",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                riverPhase: {
                    typeName: "int",
                },
                session: {
                    typeName: "string",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                towerJobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tower_job_1.TowerJob,
                        nullable: false,
                    },
                },
                towers: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tower_1.Tower,
                        nullable: false,
                    },
                },
                unitJobs: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_job_1.UnitJob,
                        nullable: false,
                    },
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                gold: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                homeBase: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                lost: {
                    typeName: "boolean",
                },
                mana: {
                    typeName: "int",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                side: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeRemaining: {
                    typeName: "float",
                },
                towers: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tower_1.Tower,
                        nullable: false,
                    },
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                corpses: {
                    typeName: "int",
                },
                isCastle: {
                    typeName: "boolean",
                },
                isGoldMine: {
                    typeName: "boolean",
                },
                isGrass: {
                    typeName: "boolean",
                },
                isIslandGoldMine: {
                    typeName: "boolean",
                },
                isPath: {
                    typeName: "boolean",
                },
                isRiver: {
                    typeName: "boolean",
                },
                isTower: {
                    typeName: "boolean",
                },
                isUnitSpawn: {
                    typeName: "boolean",
                },
                isWall: {
                    typeName: "boolean",
                },
                isWorkerSpawn: {
                    typeName: "boolean",
                },
                numGhouls: {
                    typeName: "int",
                },
                numHounds: {
                    typeName: "int",
                },
                numZombies: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tower: {
                    typeName: "gameObject",
                    gameObjectClass: tower_1.Tower,
                    nullable: true,
                },
                unit: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {
                res: {
                    args: [
                        {
                            argName: "num",
                            typeName: "int",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                spawnUnit: {
                    args: [
                        {
                            argName: "title",
                            typeName: "string",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                spawnWorker: {
                    args: [],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Tower: {
            parentClassName: "GameObject",
            attributes: {
                attacked: {
                    typeName: "boolean",
                },
                cooldown: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                job: {
                    typeName: "gameObject",
                    gameObjectClass: tower_job_1.TowerJob,
                    nullable: false,
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: false,
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        TowerJob: {
            parentClassName: "GameObject",
            attributes: {
                allUnits: {
                    typeName: "boolean",
                },
                damage: {
                    typeName: "int",
                },
                goldCost: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                manaCost: {
                    typeName: "int",
                },
                range: {
                    typeName: "int",
                },
                title: {
                    typeName: "string",
                    defaultValue: "arrow",
                    literals: ["arrow", "aoe", "ballista", "cleansing", "castle"],
                },
                turnsBetweenAttacks: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Unit: {
            parentClassName: "GameObject",
            attributes: {
                acted: {
                    typeName: "boolean",
                },
                health: {
                    typeName: "int",
                },
                job: {
                    typeName: "gameObject",
                    gameObjectClass: unit_job_1.UnitJob,
                    nullable: false,
                },
                moves: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                build: {
                    args: [
                        {
                            argName: "title",
                            typeName: "string",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                fish: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                mine: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        UnitJob: {
            parentClassName: "GameObject",
            attributes: {
                damage: {
                    typeName: "int",
                },
                goldCost: {
                    typeName: "int",
                },
                health: {
                    typeName: "int",
                },
                manaCost: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                perTile: {
                    typeName: "int",
                },
                range: {
                    typeName: "int",
                },
                title: {
                    typeName: "string",
                    defaultValue: "worker",
                    literals: ["worker", "zombie", "ghoul", "hound", "abomination", "wraith", "horseman"],
                },
            },
            functions: {},
        },
    },
    gameVersion: "935f0e64ba290cdce31688a40bd90d1eb5375f36aeebd67482238fc0da25ef86",
});
//# sourceMappingURL=data:application/json;base64,