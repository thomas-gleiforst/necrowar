"use strict";
// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here
// base game classes
const game_1 = require("~/core/game");
// mixins
const mixins_1 = require("~/core/game/mixins");
const base0 = {
    AI: game_1.BaseAI,
    Game: game_1.BaseGame,
    GameManager: game_1.BaseGameManager,
    GameObject: game_1.BaseGameObject,
    GameSettings: game_1.BaseGameSettingsManager,
};
const base1 = mixins_1.mixTwoPlayer(base0);
const base2 = mixins_1.mixTurnBased(base1);
const base3 = mixins_1.mixTiled(base2);
const mixed = base3;
/** The base AI class for the Pirates game will mixin logic. */
class BasePiratesAI extends mixed.AI {
}
/** The base Game class for the Pirates game will mixin logic. */
class BasePiratesGame extends mixed.Game {
}
/** The base GameManager class for the Pirates game will mixin logic. */
class BasePiratesGameManager extends mixed.GameManager {
}
/** The base GameObject class for the Pirates game will mixin logic. */
class BasePiratesGameObject extends mixed.GameObject {
}
/** The base GameSettings class for the Pirates game will mixin logic. */
class BasePiratesGameSettings extends mixed.GameSettings {
}
/** The Base classes that game classes build off of. */
exports.BaseClasses = {
    AI: BasePiratesAI,
    Game: BasePiratesGame,
    GameManager: BasePiratesGameManager,
    GameObject: BasePiratesGameObject,
    GameSettings: BasePiratesGameSettings,
};
tslib_1.__exportStar(require("./game-object"), exports);
tslib_1.__exportStar(require("./player"), exports);
tslib_1.__exportStar(require("./port"), exports);
tslib_1.__exportStar(require("./tile"), exports);
tslib_1.__exportStar(require("./unit"), exports);
tslib_1.__exportStar(require("./game"), exports);
tslib_1.__exportStar(require("./game-manager"), exports);
tslib_1.__exportStar(require("./ai"), exports);
const game_object_1 = require("./game-object");
const player_1 = require("./player");
const port_1 = require("./port");
const tile_1 = require("./tile");
const unit_1 = require("./unit");
const ai_1 = require("./ai");
const game_2 = require("./game");
const game_manager_1 = require("./game-manager");
const game_settings_1 = require("./game-settings");
/**
 * The factory that **must** be used to create any game objects in
 * the Pirates game.
 */
class PiratesGameObjectFactory extends game_1.BaseGameObjectFactory {
    /**
     * Creates a new Port in the Game and tracks it for all players.
     *
     * @param args - Data about the Port to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Port hooked up in the game and ready for you to use.
     */
    port(args) {
        return this.createGameObject("Port", port_1.Port, args);
    }
    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    tile(args) {
        return this.createGameObject("Tile", tile_1.Tile, args);
    }
    /**
     * Creates a new Unit in the Game and tracks it for all players.
     *
     * @param args - Data about the Unit to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Unit hooked up in the game and ready for you to use.
     */
    unit(args) {
        return this.createGameObject("Unit", unit_1.Unit, args);
    }
}
exports.PiratesGameObjectFactory = PiratesGameObjectFactory;
/**
 * The shared namespace for Pirates that is used to
 * initialize each game instance.
 */
exports.Namespace = game_1.makeNamespace({
    AI: ai_1.AI,
    Game: game_2.PiratesGame,
    GameManager: game_manager_1.PiratesGameManager,
    GameObjectFactory: PiratesGameObjectFactory,
    GameSettingsManager: game_settings_1.PiratesGameSettingsManager,
    Player: player_1.Player,
    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Pirates",
    gameSettingsManager: new game_settings_1.PiratesGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {},
            functions: {
                runTurn: {
                    args: [],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                buryInterestRate: {
                    typeName: "float",
                },
                crewCost: {
                    typeName: "int",
                },
                crewDamage: {
                    typeName: "int",
                },
                crewHealth: {
                    typeName: "int",
                },
                crewMoves: {
                    typeName: "int",
                },
                crewRange: {
                    typeName: "float",
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: game_object_1.GameObject,
                        nullable: false,
                    },
                },
                healFactor: {
                    typeName: "float",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                merchantGoldRate: {
                    typeName: "float",
                },
                merchantInterestRate: {
                    typeName: "float",
                },
                minInterestDistance: {
                    typeName: "float",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: player_1.Player,
                        nullable: false,
                    },
                },
                ports: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: port_1.Port,
                        nullable: false,
                    },
                },
                restRange: {
                    typeName: "float",
                },
                session: {
                    typeName: "string",
                },
                shipCost: {
                    typeName: "int",
                },
                shipDamage: {
                    typeName: "int",
                },
                shipHealth: {
                    typeName: "int",
                },
                shipMoves: {
                    typeName: "int",
                },
                shipRange: {
                    typeName: "float",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
            },
            functions: {},
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                gold: {
                    typeName: "int",
                },
                infamy: {
                    typeName: "int",
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: false,
                },
                port: {
                    typeName: "gameObject",
                    gameObjectClass: port_1.Port,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: unit_1.Unit,
                        nullable: false,
                    },
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {},
        },
        Port: {
            parentClassName: "GameObject",
            attributes: {
                gold: {
                    typeName: "int",
                },
                investment: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: false,
                },
            },
            functions: {
                spawn: {
                    args: [
                        {
                            argName: "type",
                            typeName: "string",
                            defaultValue: "crew",
                            literals: ["crew", "ship"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                decoration: {
                    typeName: "boolean",
                },
                gold: {
                    typeName: "int",
                },
                port: {
                    typeName: "gameObject",
                    gameObjectClass: port_1.Port,
                    nullable: true,
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
                type: {
                    typeName: "string",
                    defaultValue: "water",
                    literals: ["water", "land"],
                },
                unit: {
                    typeName: "gameObject",
                    gameObjectClass: unit_1.Unit,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {},
        },
        Unit: {
            parentClassName: "GameObject",
            attributes: {
                acted: {
                    typeName: "boolean",
                },
                crew: {
                    typeName: "int",
                },
                crewHealth: {
                    typeName: "int",
                },
                gold: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: player_1.Player,
                    nullable: true,
                },
                path: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: tile_1.Tile,
                        nullable: false,
                    },
                },
                shipHealth: {
                    typeName: "int",
                },
                stunTurns: {
                    typeName: "int",
                },
                targetPort: {
                    typeName: "gameObject",
                    gameObjectClass: port_1.Port,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: tile_1.Tile,
                    nullable: true,
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "target",
                            typeName: "string",
                            defaultValue: "crew",
                            literals: ["crew", "ship"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                bury: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                deposit: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                dig: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                rest: {
                    args: [],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                split: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: tile_1.Tile,
                            nullable: false,
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 1,
                        },
                        {
                            argName: "gold",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                withdraw: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
    },
    gameVersion: "d51fca49d06cb7164f9dbf9c3515ab0f9b5a17113a5946bddcc75aaba125967f",
});
//# sourceMappingURL=data:application/json;base64,