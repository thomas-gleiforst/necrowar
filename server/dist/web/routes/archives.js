"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("~/core/config");
const lobby_1 = require("~/core/server/lobby");
const utils_1 = require("~/web/utils");
const DEFAULT_PAGE_COUNT = 20;
/**
 * Registers the archives/ route with a given Express app.
 *
 * @param app - The Express app instance to register the route to.
 */
function registerRouteArchives(app) {
    if (config_1.Config.ARENA_MODE) {
        return;
    }
    const lobby = lobby_1.Lobby.getInstance();
    app.get("/archives/:gameName?/:pageStart?/:pageCount?", async (req, res) => {
        const params = req.params;
        const gameName = String(params.gameName || "all");
        let pageStart = Number(params.pageStart);
        if (isNaN(pageStart)) {
            pageStart = 1; // starting page
        }
        let pageCount = Number(params.pageCount);
        if (isNaN(pageCount)) {
            pageCount = DEFAULT_PAGE_COUNT; // starting page
        }
        const { gamelogInfos } = lobby.gamelogManager;
        const startIndex = Math.max(gamelogInfos.length - (pageStart * pageCount), 0);
        const endIndex = startIndex + pageCount;
        // Because logs (all the gamelogs GamelogManager found) is pre-sorted
        // with the newest gamelogs at the END, startIndex starts at the end.
        // We want to first show the NEWEST gamelogs.
        const gamelogs = utils_1.formatGamelogInfos(gamelogInfos
            .slice(startIndex, endIndex)
            .reverse(), req.headers.host);
        const newerUri = endIndex < gamelogInfos.length
            ? (`/archives/${gameName}/${pageStart - 1}`)
            : undefined;
        const olderUri = startIndex > 0
            ? (`/archives/${gameName}/${pageStart + 1}`)
            : undefined;
        res.render("archives", {
            gamelogs,
            newerUri,
            olderUri,
        });
    });
}
exports.registerRouteArchives = registerRouteArchives;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJjaGl2ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvd2ViL3JvdXRlcy9hcmNoaXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDBDQUF1QztBQUN2QywrQ0FBNEM7QUFDNUMsdUNBQWlEO0FBRWpELE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0FBRTlCOzs7O0dBSUc7QUFDSCxTQUFnQixxQkFBcUIsQ0FBQyxHQUFZO0lBQzlDLElBQUksZUFBTSxDQUFDLFVBQVUsRUFBRTtRQUNuQixPQUFPO0tBQ1Y7SUFFRCxNQUFNLEtBQUssR0FBRyxhQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFbEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ3ZFLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQU9sQixDQUFDO1FBRUYsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUM7UUFFbEQsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsQixTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCO1NBQ2xDO1FBRUQsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNsQixTQUFTLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxnQkFBZ0I7U0FDbkQ7UUFFRCxNQUFNLEVBQUUsWUFBWSxFQUFFLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUM5QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUUsTUFBTSxRQUFRLEdBQUcsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUV4QyxxRUFBcUU7UUFDckUscUVBQXFFO1FBQ3JFLDZDQUE2QztRQUM3QyxNQUFNLFFBQVEsR0FBRywwQkFBa0IsQ0FBQyxZQUFZO2FBQzNDLEtBQUssQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDO2FBQzNCLE9BQU8sRUFBRSxFQUNkLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFbEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxHQUFHLFlBQVksQ0FBQyxNQUFNO1lBQzNDLENBQUMsQ0FBQyxDQUFDLGFBQWEsUUFBUSxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM1QyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRWhCLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFDLGFBQWEsUUFBUSxJQUFJLFNBQVMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM1QyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRWhCLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ25CLFFBQVE7WUFDUixRQUFRO1lBQ1IsUUFBUTtTQUNYLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQXZERCxzREF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzIH0gZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCJ+L2NvcmUvY29uZmlnXCI7XG5pbXBvcnQgeyBMb2JieSB9IGZyb20gXCJ+L2NvcmUvc2VydmVyL2xvYmJ5XCI7XG5pbXBvcnQgeyBmb3JtYXRHYW1lbG9nSW5mb3MgfSBmcm9tIFwifi93ZWIvdXRpbHNcIjtcblxuY29uc3QgREVGQVVMVF9QQUdFX0NPVU5UID0gMjA7XG5cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBhcmNoaXZlcy8gcm91dGUgd2l0aCBhIGdpdmVuIEV4cHJlc3MgYXBwLlxuICpcbiAqIEBwYXJhbSBhcHAgLSBUaGUgRXhwcmVzcyBhcHAgaW5zdGFuY2UgdG8gcmVnaXN0ZXIgdGhlIHJvdXRlIHRvLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJSb3V0ZUFyY2hpdmVzKGFwcDogRXhwcmVzcyk6IHZvaWQge1xuICAgIGlmIChDb25maWcuQVJFTkFfTU9ERSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbG9iYnkgPSBMb2JieS5nZXRJbnN0YW5jZSgpO1xuXG4gICAgYXBwLmdldChcIi9hcmNoaXZlcy86Z2FtZU5hbWU/LzpwYWdlU3RhcnQ/LzpwYWdlQ291bnQ/XCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSByZXEucGFyYW1zIGFzIHtcbiAgICAgICAgICAgIC8qKiBUaGUgbmFtZSBvZiB0aGUgZ2FtZS4gKi9cbiAgICAgICAgICAgIGdhbWVOYW1lOiB1bmtub3duO1xuICAgICAgICAgICAgLyoqIFRoZSBzdGFydCBpbmRleCB0byBncmFiIGdhbWVsb2dzIHN0YXJ0aW5nIGF0LiAqL1xuICAgICAgICAgICAgcGFnZVN0YXJ0OiB1bmtub3duO1xuICAgICAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgZW50cmllcyB0byBnZXQgZm9yIHRoaXMgcGFnZS4gKi9cbiAgICAgICAgICAgIHBhZ2VDb3VudDogdW5rbm93bjtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBnYW1lTmFtZSA9IFN0cmluZyhwYXJhbXMuZ2FtZU5hbWUgfHwgXCJhbGxcIik7XG5cbiAgICAgICAgbGV0IHBhZ2VTdGFydCA9IE51bWJlcihwYXJhbXMucGFnZVN0YXJ0KTtcbiAgICAgICAgaWYgKGlzTmFOKHBhZ2VTdGFydCkpIHtcbiAgICAgICAgICAgIHBhZ2VTdGFydCA9IDE7IC8vIHN0YXJ0aW5nIHBhZ2VcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYWdlQ291bnQgPSBOdW1iZXIocGFyYW1zLnBhZ2VDb3VudCk7XG4gICAgICAgIGlmIChpc05hTihwYWdlQ291bnQpKSB7XG4gICAgICAgICAgICBwYWdlQ291bnQgPSBERUZBVUxUX1BBR0VfQ09VTlQ7IC8vIHN0YXJ0aW5nIHBhZ2VcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgZ2FtZWxvZ0luZm9zIH0gPSBsb2JieS5nYW1lbG9nTWFuYWdlcjtcbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IE1hdGgubWF4KGdhbWVsb2dJbmZvcy5sZW5ndGggLSAocGFnZVN0YXJ0ICogcGFnZUNvdW50KSwgMCk7XG4gICAgICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHBhZ2VDb3VudDtcblxuICAgICAgICAvLyBCZWNhdXNlIGxvZ3MgKGFsbCB0aGUgZ2FtZWxvZ3MgR2FtZWxvZ01hbmFnZXIgZm91bmQpIGlzIHByZS1zb3J0ZWRcbiAgICAgICAgLy8gd2l0aCB0aGUgbmV3ZXN0IGdhbWVsb2dzIGF0IHRoZSBFTkQsIHN0YXJ0SW5kZXggc3RhcnRzIGF0IHRoZSBlbmQuXG4gICAgICAgIC8vIFdlIHdhbnQgdG8gZmlyc3Qgc2hvdyB0aGUgTkVXRVNUIGdhbWVsb2dzLlxuICAgICAgICBjb25zdCBnYW1lbG9ncyA9IGZvcm1hdEdhbWVsb2dJbmZvcyhnYW1lbG9nSW5mb3NcbiAgICAgICAgICAgIC5zbGljZShzdGFydEluZGV4LCBlbmRJbmRleClcbiAgICAgICAgICAgIC5yZXZlcnNlKCksXG4gICAgICAgIHJlcS5oZWFkZXJzLmhvc3QpO1xuXG4gICAgICAgIGNvbnN0IG5ld2VyVXJpID0gZW5kSW5kZXggPCBnYW1lbG9nSW5mb3MubGVuZ3RoXG4gICAgICAgICAgICA/IChgL2FyY2hpdmVzLyR7Z2FtZU5hbWV9LyR7cGFnZVN0YXJ0IC0gMX1gKVxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgY29uc3Qgb2xkZXJVcmkgPSBzdGFydEluZGV4ID4gMFxuICAgICAgICAgICAgPyAoYC9hcmNoaXZlcy8ke2dhbWVOYW1lfS8ke3BhZ2VTdGFydCArIDF9YClcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHJlcy5yZW5kZXIoXCJhcmNoaXZlc1wiLCB7XG4gICAgICAgICAgICBnYW1lbG9ncyxcbiAgICAgICAgICAgIG5ld2VyVXJpLFxuICAgICAgICAgICAgb2xkZXJVcmksXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuIl19